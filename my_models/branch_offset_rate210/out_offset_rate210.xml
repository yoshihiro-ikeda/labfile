<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<sm:blocks xmlns:sm="http://example.com/SimulinkModel" name="offset_rate210" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://example.com/SimulinkModel SimulinkModel.xsd">
  <file name="offset_rate210.h" size="7910" timestamp="2016-08-24T01:55:57+0900" type="c-header"/>
  <file name="offset_rate210.xml" size="16906" timestamp="2016-08-09T15:22:01+0900" type="xml"/>
  <file name="offset_rate210.c" size="13816" timestamp="2016-08-24T01:55:57+0900" type="c-source"/>
  <file name="offset_rate210_data.c" size="3119" timestamp="2016-08-24T01:55:57+0900" type="c-data"/>
  <block blocktype="Gain" id="1" name="offset_rate210_Gain" peinfo="1" rate="0.002">
    <input line="offset_rate210_UnitDelay1_1" port="offset_rate210_Gain_1">
      <connect block="offset_rate210_UnitDelay1" port="offset_rate210_UnitDelay1_1"/>
    </input>
    <output line="offset_rate210_Gain_1" port="offset_rate210_Gain_1" usename="true">
      <connect block="offset_rate210_Sum" port="offset_rate210_Sum_2"/>
      <connect block="offset_rate210_UnitDelay2" port="offset_rate210_UnitDelay2_1"/>
    </output>
    <var line="offset_rate210_Gain_1" mode="output" name="offset_rate210_Gain_1" port="offset_rate210_Gain_1" type="real_T"/>
    <var line="offset_rate210_UnitDelay1_1" mode="input" name="offset_rate210_UnitDelay1_1" port="offset_rate210_Gain_1" type="real_T"/>
    <param name="Gain_Gain" storage="offset_rate210_P" type="real_T" value="2.0">
      <initcode file="offset_rate210_data.c" line="26" type="param">  2.0,                                 /* Expression: 2
                                        * Referenced by: '&lt;Root&gt;/Gain'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="158" type="task">  /* Gain: '&lt;Root&gt;/Gain' */
  offset_rate210_Gain_1 = offset_rate210_P.Gain_Gain *
    offset_rate210_UnitDelay1_1;

</code>
    <code file="offset_rate210.c" line="346" type="init">  offset_rate210_Gain_1 = 0.0;
</code>
    <forward block="offset_rate210_Sum" type="data">
      <var line="offset_rate210_Gain_1" mode="input" name="offset_rate210_Gain_1" port="offset_rate210_Sum_2" type="real_T"/>
    </forward>
    <forward block="offset_rate210_UnitDelay2" type="data">
      <var line="offset_rate210_Gain_1" mode="input" name="offset_rate210_Gain_1" port="offset_rate210_UnitDelay2_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_UnitDelay1" type="data">
      <var line="offset_rate210_UnitDelay1_1" mode="output" name="offset_rate210_UnitDelay1_1" port="offset_rate210_UnitDelay1_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="2" name="offset_rate210_Gain1" peinfo="0" rate="[0.01,0]">
    <input line="offset_rate210_S_Function_1" port="offset_rate210_Gain1_1">
      <connect block="offset_rate210_S_Function" port="offset_rate210_S_Function_1"/>
    </input>
    <output line="offset_rate210_Gain1_1" port="offset_rate210_Gain1_1" usename="true">
      <connect block="offset_rate210_MathFunction1" port="offset_rate210_MathFunction1_1"/>
    </output>
    <var line="offset_rate210_Gain1_1" mode="output" name="offset_rate210_Gain1_1" port="offset_rate210_Gain1_1" type="real_T"/>
    <var line="offset_rate210_S_Function_1" mode="input" name="offset_rate210_S_Function_1" port="offset_rate210_Gain1_1" type="real_T"/>
    <param name="Gain1_Gain" storage="offset_rate210_P" type="real_T" value="2.0">
      <initcode file="offset_rate210_data.c" line="32" type="param">  2.0,                                 /* Expression: 2
                                        * Referenced by: '&lt;Root&gt;/Gain1'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="179" type="task">/*&lt;&lt;&lt; S 1 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[1] == 0) {
/*&gt;&gt;&gt; S 1 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain1' */
    offset_rate210_Gain1_1 = offset_rate210_P.Gain1_Gain *
      offset_rate210_S_Function_1;

/*&lt;&lt;&lt; E 1 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="351" type="init">  offset_rate210_Gain1_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction1" type="data">
      <var line="offset_rate210_Gain1_1" mode="input" name="offset_rate210_Gain1_1" port="offset_rate210_MathFunction1_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_S_Function" type="data">
      <var line="offset_rate210_S_Function_1" mode="output" name="offset_rate210_S_Function_1" port="offset_rate210_S_Function_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="3" name="offset_rate210_Gain10" peinfo="0" rate="[0.01,0.008]">
    <input line="offset_rate210_MathFunction9_1" port="offset_rate210_Gain10_1">
      <connect block="offset_rate210_MathFunction9" port="offset_rate210_MathFunction9_1"/>
    </input>
    <output line="offset_rate210_Gain10_1" port="offset_rate210_Gain10_1" usename="true">
      <connect block="offset_rate210_UnitDelay" port="offset_rate210_UnitDelay_1"/>
    </output>
    <var line="offset_rate210_Gain10_1" mode="output" name="offset_rate210_Gain10_1" port="offset_rate210_Gain10_1" type="real_T"/>
    <var line="offset_rate210_MathFunction9_1" mode="input" name="offset_rate210_MathFunction9_1" port="offset_rate210_Gain10_1" type="real_T"/>
    <param name="Gain10_Gain" storage="offset_rate210_P" type="real_T" value="0.5">
      <initcode file="offset_rate210_data.c" line="59" type="param">  0.5,                                 /* Expression: 0.5
                                        * Referenced by: '&lt;Root&gt;/Gain10'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="294" type="task">/*&lt;&lt;&lt; S 9 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 9 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain10' */
    offset_rate210_Gain10_1 = offset_rate210_P.Gain10_Gain *
      offset_rate210_MathFunction9_1;

/*&lt;&lt;&lt; E 9 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 9 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="377" type="init">  offset_rate210_Gain10_1 = 0.0;
</code>
    <forward block="offset_rate210_UnitDelay" type="data">
      <var line="offset_rate210_Gain10_1" mode="input" name="offset_rate210_Gain10_1" port="offset_rate210_UnitDelay_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction9" type="data">
      <var line="offset_rate210_MathFunction9_1" mode="output" name="offset_rate210_MathFunction9_1" port="offset_rate210_MathFunction9_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="4" name="offset_rate210_Gain2" peinfo="0" rate="[0.01,0]">
    <input line="offset_rate210_MathFunction1_1" port="offset_rate210_Gain2_1">
      <connect block="offset_rate210_MathFunction1" port="offset_rate210_MathFunction1_1"/>
    </input>
    <output line="offset_rate210_Gain2_1" port="offset_rate210_Gain2_1" usename="true">
      <connect block="offset_rate210_Sqrt2" port="offset_rate210_Sqrt2_1"/>
    </output>
    <var line="offset_rate210_Gain2_1" mode="output" name="offset_rate210_Gain2_1" port="offset_rate210_Gain2_1" type="real_T"/>
    <var line="offset_rate210_MathFunction1_1" mode="input" name="offset_rate210_MathFunction1_1" port="offset_rate210_Gain2_1" type="real_T"/>
    <param name="Gain2_Gain" storage="offset_rate210_P" type="real_T" value="0.5">
      <initcode file="offset_rate210_data.c" line="35" type="param">  0.5,                                 /* Expression: 0.5
                                        * Referenced by: '&lt;Root&gt;/Gain2'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="186" type="task">/*&lt;&lt;&lt; S 1 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[1] == 0) {
/*&gt;&gt;&gt; S 1 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain2' */
    offset_rate210_Gain2_1 = offset_rate210_P.Gain2_Gain *
      offset_rate210_MathFunction1_1;
/*&lt;&lt;&lt; E 1 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="353" type="init">  offset_rate210_Gain2_1 = 0.0;
</code>
    <forward block="offset_rate210_Sqrt2" type="data">
      <var line="offset_rate210_Gain2_1" mode="input" name="offset_rate210_Gain2_1" port="offset_rate210_Sqrt2_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction1" type="data">
      <var line="offset_rate210_MathFunction1_1" mode="output" name="offset_rate210_MathFunction1_1" port="offset_rate210_MathFunction1_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="5" name="offset_rate210_Gain3" peinfo="0" rate="[0.01,0.002]">
    <input line="offset_rate210_S_Function1_1" port="offset_rate210_Gain3_1">
      <connect block="offset_rate210_S_Function1" port="offset_rate210_S_Function1_1"/>
    </input>
    <output line="offset_rate210_Gain3_1" port="offset_rate210_Gain3_1" usename="true">
      <connect block="offset_rate210_MathFunction3" port="offset_rate210_MathFunction3_1"/>
    </output>
    <var line="offset_rate210_Gain3_1" mode="output" name="offset_rate210_Gain3_1" port="offset_rate210_Gain3_1" type="real_T"/>
    <var line="offset_rate210_S_Function1_1" mode="input" name="offset_rate210_S_Function1_1" port="offset_rate210_Gain3_1" type="real_T"/>
    <param name="Gain3_Gain" storage="offset_rate210_P" type="real_T" value="2.0">
      <initcode file="offset_rate210_data.c" line="38" type="param">  2.0,                                 /* Expression: 2
                                        * Referenced by: '&lt;Root&gt;/Gain3'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="206" type="task">/*&lt;&lt;&lt; S 3 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[2] == 0) {
/*&gt;&gt;&gt; S 3 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain3' */
    offset_rate210_Gain3_1 = offset_rate210_P.Gain3_Gain *
      offset_rate210_S_Function1_1;

/*&lt;&lt;&lt; E 3 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 3 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="357" type="init">  offset_rate210_Gain3_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction3" type="data">
      <var line="offset_rate210_Gain3_1" mode="input" name="offset_rate210_Gain3_1" port="offset_rate210_MathFunction3_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_S_Function1" type="data">
      <var line="offset_rate210_S_Function1_1" mode="output" name="offset_rate210_S_Function1_1" port="offset_rate210_S_Function1_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="6" name="offset_rate210_Gain4" peinfo="0" rate="[0.01,0.002]">
    <input line="offset_rate210_MathFunction3_1" port="offset_rate210_Gain4_1">
      <connect block="offset_rate210_MathFunction3" port="offset_rate210_MathFunction3_1"/>
    </input>
    <output line="offset_rate210_Gain4_1" port="offset_rate210_Gain4_1" usename="true">
      <connect block="offset_rate210_Sqrt3" port="offset_rate210_Sqrt3_1"/>
    </output>
    <var line="offset_rate210_Gain4_1" mode="output" name="offset_rate210_Gain4_1" port="offset_rate210_Gain4_1" type="real_T"/>
    <var line="offset_rate210_MathFunction3_1" mode="input" name="offset_rate210_MathFunction3_1" port="offset_rate210_Gain4_1" type="real_T"/>
    <param name="Gain4_Gain" storage="offset_rate210_P" type="real_T" value="0.5">
      <initcode file="offset_rate210_data.c" line="41" type="param">  0.5,                                 /* Expression: 0.5
                                        * Referenced by: '&lt;Root&gt;/Gain4'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="213" type="task">/*&lt;&lt;&lt; S 3 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[2] == 0) {
/*&gt;&gt;&gt; S 3 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain4' */
    offset_rate210_Gain4_1 = offset_rate210_P.Gain4_Gain *
      offset_rate210_MathFunction3_1;
/*&lt;&lt;&lt; E 3 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 3 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="359" type="init">  offset_rate210_Gain4_1 = 0.0;
</code>
    <forward block="offset_rate210_Sqrt3" type="data">
      <var line="offset_rate210_Gain4_1" mode="input" name="offset_rate210_Gain4_1" port="offset_rate210_Sqrt3_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction3" type="data">
      <var line="offset_rate210_MathFunction3_1" mode="output" name="offset_rate210_MathFunction3_1" port="offset_rate210_MathFunction3_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="7" name="offset_rate210_Gain5" peinfo="0" rate="[0.01,0.004]">
    <input line="offset_rate210_S_Function2_1" port="offset_rate210_Gain5_1">
      <connect block="offset_rate210_S_Function2" port="offset_rate210_S_Function2_1"/>
    </input>
    <output line="offset_rate210_Gain5_1" port="offset_rate210_Gain5_1" usename="true">
      <connect block="offset_rate210_MathFunction5" port="offset_rate210_MathFunction5_1"/>
    </output>
    <var line="offset_rate210_Gain5_1" mode="output" name="offset_rate210_Gain5_1" port="offset_rate210_Gain5_1" type="real_T"/>
    <var line="offset_rate210_S_Function2_1" mode="input" name="offset_rate210_S_Function2_1" port="offset_rate210_Gain5_1" type="real_T"/>
    <param name="Gain5_Gain" storage="offset_rate210_P" type="real_T" value="2.0">
      <initcode file="offset_rate210_data.c" line="44" type="param">  2.0,                                 /* Expression: 2
                                        * Referenced by: '&lt;Root&gt;/Gain5'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="233" type="task">/*&lt;&lt;&lt; S 5 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[3] == 0) {
/*&gt;&gt;&gt; S 5 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain5' */
    offset_rate210_Gain5_1 = offset_rate210_P.Gain5_Gain *
      offset_rate210_S_Function2_1;

/*&lt;&lt;&lt; E 5 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 5 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="363" type="init">  offset_rate210_Gain5_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction5" type="data">
      <var line="offset_rate210_Gain5_1" mode="input" name="offset_rate210_Gain5_1" port="offset_rate210_MathFunction5_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_S_Function2" type="data">
      <var line="offset_rate210_S_Function2_1" mode="output" name="offset_rate210_S_Function2_1" port="offset_rate210_S_Function2_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="8" name="offset_rate210_Gain6" peinfo="0" rate="[0.01,0.004]">
    <input line="offset_rate210_MathFunction5_1" port="offset_rate210_Gain6_1">
      <connect block="offset_rate210_MathFunction5" port="offset_rate210_MathFunction5_1"/>
    </input>
    <output line="offset_rate210_Gain6_1" port="offset_rate210_Gain6_1" usename="true">
      <connect block="offset_rate210_Sqrt4" port="offset_rate210_Sqrt4_1"/>
    </output>
    <var line="offset_rate210_Gain6_1" mode="output" name="offset_rate210_Gain6_1" port="offset_rate210_Gain6_1" type="real_T"/>
    <var line="offset_rate210_MathFunction5_1" mode="input" name="offset_rate210_MathFunction5_1" port="offset_rate210_Gain6_1" type="real_T"/>
    <param name="Gain6_Gain" storage="offset_rate210_P" type="real_T" value="0.5">
      <initcode file="offset_rate210_data.c" line="47" type="param">  0.5,                                 /* Expression: 0.5
                                        * Referenced by: '&lt;Root&gt;/Gain6'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="240" type="task">/*&lt;&lt;&lt; S 5 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[3] == 0) {
/*&gt;&gt;&gt; S 5 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain6' */
    offset_rate210_Gain6_1 = offset_rate210_P.Gain6_Gain *
      offset_rate210_MathFunction5_1;
/*&lt;&lt;&lt; E 5 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 5 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="365" type="init">  offset_rate210_Gain6_1 = 0.0;
</code>
    <forward block="offset_rate210_Sqrt4" type="data">
      <var line="offset_rate210_Gain6_1" mode="input" name="offset_rate210_Gain6_1" port="offset_rate210_Sqrt4_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction5" type="data">
      <var line="offset_rate210_MathFunction5_1" mode="output" name="offset_rate210_MathFunction5_1" port="offset_rate210_MathFunction5_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="9" name="offset_rate210_Gain7" peinfo="0" rate="[0.01,0.006]">
    <input line="offset_rate210_S_Function3_1" port="offset_rate210_Gain7_1">
      <connect block="offset_rate210_S_Function3" port="offset_rate210_S_Function3_1"/>
    </input>
    <output line="offset_rate210_Gain7_1" port="offset_rate210_Gain7_1" usename="true">
      <connect block="offset_rate210_MathFunction7" port="offset_rate210_MathFunction7_1"/>
    </output>
    <var line="offset_rate210_Gain7_1" mode="output" name="offset_rate210_Gain7_1" port="offset_rate210_Gain7_1" type="real_T"/>
    <var line="offset_rate210_S_Function3_1" mode="input" name="offset_rate210_S_Function3_1" port="offset_rate210_Gain7_1" type="real_T"/>
    <param name="Gain7_Gain" storage="offset_rate210_P" type="real_T" value="2.0">
      <initcode file="offset_rate210_data.c" line="50" type="param">  2.0,                                 /* Expression: 2
                                        * Referenced by: '&lt;Root&gt;/Gain7'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="260" type="task">/*&lt;&lt;&lt; S 7 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[4] == 0) {
/*&gt;&gt;&gt; S 7 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain7' */
    offset_rate210_Gain7_1 = offset_rate210_P.Gain7_Gain *
      offset_rate210_S_Function3_1;

/*&lt;&lt;&lt; E 7 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 7 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="369" type="init">  offset_rate210_Gain7_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction7" type="data">
      <var line="offset_rate210_Gain7_1" mode="input" name="offset_rate210_Gain7_1" port="offset_rate210_MathFunction7_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_S_Function3" type="data">
      <var line="offset_rate210_S_Function3_1" mode="output" name="offset_rate210_S_Function3_1" port="offset_rate210_S_Function3_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="10" name="offset_rate210_Gain8" peinfo="0" rate="[0.01,0.006]">
    <input line="offset_rate210_MathFunction7_1" port="offset_rate210_Gain8_1">
      <connect block="offset_rate210_MathFunction7" port="offset_rate210_MathFunction7_1"/>
    </input>
    <output line="offset_rate210_Gain8_1" port="offset_rate210_Gain8_1" usename="true">
      <connect block="offset_rate210_Sqrt5" port="offset_rate210_Sqrt5_1"/>
    </output>
    <var line="offset_rate210_Gain8_1" mode="output" name="offset_rate210_Gain8_1" port="offset_rate210_Gain8_1" type="real_T"/>
    <var line="offset_rate210_MathFunction7_1" mode="input" name="offset_rate210_MathFunction7_1" port="offset_rate210_Gain8_1" type="real_T"/>
    <param name="Gain8_Gain" storage="offset_rate210_P" type="real_T" value="0.5">
      <initcode file="offset_rate210_data.c" line="53" type="param">  0.5,                                 /* Expression: 0.5
                                        * Referenced by: '&lt;Root&gt;/Gain8'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="267" type="task">/*&lt;&lt;&lt; S 7 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[4] == 0) {
/*&gt;&gt;&gt; S 7 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain8' */
    offset_rate210_Gain8_1 = offset_rate210_P.Gain8_Gain *
      offset_rate210_MathFunction7_1;
/*&lt;&lt;&lt; E 7 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 7 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="371" type="init">  offset_rate210_Gain8_1 = 0.0;
</code>
    <forward block="offset_rate210_Sqrt5" type="data">
      <var line="offset_rate210_Gain8_1" mode="input" name="offset_rate210_Gain8_1" port="offset_rate210_Sqrt5_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction7" type="data">
      <var line="offset_rate210_MathFunction7_1" mode="output" name="offset_rate210_MathFunction7_1" port="offset_rate210_MathFunction7_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Gain" id="11" name="offset_rate210_Gain9" peinfo="0" rate="[0.01,0.008]">
    <input line="offset_rate210_S_Function4_1" port="offset_rate210_Gain9_1">
      <connect block="offset_rate210_S_Function4" port="offset_rate210_S_Function4_1"/>
    </input>
    <output line="offset_rate210_Gain9_1" port="offset_rate210_Gain9_1" usename="true">
      <connect block="offset_rate210_MathFunction9" port="offset_rate210_MathFunction9_1"/>
    </output>
    <var line="offset_rate210_Gain9_1" mode="output" name="offset_rate210_Gain9_1" port="offset_rate210_Gain9_1" type="real_T"/>
    <var line="offset_rate210_S_Function4_1" mode="input" name="offset_rate210_S_Function4_1" port="offset_rate210_Gain9_1" type="real_T"/>
    <param name="Gain9_Gain" storage="offset_rate210_P" type="real_T" value="2.0">
      <initcode file="offset_rate210_data.c" line="56" type="param">  2.0,                                 /* Expression: 2
                                        * Referenced by: '&lt;Root&gt;/Gain9'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="287" type="task">/*&lt;&lt;&lt; S 9 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 9 none &gt;&gt;&gt;*/
    /* Gain: '&lt;Root&gt;/Gain9' */
    offset_rate210_Gain9_1 = offset_rate210_P.Gain9_Gain *
      offset_rate210_S_Function4_1;

/*&lt;&lt;&lt; E 9 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 9 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="375" type="init">  offset_rate210_Gain9_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction9" type="data">
      <var line="offset_rate210_Gain9_1" mode="input" name="offset_rate210_Gain9_1" port="offset_rate210_MathFunction9_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_S_Function4" type="data">
      <var line="offset_rate210_S_Function4_1" mode="output" name="offset_rate210_S_Function4_1" port="offset_rate210_S_Function4_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="12" name="offset_rate210_MathFunction1" peinfo="0" rate="[0.01,0]">
    <input line="offset_rate210_Gain1_1" port="offset_rate210_MathFunction1_1">
      <connect block="offset_rate210_Gain1" port="offset_rate210_Gain1_1"/>
    </input>
    <output line="offset_rate210_MathFunction1_1" port="offset_rate210_MathFunction1_1" usename="true">
      <connect block="offset_rate210_Gain2" port="offset_rate210_Gain2_1"/>
    </output>
    <var line="offset_rate210_MathFunction1_1" mode="output" name="offset_rate210_MathFunction1_1" port="offset_rate210_MathFunction1_1" type="real_T"/>
    <var line="offset_rate210_Gain1_1" mode="input" name="offset_rate210_Gain1_1" port="offset_rate210_MathFunction1_1" type="real_T"/>
    <code file="offset_rate210.c" line="183" type="task">/*&lt;&lt;&lt; S 1 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[1] == 0) {
/*&gt;&gt;&gt; S 1 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction1' */
    offset_rate210_MathFunction1_1 = rt_powd_snf(10.0, offset_rate210_Gain1_1);

/*&lt;&lt;&lt; E 1 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="352" type="init">  offset_rate210_MathFunction1_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain2" type="data">
      <var line="offset_rate210_MathFunction1_1" mode="input" name="offset_rate210_MathFunction1_1" port="offset_rate210_Gain2_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain1" type="data">
      <var line="offset_rate210_Gain1_1" mode="output" name="offset_rate210_Gain1_1" port="offset_rate210_Gain1_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="13" name="offset_rate210_MathFunction10" peinfo="0" rate="[0.01,0.008]">
    <input line="offset_rate210_Sqrt5_1" port="offset_rate210_MathFunction10_1">
      <connect block="offset_rate210_Sqrt5" port="offset_rate210_Sqrt5_1"/>
    </input>
    <output line="offset_rate210_MathFunction10_1" port="offset_rate210_MathFunction10_1" usename="true">
      <connect block="offset_rate210_S_Function4" port="offset_rate210_S_Function4_1"/>
    </output>
    <var line="offset_rate210_MathFunction10_1" mode="output" name="offset_rate210_MathFunction10_1" port="offset_rate210_MathFunction10_1" type="real_T"/>
    <var line="offset_rate210_Sqrt5_1" mode="input" name="offset_rate210_Sqrt5_1" port="offset_rate210_MathFunction10_1" type="real_T"/>
    <code file="offset_rate210.c" line="276" type="task">/*&lt;&lt;&lt; S 9 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 9 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction10'
     *
     * About '&lt;Root&gt;/MathFunction10':
     *  Operator: log10
     */
    offset_rate210_MathFunction10_1 = log10(offset_rate210_Sqrt5_1);

/*&lt;&lt;&lt; E 9 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 9 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="373" type="init">  offset_rate210_MathFunction10_1 = 0.0;
</code>
    <forward block="offset_rate210_S_Function4" type="data">
      <var line="offset_rate210_MathFunction10_1" mode="input" name="offset_rate210_MathFunction10_1" port="offset_rate210_S_Function4_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Sqrt5" type="data">
      <var line="offset_rate210_Sqrt5_1" mode="output" name="offset_rate210_Sqrt5_1" port="offset_rate210_Sqrt5_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="14" name="offset_rate210_MathFunction2" peinfo="0" rate="[0.01,0]">
    <input line="offset_rate210_Sqrt1_1" port="offset_rate210_MathFunction2_1">
      <connect block="offset_rate210_Sqrt1" port="offset_rate210_Sqrt1_1"/>
    </input>
    <output line="offset_rate210_MathFunction2_1" port="offset_rate210_MathFunction2_1" usename="true">
      <connect block="offset_rate210_S_Function" port="offset_rate210_S_Function_1"/>
    </output>
    <var line="offset_rate210_MathFunction2_1" mode="output" name="offset_rate210_MathFunction2_1" port="offset_rate210_MathFunction2_1" type="real_T"/>
    <var line="offset_rate210_Sqrt1_1" mode="input" name="offset_rate210_Sqrt1_1" port="offset_rate210_MathFunction2_1" type="real_T"/>
    <code file="offset_rate210.c" line="168" type="task">/*&lt;&lt;&lt; S 1 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[1] == 0) {
/*&gt;&gt;&gt; S 1 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction2'
     *
     * About '&lt;Root&gt;/MathFunction2':
     *  Operator: log10
     */
    offset_rate210_MathFunction2_1 = log10(offset_rate210_Sqrt1_1);

/*&lt;&lt;&lt; E 1 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="349" type="init">  offset_rate210_MathFunction2_1 = 0.0;
</code>
    <forward block="offset_rate210_S_Function" type="data">
      <var line="offset_rate210_MathFunction2_1" mode="input" name="offset_rate210_MathFunction2_1" port="offset_rate210_S_Function_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Sqrt1" type="data">
      <var line="offset_rate210_Sqrt1_1" mode="output" name="offset_rate210_Sqrt1_1" port="offset_rate210_Sqrt1_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="15" name="offset_rate210_MathFunction3" peinfo="0" rate="[0.01,0.002]">
    <input line="offset_rate210_Gain3_1" port="offset_rate210_MathFunction3_1">
      <connect block="offset_rate210_Gain3" port="offset_rate210_Gain3_1"/>
    </input>
    <output line="offset_rate210_MathFunction3_1" port="offset_rate210_MathFunction3_1" usename="true">
      <connect block="offset_rate210_Gain4" port="offset_rate210_Gain4_1"/>
    </output>
    <var line="offset_rate210_MathFunction3_1" mode="output" name="offset_rate210_MathFunction3_1" port="offset_rate210_MathFunction3_1" type="real_T"/>
    <var line="offset_rate210_Gain3_1" mode="input" name="offset_rate210_Gain3_1" port="offset_rate210_MathFunction3_1" type="real_T"/>
    <code file="offset_rate210.c" line="210" type="task">/*&lt;&lt;&lt; S 3 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[2] == 0) {
/*&gt;&gt;&gt; S 3 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction3' */
    offset_rate210_MathFunction3_1 = rt_powd_snf(10.0, offset_rate210_Gain3_1);

/*&lt;&lt;&lt; E 3 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 3 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="358" type="init">  offset_rate210_MathFunction3_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain4" type="data">
      <var line="offset_rate210_MathFunction3_1" mode="input" name="offset_rate210_MathFunction3_1" port="offset_rate210_Gain4_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain3" type="data">
      <var line="offset_rate210_Gain3_1" mode="output" name="offset_rate210_Gain3_1" port="offset_rate210_Gain3_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="16" name="offset_rate210_MathFunction4" peinfo="0" rate="[0.01,0.002]">
    <input line="offset_rate210_Sqrt2_1" port="offset_rate210_MathFunction4_1">
      <connect block="offset_rate210_Sqrt2" port="offset_rate210_Sqrt2_1"/>
    </input>
    <output line="offset_rate210_MathFunction4_1" port="offset_rate210_MathFunction4_1" usename="true">
      <connect block="offset_rate210_S_Function1" port="offset_rate210_S_Function1_1"/>
    </output>
    <var line="offset_rate210_MathFunction4_1" mode="output" name="offset_rate210_MathFunction4_1" port="offset_rate210_MathFunction4_1" type="real_T"/>
    <var line="offset_rate210_Sqrt2_1" mode="input" name="offset_rate210_Sqrt2_1" port="offset_rate210_MathFunction4_1" type="real_T"/>
    <code file="offset_rate210.c" line="195" type="task">/*&lt;&lt;&lt; S 3 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[2] == 0) {
/*&gt;&gt;&gt; S 3 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction4'
     *
     * About '&lt;Root&gt;/MathFunction4':
     *  Operator: log10
     */
    offset_rate210_MathFunction4_1 = log10(offset_rate210_Sqrt2_1);

/*&lt;&lt;&lt; E 3 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 3 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="355" type="init">  offset_rate210_MathFunction4_1 = 0.0;
</code>
    <forward block="offset_rate210_S_Function1" type="data">
      <var line="offset_rate210_MathFunction4_1" mode="input" name="offset_rate210_MathFunction4_1" port="offset_rate210_S_Function1_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Sqrt2" type="data">
      <var line="offset_rate210_Sqrt2_1" mode="output" name="offset_rate210_Sqrt2_1" port="offset_rate210_Sqrt2_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="17" name="offset_rate210_MathFunction5" peinfo="0" rate="[0.01,0.004]">
    <input line="offset_rate210_Gain5_1" port="offset_rate210_MathFunction5_1">
      <connect block="offset_rate210_Gain5" port="offset_rate210_Gain5_1"/>
    </input>
    <output line="offset_rate210_MathFunction5_1" port="offset_rate210_MathFunction5_1" usename="true">
      <connect block="offset_rate210_Gain6" port="offset_rate210_Gain6_1"/>
    </output>
    <var line="offset_rate210_MathFunction5_1" mode="output" name="offset_rate210_MathFunction5_1" port="offset_rate210_MathFunction5_1" type="real_T"/>
    <var line="offset_rate210_Gain5_1" mode="input" name="offset_rate210_Gain5_1" port="offset_rate210_MathFunction5_1" type="real_T"/>
    <code file="offset_rate210.c" line="237" type="task">/*&lt;&lt;&lt; S 5 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[3] == 0) {
/*&gt;&gt;&gt; S 5 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction5' */
    offset_rate210_MathFunction5_1 = rt_powd_snf(10.0, offset_rate210_Gain5_1);

/*&lt;&lt;&lt; E 5 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 5 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="364" type="init">  offset_rate210_MathFunction5_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain6" type="data">
      <var line="offset_rate210_MathFunction5_1" mode="input" name="offset_rate210_MathFunction5_1" port="offset_rate210_Gain6_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain5" type="data">
      <var line="offset_rate210_Gain5_1" mode="output" name="offset_rate210_Gain5_1" port="offset_rate210_Gain5_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="18" name="offset_rate210_MathFunction6" peinfo="0" rate="[0.01,0.004]">
    <input line="offset_rate210_Sqrt3_1" port="offset_rate210_MathFunction6_1">
      <connect block="offset_rate210_Sqrt3" port="offset_rate210_Sqrt3_1"/>
    </input>
    <output line="offset_rate210_MathFunction6_1" port="offset_rate210_MathFunction6_1" usename="true">
      <connect block="offset_rate210_S_Function2" port="offset_rate210_S_Function2_1"/>
    </output>
    <var line="offset_rate210_MathFunction6_1" mode="output" name="offset_rate210_MathFunction6_1" port="offset_rate210_MathFunction6_1" type="real_T"/>
    <var line="offset_rate210_Sqrt3_1" mode="input" name="offset_rate210_Sqrt3_1" port="offset_rate210_MathFunction6_1" type="real_T"/>
    <code file="offset_rate210.c" line="222" type="task">/*&lt;&lt;&lt; S 5 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[3] == 0) {
/*&gt;&gt;&gt; S 5 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction6'
     *
     * About '&lt;Root&gt;/MathFunction6':
     *  Operator: log10
     */
    offset_rate210_MathFunction6_1 = log10(offset_rate210_Sqrt3_1);

/*&lt;&lt;&lt; E 5 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 5 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="361" type="init">  offset_rate210_MathFunction6_1 = 0.0;
</code>
    <forward block="offset_rate210_S_Function2" type="data">
      <var line="offset_rate210_MathFunction6_1" mode="input" name="offset_rate210_MathFunction6_1" port="offset_rate210_S_Function2_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Sqrt3" type="data">
      <var line="offset_rate210_Sqrt3_1" mode="output" name="offset_rate210_Sqrt3_1" port="offset_rate210_Sqrt3_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="19" name="offset_rate210_MathFunction7" peinfo="0" rate="[0.01,0.006]">
    <input line="offset_rate210_Gain7_1" port="offset_rate210_MathFunction7_1">
      <connect block="offset_rate210_Gain7" port="offset_rate210_Gain7_1"/>
    </input>
    <output line="offset_rate210_MathFunction7_1" port="offset_rate210_MathFunction7_1" usename="true">
      <connect block="offset_rate210_Gain8" port="offset_rate210_Gain8_1"/>
    </output>
    <var line="offset_rate210_MathFunction7_1" mode="output" name="offset_rate210_MathFunction7_1" port="offset_rate210_MathFunction7_1" type="real_T"/>
    <var line="offset_rate210_Gain7_1" mode="input" name="offset_rate210_Gain7_1" port="offset_rate210_MathFunction7_1" type="real_T"/>
    <code file="offset_rate210.c" line="264" type="task">/*&lt;&lt;&lt; S 7 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[4] == 0) {
/*&gt;&gt;&gt; S 7 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction7' */
    offset_rate210_MathFunction7_1 = rt_powd_snf(10.0, offset_rate210_Gain7_1);

/*&lt;&lt;&lt; E 7 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 7 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="370" type="init">  offset_rate210_MathFunction7_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain8" type="data">
      <var line="offset_rate210_MathFunction7_1" mode="input" name="offset_rate210_MathFunction7_1" port="offset_rate210_Gain8_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain7" type="data">
      <var line="offset_rate210_Gain7_1" mode="output" name="offset_rate210_Gain7_1" port="offset_rate210_Gain7_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="20" name="offset_rate210_MathFunction8" peinfo="0" rate="[0.01,0.006]">
    <input line="offset_rate210_Sqrt4_1" port="offset_rate210_MathFunction8_1">
      <connect block="offset_rate210_Sqrt4" port="offset_rate210_Sqrt4_1"/>
    </input>
    <output line="offset_rate210_MathFunction8_1" port="offset_rate210_MathFunction8_1" usename="true">
      <connect block="offset_rate210_S_Function3" port="offset_rate210_S_Function3_1"/>
    </output>
    <var line="offset_rate210_MathFunction8_1" mode="output" name="offset_rate210_MathFunction8_1" port="offset_rate210_MathFunction8_1" type="real_T"/>
    <var line="offset_rate210_Sqrt4_1" mode="input" name="offset_rate210_Sqrt4_1" port="offset_rate210_MathFunction8_1" type="real_T"/>
    <code file="offset_rate210.c" line="249" type="task">/*&lt;&lt;&lt; S 7 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[4] == 0) {
/*&gt;&gt;&gt; S 7 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction8'
     *
     * About '&lt;Root&gt;/MathFunction8':
     *  Operator: log10
     */
    offset_rate210_MathFunction8_1 = log10(offset_rate210_Sqrt4_1);

/*&lt;&lt;&lt; E 7 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 7 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="367" type="init">  offset_rate210_MathFunction8_1 = 0.0;
</code>
    <forward block="offset_rate210_S_Function3" type="data">
      <var line="offset_rate210_MathFunction8_1" mode="input" name="offset_rate210_MathFunction8_1" port="offset_rate210_S_Function3_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Sqrt4" type="data">
      <var line="offset_rate210_Sqrt4_1" mode="output" name="offset_rate210_Sqrt4_1" port="offset_rate210_Sqrt4_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Math" id="21" name="offset_rate210_MathFunction9" peinfo="0" rate="[0.01,0.008]">
    <input line="offset_rate210_Gain9_1" port="offset_rate210_MathFunction9_1">
      <connect block="offset_rate210_Gain9" port="offset_rate210_Gain9_1"/>
    </input>
    <output line="offset_rate210_MathFunction9_1" port="offset_rate210_MathFunction9_1" usename="true">
      <connect block="offset_rate210_Gain10" port="offset_rate210_Gain10_1"/>
    </output>
    <var line="offset_rate210_MathFunction9_1" mode="output" name="offset_rate210_MathFunction9_1" port="offset_rate210_MathFunction9_1" type="real_T"/>
    <var line="offset_rate210_Gain9_1" mode="input" name="offset_rate210_Gain9_1" port="offset_rate210_MathFunction9_1" type="real_T"/>
    <code file="offset_rate210.c" line="291" type="task">/*&lt;&lt;&lt; S 9 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 9 none &gt;&gt;&gt;*/
    /* Math: '&lt;Root&gt;/MathFunction9' */
    offset_rate210_MathFunction9_1 = rt_powd_snf(10.0, offset_rate210_Gain9_1);

/*&lt;&lt;&lt; E 9 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 9 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="376" type="init">  offset_rate210_MathFunction9_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain10" type="data">
      <var line="offset_rate210_MathFunction9_1" mode="input" name="offset_rate210_MathFunction9_1" port="offset_rate210_Gain10_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain9" type="data">
      <var line="offset_rate210_Gain9_1" mode="output" name="offset_rate210_Gain9_1" port="offset_rate210_Gain9_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="S-Function" id="22" name="offset_rate210_S_Function" peinfo="0">
    <input line="offset_rate210_MathFunction2_1" port="offset_rate210_S_Function_1">
      <connect block="offset_rate210_MathFunction2" port="offset_rate210_MathFunction2_1"/>
    </input>
    <output line="offset_rate210_S_Function_1" port="offset_rate210_S_Function_1" usename="true">
      <connect block="offset_rate210_Gain1" port="offset_rate210_Gain1_1"/>
    </output>
    <var line="offset_rate210_S_Function_1" mode="output" name="offset_rate210_S_Function_1" port="offset_rate210_S_Function_1" type="real_T"/>
    <var line="offset_rate210_MathFunction2_1" mode="input" name="offset_rate210_MathFunction2_1" port="offset_rate210_S_Function_1" type="real_T"/>
    <code file="offset_rate210.c" line="175" type="task">/*&lt;&lt;&lt; S 1 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[1] == 0) {
/*&gt;&gt;&gt; S 1 none &gt;&gt;&gt;*/
    /* S-Function (loop): '&lt;Root&gt;/S_Function' */
    loop_Outputs_wrapper(&amp;offset_rate210_MathFunction2_1,
                         &amp;offset_rate210_S_Function_1 );

/*&lt;&lt;&lt; E 1 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="350" type="init">  offset_rate210_S_Function_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain1" type="data">
      <var line="offset_rate210_S_Function_1" mode="input" name="offset_rate210_S_Function_1" port="offset_rate210_Gain1_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction2" type="data">
      <var line="offset_rate210_MathFunction2_1" mode="output" name="offset_rate210_MathFunction2_1" port="offset_rate210_MathFunction2_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="S-Function" id="23" name="offset_rate210_S_Function1" peinfo="0">
    <input line="offset_rate210_MathFunction4_1" port="offset_rate210_S_Function1_1">
      <connect block="offset_rate210_MathFunction4" port="offset_rate210_MathFunction4_1"/>
    </input>
    <output line="offset_rate210_S_Function1_1" port="offset_rate210_S_Function1_1" usename="true">
      <connect block="offset_rate210_Gain3" port="offset_rate210_Gain3_1"/>
    </output>
    <var line="offset_rate210_S_Function1_1" mode="output" name="offset_rate210_S_Function1_1" port="offset_rate210_S_Function1_1" type="real_T"/>
    <var line="offset_rate210_MathFunction4_1" mode="input" name="offset_rate210_MathFunction4_1" port="offset_rate210_S_Function1_1" type="real_T"/>
    <code file="offset_rate210.c" line="202" type="task">/*&lt;&lt;&lt; S 3 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[2] == 0) {
/*&gt;&gt;&gt; S 3 none &gt;&gt;&gt;*/
    /* S-Function (loop): '&lt;Root&gt;/S_Function1' */
    loop_Outputs_wrapper(&amp;offset_rate210_MathFunction4_1,
                         &amp;offset_rate210_S_Function1_1 );

/*&lt;&lt;&lt; E 3 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 3 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="356" type="init">  offset_rate210_S_Function1_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain3" type="data">
      <var line="offset_rate210_S_Function1_1" mode="input" name="offset_rate210_S_Function1_1" port="offset_rate210_Gain3_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction4" type="data">
      <var line="offset_rate210_MathFunction4_1" mode="output" name="offset_rate210_MathFunction4_1" port="offset_rate210_MathFunction4_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="S-Function" id="24" name="offset_rate210_S_Function2" peinfo="0">
    <input line="offset_rate210_MathFunction6_1" port="offset_rate210_S_Function2_1">
      <connect block="offset_rate210_MathFunction6" port="offset_rate210_MathFunction6_1"/>
    </input>
    <output line="offset_rate210_S_Function2_1" port="offset_rate210_S_Function2_1" usename="true">
      <connect block="offset_rate210_Gain5" port="offset_rate210_Gain5_1"/>
    </output>
    <var line="offset_rate210_S_Function2_1" mode="output" name="offset_rate210_S_Function2_1" port="offset_rate210_S_Function2_1" type="real_T"/>
    <var line="offset_rate210_MathFunction6_1" mode="input" name="offset_rate210_MathFunction6_1" port="offset_rate210_S_Function2_1" type="real_T"/>
    <code file="offset_rate210.c" line="229" type="task">/*&lt;&lt;&lt; S 5 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[3] == 0) {
/*&gt;&gt;&gt; S 5 none &gt;&gt;&gt;*/
    /* S-Function (loop): '&lt;Root&gt;/S_Function2' */
    loop_Outputs_wrapper(&amp;offset_rate210_MathFunction6_1,
                         &amp;offset_rate210_S_Function2_1 );

/*&lt;&lt;&lt; E 5 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 5 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="362" type="init">  offset_rate210_S_Function2_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain5" type="data">
      <var line="offset_rate210_S_Function2_1" mode="input" name="offset_rate210_S_Function2_1" port="offset_rate210_Gain5_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction6" type="data">
      <var line="offset_rate210_MathFunction6_1" mode="output" name="offset_rate210_MathFunction6_1" port="offset_rate210_MathFunction6_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="S-Function" id="25" name="offset_rate210_S_Function3" peinfo="0">
    <input line="offset_rate210_MathFunction8_1" port="offset_rate210_S_Function3_1">
      <connect block="offset_rate210_MathFunction8" port="offset_rate210_MathFunction8_1"/>
    </input>
    <output line="offset_rate210_S_Function3_1" port="offset_rate210_S_Function3_1" usename="true">
      <connect block="offset_rate210_Gain7" port="offset_rate210_Gain7_1"/>
    </output>
    <var line="offset_rate210_S_Function3_1" mode="output" name="offset_rate210_S_Function3_1" port="offset_rate210_S_Function3_1" type="real_T"/>
    <var line="offset_rate210_MathFunction8_1" mode="input" name="offset_rate210_MathFunction8_1" port="offset_rate210_S_Function3_1" type="real_T"/>
    <code file="offset_rate210.c" line="256" type="task">/*&lt;&lt;&lt; S 7 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[4] == 0) {
/*&gt;&gt;&gt; S 7 none &gt;&gt;&gt;*/
    /* S-Function (loop): '&lt;Root&gt;/S_Function3' */
    loop_Outputs_wrapper(&amp;offset_rate210_MathFunction8_1,
                         &amp;offset_rate210_S_Function3_1 );

/*&lt;&lt;&lt; E 7 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 7 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="368" type="init">  offset_rate210_S_Function3_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain7" type="data">
      <var line="offset_rate210_S_Function3_1" mode="input" name="offset_rate210_S_Function3_1" port="offset_rate210_Gain7_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction8" type="data">
      <var line="offset_rate210_MathFunction8_1" mode="output" name="offset_rate210_MathFunction8_1" port="offset_rate210_MathFunction8_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="S-Function" id="26" name="offset_rate210_S_Function4" peinfo="0">
    <input line="offset_rate210_MathFunction10_1" port="offset_rate210_S_Function4_1">
      <connect block="offset_rate210_MathFunction10" port="offset_rate210_MathFunction10_1"/>
    </input>
    <output line="offset_rate210_S_Function4_1" port="offset_rate210_S_Function4_1" usename="true">
      <connect block="offset_rate210_Gain9" port="offset_rate210_Gain9_1"/>
    </output>
    <var line="offset_rate210_S_Function4_1" mode="output" name="offset_rate210_S_Function4_1" port="offset_rate210_S_Function4_1" type="real_T"/>
    <var line="offset_rate210_MathFunction10_1" mode="input" name="offset_rate210_MathFunction10_1" port="offset_rate210_S_Function4_1" type="real_T"/>
    <code file="offset_rate210.c" line="283" type="task">/*&lt;&lt;&lt; S 9 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 9 none &gt;&gt;&gt;*/
    /* S-Function (loop): '&lt;Root&gt;/S_Function4' */
    loop_Outputs_wrapper(&amp;offset_rate210_MathFunction10_1,
                         &amp;offset_rate210_S_Function4_1 );

/*&lt;&lt;&lt; E 9 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 9 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="374" type="init">  offset_rate210_S_Function4_1 = 0.0;
</code>
    <forward block="offset_rate210_Gain9" type="data">
      <var line="offset_rate210_S_Function4_1" mode="input" name="offset_rate210_S_Function4_1" port="offset_rate210_Gain9_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_MathFunction10" type="data">
      <var line="offset_rate210_MathFunction10_1" mode="output" name="offset_rate210_MathFunction10_1" port="offset_rate210_MathFunction10_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Sqrt" id="27" name="offset_rate210_Sqrt1" peinfo="0" rate="[0.01,0]">
    <input line="offset_rate210_UnitDelay2_1" port="offset_rate210_Sqrt1_1">
      <connect block="offset_rate210_UnitDelay2" port="offset_rate210_UnitDelay2_1"/>
    </input>
    <output line="offset_rate210_Sqrt1_1" port="offset_rate210_Sqrt1_1" usename="true">
      <connect block="offset_rate210_MathFunction2" port="offset_rate210_MathFunction2_1"/>
    </output>
    <var line="offset_rate210_Sqrt1_1" mode="output" name="offset_rate210_Sqrt1_1" port="offset_rate210_Sqrt1_1" type="real_T"/>
    <var line="offset_rate210_UnitDelay2_1" mode="input" name="offset_rate210_UnitDelay2_1" port="offset_rate210_Sqrt1_1" type="real_T"/>
    <code file="offset_rate210.c" line="165" type="task">/*&lt;&lt;&lt; S 1 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[1] == 0) {
/*&gt;&gt;&gt; S 1 none &gt;&gt;&gt;*/
    /* Sqrt: '&lt;Root&gt;/Sqrt1' */
    offset_rate210_Sqrt1_1 = sqrt(offset_rate210_UnitDelay2_1);

/*&lt;&lt;&lt; E 1 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="348" type="init">  offset_rate210_Sqrt1_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction2" type="data">
      <var line="offset_rate210_Sqrt1_1" mode="input" name="offset_rate210_Sqrt1_1" port="offset_rate210_MathFunction2_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_UnitDelay2" type="data">
      <var line="offset_rate210_UnitDelay2_1" mode="output" name="offset_rate210_UnitDelay2_1" port="offset_rate210_UnitDelay2_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Sqrt" id="28" name="offset_rate210_Sqrt2" peinfo="0" rate="[0.01,0.002]">
    <input line="offset_rate210_Gain2_1" port="offset_rate210_Sqrt2_1">
      <connect block="offset_rate210_Gain2" port="offset_rate210_Gain2_1"/>
    </input>
    <output line="offset_rate210_Sqrt2_1" port="offset_rate210_Sqrt2_1" usename="true">
      <connect block="offset_rate210_MathFunction4" port="offset_rate210_MathFunction4_1"/>
    </output>
    <var line="offset_rate210_Sqrt2_1" mode="output" name="offset_rate210_Sqrt2_1" port="offset_rate210_Sqrt2_1" type="real_T"/>
    <var line="offset_rate210_Gain2_1" mode="input" name="offset_rate210_Gain2_1" port="offset_rate210_Sqrt2_1" type="real_T"/>
    <code file="offset_rate210.c" line="192" type="task">/*&lt;&lt;&lt; S 3 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[2] == 0) {
/*&gt;&gt;&gt; S 3 none &gt;&gt;&gt;*/
    /* Sqrt: '&lt;Root&gt;/Sqrt2' */
    offset_rate210_Sqrt2_1 = sqrt(offset_rate210_Gain2_1);

/*&lt;&lt;&lt; E 3 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 3 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="354" type="init">  offset_rate210_Sqrt2_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction4" type="data">
      <var line="offset_rate210_Sqrt2_1" mode="input" name="offset_rate210_Sqrt2_1" port="offset_rate210_MathFunction4_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain2" type="data">
      <var line="offset_rate210_Gain2_1" mode="output" name="offset_rate210_Gain2_1" port="offset_rate210_Gain2_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Sqrt" id="29" name="offset_rate210_Sqrt3" peinfo="0" rate="[0.01,0.004]">
    <input line="offset_rate210_Gain4_1" port="offset_rate210_Sqrt3_1">
      <connect block="offset_rate210_Gain4" port="offset_rate210_Gain4_1"/>
    </input>
    <output line="offset_rate210_Sqrt3_1" port="offset_rate210_Sqrt3_1" usename="true">
      <connect block="offset_rate210_MathFunction6" port="offset_rate210_MathFunction6_1"/>
    </output>
    <var line="offset_rate210_Sqrt3_1" mode="output" name="offset_rate210_Sqrt3_1" port="offset_rate210_Sqrt3_1" type="real_T"/>
    <var line="offset_rate210_Gain4_1" mode="input" name="offset_rate210_Gain4_1" port="offset_rate210_Sqrt3_1" type="real_T"/>
    <code file="offset_rate210.c" line="219" type="task">/*&lt;&lt;&lt; S 5 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[3] == 0) {
/*&gt;&gt;&gt; S 5 none &gt;&gt;&gt;*/
    /* Sqrt: '&lt;Root&gt;/Sqrt3' */
    offset_rate210_Sqrt3_1 = sqrt(offset_rate210_Gain4_1);

/*&lt;&lt;&lt; E 5 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 5 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="360" type="init">  offset_rate210_Sqrt3_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction6" type="data">
      <var line="offset_rate210_Sqrt3_1" mode="input" name="offset_rate210_Sqrt3_1" port="offset_rate210_MathFunction6_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain4" type="data">
      <var line="offset_rate210_Gain4_1" mode="output" name="offset_rate210_Gain4_1" port="offset_rate210_Gain4_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Sqrt" id="30" name="offset_rate210_Sqrt4" peinfo="0" rate="[0.01,0.006]">
    <input line="offset_rate210_Gain6_1" port="offset_rate210_Sqrt4_1">
      <connect block="offset_rate210_Gain6" port="offset_rate210_Gain6_1"/>
    </input>
    <output line="offset_rate210_Sqrt4_1" port="offset_rate210_Sqrt4_1" usename="true">
      <connect block="offset_rate210_MathFunction8" port="offset_rate210_MathFunction8_1"/>
    </output>
    <var line="offset_rate210_Sqrt4_1" mode="output" name="offset_rate210_Sqrt4_1" port="offset_rate210_Sqrt4_1" type="real_T"/>
    <var line="offset_rate210_Gain6_1" mode="input" name="offset_rate210_Gain6_1" port="offset_rate210_Sqrt4_1" type="real_T"/>
    <code file="offset_rate210.c" line="246" type="task">/*&lt;&lt;&lt; S 7 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[4] == 0) {
/*&gt;&gt;&gt; S 7 none &gt;&gt;&gt;*/
    /* Sqrt: '&lt;Root&gt;/Sqrt4' */
    offset_rate210_Sqrt4_1 = sqrt(offset_rate210_Gain6_1);

/*&lt;&lt;&lt; E 7 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 7 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="366" type="init">  offset_rate210_Sqrt4_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction8" type="data">
      <var line="offset_rate210_Sqrt4_1" mode="input" name="offset_rate210_Sqrt4_1" port="offset_rate210_MathFunction8_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain6" type="data">
      <var line="offset_rate210_Gain6_1" mode="output" name="offset_rate210_Gain6_1" port="offset_rate210_Gain6_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Sqrt" id="31" name="offset_rate210_Sqrt5" peinfo="0" rate="[0.01,0.008]">
    <input line="offset_rate210_Gain8_1" port="offset_rate210_Sqrt5_1">
      <connect block="offset_rate210_Gain8" port="offset_rate210_Gain8_1"/>
    </input>
    <output line="offset_rate210_Sqrt5_1" port="offset_rate210_Sqrt5_1" usename="true">
      <connect block="offset_rate210_MathFunction10" port="offset_rate210_MathFunction10_1"/>
    </output>
    <var line="offset_rate210_Sqrt5_1" mode="output" name="offset_rate210_Sqrt5_1" port="offset_rate210_Sqrt5_1" type="real_T"/>
    <var line="offset_rate210_Gain8_1" mode="input" name="offset_rate210_Gain8_1" port="offset_rate210_Sqrt5_1" type="real_T"/>
    <code file="offset_rate210.c" line="273" type="task">/*&lt;&lt;&lt; S 9 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 9 none &gt;&gt;&gt;*/
    /* Sqrt: '&lt;Root&gt;/Sqrt5' */
    offset_rate210_Sqrt5_1 = sqrt(offset_rate210_Gain8_1);

/*&lt;&lt;&lt; E 9 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 9 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="372" type="init">  offset_rate210_Sqrt5_1 = 0.0;
</code>
    <forward block="offset_rate210_MathFunction10" type="data">
      <var line="offset_rate210_Sqrt5_1" mode="input" name="offset_rate210_Sqrt5_1" port="offset_rate210_MathFunction10_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain8" type="data">
      <var line="offset_rate210_Gain8_1" mode="output" name="offset_rate210_Gain8_1" port="offset_rate210_Gain8_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="Sum" id="32" name="offset_rate210_Sum" peinfo="1" rate="0.002">
    <input line="offset_rate210_UnitDelay_1" port="offset_rate210_Sum_1">
      <connect block="offset_rate210_UnitDelay" port="offset_rate210_UnitDelay_1"/>
    </input>
    <input line="offset_rate210_Gain_1" port="offset_rate210_Sum_2">
      <connect block="offset_rate210_Gain" port="offset_rate210_Gain_1"/>
    </input>
    <output line="offset_rate210_Sum_1" port="offset_rate210_Sum_1" usename="true">
      <connect block="offset_rate210_UnitDelay1" port="offset_rate210_UnitDelay1_1"/>
    </output>
    <var line="offset_rate210_Sum_1" mode="output" name="offset_rate210_Sum_1" port="offset_rate210_Sum_1" type="real_T"/>
    <var line="offset_rate210_UnitDelay_1" mode="input" name="offset_rate210_UnitDelay_1" port="offset_rate210_Sum_1" type="real_T"/>
    <var line="offset_rate210_Gain_1" mode="input" name="offset_rate210_Gain_1" port="offset_rate210_Sum_2" type="real_T"/>
    <code file="offset_rate210.c" line="302" type="task">  /* Sum: '&lt;Root&gt;/Sum' */
  offset_rate210_Sum_1 = offset_rate210_UnitDelay_1 + offset_rate210_Gain_1;

</code>
    <code file="offset_rate210.c" line="379" type="init">  offset_rate210_Sum_1 = 0.0;

</code>
    <forward block="offset_rate210_UnitDelay1" type="data">
      <var line="offset_rate210_Sum_1" mode="input" name="offset_rate210_Sum_1" port="offset_rate210_UnitDelay1_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain" type="data">
      <var line="offset_rate210_Gain_1" mode="output" name="offset_rate210_Gain_1" port="offset_rate210_Gain_1" type="real_T"/>
    </backward>
    <backward block="offset_rate210_UnitDelay" type="data">
      <var line="offset_rate210_UnitDelay_1" mode="output" name="offset_rate210_UnitDelay_1" port="offset_rate210_UnitDelay_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="UnitDelay" id="33" name="offset_rate210_UnitDelay" peinfo="0" rate="-1">
    <input line="offset_rate210_Gain10_1" port="offset_rate210_UnitDelay_1">
      <connect block="offset_rate210_Gain10" port="offset_rate210_Gain10_1"/>
    </input>
    <output line="offset_rate210_UnitDelay_1" port="offset_rate210_UnitDelay_1" usename="true">
      <connect block="offset_rate210_Sum" port="offset_rate210_Sum_1"/>
    </output>
    <var line="offset_rate210_UnitDelay_1" mode="output" name="offset_rate210_UnitDelay_1" port="offset_rate210_UnitDelay_1" type="real_T"/>
    <var line="offset_rate210_Gain10_1" mode="input" name="offset_rate210_Gain10_1" port="offset_rate210_UnitDelay_1" type="real_T"/>
    <state name="UnitDelay_DSTATE" storage="offset_rate210_DW" type="real_T"/>
    <param name="UnitDelay_InitialCondition" storage="offset_rate210_P" type="real_T" value="1.0">
      <initcode file="offset_rate210_data.c" line="62" type="param">  1.0                                  /* Expression: 1
                                        * Referenced by: '&lt;Root&gt;/UnitDelay'
                                        */,
</initcode>
    </param>
    <code file="offset_rate210.c" line="298" type="task">/*&lt;&lt;&lt; S 9 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 9 none &gt;&gt;&gt;*/
    /* UnitDelay: '&lt;Root&gt;/UnitDelay' */
    offset_rate210_UnitDelay_1 = offset_rate210_DW.UnitDelay_DSTATE;
/*&lt;&lt;&lt; E 9 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 9 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="311" type="update">/*&lt;&lt;&lt; S 11 none &lt;&lt;&lt;*/
  if (offset_rate210_M-&gt;Timing.TaskCounters.TID[5] == 0) {
/*&gt;&gt;&gt; S 11 none &gt;&gt;&gt;*/
    /* Update for UnitDelay: '&lt;Root&gt;/UnitDelay' */
    offset_rate210_DW.UnitDelay_DSTATE = offset_rate210_Gain10_1;
/*&lt;&lt;&lt; E 11 none &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 11 none &gt;&gt;&gt;*/
</code>
    <code file="offset_rate210.c" line="378" type="init">  offset_rate210_UnitDelay_1 = 0.0;
</code>
    <code file="offset_rate210.c" line="393" type="state">  /* InitializeConditions for UnitDelay: '&lt;Root&gt;/UnitDelay' */
  offset_rate210_DW.UnitDelay_DSTATE =
    offset_rate210_P.UnitDelay_InitialCondition;
</code>
    <forward block="offset_rate210_Sum" type="data">
      <var line="offset_rate210_UnitDelay_1" mode="input" name="offset_rate210_UnitDelay_1" port="offset_rate210_Sum_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain10" type="data">
      <var line="offset_rate210_Gain10_1" mode="output" name="offset_rate210_Gain10_1" port="offset_rate210_Gain10_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="UnitDelay" id="34" name="offset_rate210_UnitDelay1" peinfo="1" rate="-1">
    <input line="offset_rate210_Sum_1" port="offset_rate210_UnitDelay1_1">
      <connect block="offset_rate210_Sum" port="offset_rate210_Sum_1"/>
    </input>
    <output line="offset_rate210_UnitDelay1_1" port="offset_rate210_UnitDelay1_1" usename="true">
      <connect block="offset_rate210_Gain" port="offset_rate210_Gain_1"/>
    </output>
    <var line="offset_rate210_UnitDelay1_1" mode="output" name="offset_rate210_UnitDelay1_1" port="offset_rate210_UnitDelay1_1" type="real_T"/>
    <var line="offset_rate210_Sum_1" mode="input" name="offset_rate210_Sum_1" port="offset_rate210_UnitDelay1_1" type="real_T"/>
    <state name="UnitDelay1_DSTATE" storage="offset_rate210_DW" type="real_T"/>
    <param name="UnitDelay1_InitialCondition" storage="offset_rate210_P" type="real_T" value="2.0">
      <initcode file="offset_rate210_data.c" line="23" type="param">  2.0,                                 /* Expression: 2
                                        * Referenced by: '&lt;Root&gt;/UnitDelay1'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="155" type="task">  /* UnitDelay: '&lt;Root&gt;/UnitDelay1' */
  offset_rate210_UnitDelay1_1 = offset_rate210_DW.UnitDelay1_DSTATE;

</code>
    <code file="offset_rate210.c" line="305" type="update">  /* Update for UnitDelay: '&lt;Root&gt;/UnitDelay1' */
  offset_rate210_DW.UnitDelay1_DSTATE = offset_rate210_Sum_1;

</code>
    <code file="offset_rate210.c" line="345" type="init">  offset_rate210_UnitDelay1_1 = 0.0;
</code>
    <code file="offset_rate210.c" line="385" type="state">  /* InitializeConditions for UnitDelay: '&lt;Root&gt;/UnitDelay1' */
  offset_rate210_DW.UnitDelay1_DSTATE =
    offset_rate210_P.UnitDelay1_InitialCondition;

</code>
    <forward block="offset_rate210_Gain" type="data">
      <var line="offset_rate210_UnitDelay1_1" mode="input" name="offset_rate210_UnitDelay1_1" port="offset_rate210_Gain_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Sum" type="data">
      <var line="offset_rate210_Sum_1" mode="output" name="offset_rate210_Sum_1" port="offset_rate210_Sum_1" type="real_T"/>
    </backward>
  </block>
  <block blocktype="UnitDelay" id="35" name="offset_rate210_UnitDelay2" peinfo="0" rate="-1">
    <input line="offset_rate210_Gain_1" port="offset_rate210_UnitDelay2_1">
      <connect block="offset_rate210_Gain" port="offset_rate210_Gain_1"/>
    </input>
    <output line="offset_rate210_UnitDelay2_1" port="offset_rate210_UnitDelay2_1" usename="true">
      <connect block="offset_rate210_Sqrt1" port="offset_rate210_Sqrt1_1"/>
    </output>
    <var line="offset_rate210_UnitDelay2_1" mode="output" name="offset_rate210_UnitDelay2_1" port="offset_rate210_UnitDelay2_1" type="real_T"/>
    <var line="offset_rate210_Gain_1" mode="input" name="offset_rate210_Gain_1" port="offset_rate210_UnitDelay2_1" type="real_T"/>
    <state name="UnitDelay2_DSTATE" storage="offset_rate210_DW" type="real_T"/>
    <param name="UnitDelay2_InitialCondition" storage="offset_rate210_P" type="real_T" value="1.0">
      <initcode file="offset_rate210_data.c" line="29" type="param">  1.0,                                 /* Expression: 1
                                        * Referenced by: '&lt;Root&gt;/UnitDelay2'
                                        */
</initcode>
    </param>
    <code file="offset_rate210.c" line="162" type="task">  /* UnitDelay: '&lt;Root&gt;/UnitDelay2' */
  offset_rate210_UnitDelay2_1 = offset_rate210_DW.UnitDelay2_DSTATE;
</code>
    <code file="offset_rate210.c" line="308" type="update">  /* Update for UnitDelay: '&lt;Root&gt;/UnitDelay2' */
  offset_rate210_DW.UnitDelay2_DSTATE = offset_rate210_Gain_1;
</code>
    <code file="offset_rate210.c" line="347" type="init">  offset_rate210_UnitDelay2_1 = 0.0;
</code>
    <code file="offset_rate210.c" line="389" type="state">  /* InitializeConditions for UnitDelay: '&lt;Root&gt;/UnitDelay2' */
  offset_rate210_DW.UnitDelay2_DSTATE =
    offset_rate210_P.UnitDelay2_InitialCondition;

</code>
    <forward block="offset_rate210_Sqrt1" type="data">
      <var line="offset_rate210_UnitDelay2_1" mode="input" name="offset_rate210_UnitDelay2_1" port="offset_rate210_Sqrt1_1" type="real_T"/>
    </forward>
    <backward block="offset_rate210_Gain" type="data">
      <var line="offset_rate210_Gain_1" mode="output" name="offset_rate210_Gain_1" port="offset_rate210_Gain_1" type="real_T"/>
    </backward>
  </block>
  <code type="common-init">  rt_InitInfAndNaN(sizeof(real_T));
</code>
  <code type="rt-macro">/* Macros for accessing real-time model data structure */
#ifndef rtmGetErrorStatus
# define rtmGetErrorStatus(rtm)        ((rtm)-&gt;errorStatus)
#endif

#ifndef rtmSetErrorStatus
# define rtmSetErrorStatus(rtm, val)   ((rtm)-&gt;errorStatus = (val))
#endif

</code>
  <code type="rt-type">/* Real-time Model Data Structure */
struct tag_RTM_offset_rate210_T {
  const char_T * volatile errorStatus;

  /*
   * Timing:
   * The following substructure contains information regarding
   * the timing information for the model.
   */
  struct {
    struct {
      uint8_T TID[6];
    } TaskCounters;
  } Timing;
};
</code>
  <code type="rt-init">  /* initialize real-time model */
  (void) memset((void *)offset_rate210_M, 0,
                sizeof(RT_MODEL_offset_rate210_T));
  /* initialize sample time offsets */
  offset_rate210_M-&gt;Timing.TaskCounters.TID[2] = 4;/* Sample time: [0.01s, 0.002s] */
  /* initialize sample time offsets */
  offset_rate210_M-&gt;Timing.TaskCounters.TID[3] = 3;/* Sample time: [0.01s, 0.004s] */
  /* initialize sample time offsets */
  offset_rate210_M-&gt;Timing.TaskCounters.TID[4] = 2;/* Sample time: [0.01s, 0.006s] */
  /* initialize sample time offsets */
  offset_rate210_M-&gt;Timing.TaskCounters.TID[5] = 1;/* Sample time: [0.01s, 0.008s] */
</code>
  <object kind="rtm-extern" name="offset_rate210_M" type="extern RT_MODEL_offset_rate210_T * const"/>
  <object kind="rtm-object" name="offset_rate210_M_" type="RT_MODEL_offset_rate210_T"/>
  <object kind="rtm-pointer" name="offset_rate210_M" type="RT_MODEL_offset_rate210_T * const" value="&amp;offset_rate210_M_"/>
  <includes file="&lt;math.h>" from="offset_rate210.h" index="0"/>
  <includes file="&lt;string.h>" from="offset_rate210.h" index="1"/>
  <includes file="&quot;rtwtypes.h&quot;" from="offset_rate210.h" index="2"/>
  <includes file="&quot;offset_rate210_types.h&quot;" from="offset_rate210.h" index="3"/>
  <includes file="&quot;rt_nonfinite.h&quot;" from="offset_rate210.h" index="4"/>
  <includes file="&quot;rtGetInf.h&quot;" from="offset_rate210.h" index="5"/>
  <includes file="&quot;offset_rate210.h&quot;" from="offset_rate210.c" index="6" mark="true"/>
  <includes file="&quot;offset_rate210_private.h&quot;" from="offset_rate210.c" index="7"/>
  <function name="rate_scheduler" type="decl">
    <code line="64" type="func">static void rate_scheduler(void);
</code>
  </function>
  <function name="rate_scheduler" type="defn">
    <code line="66" type="func">/*
 *   This function updates active task flag for each subrate.
 * The function is called at model base rate, hence the
 * generated code self-manages all its subrates.
 */
static void rate_scheduler(void)
{
  /* Compute which subrates run during the next base time step.  Subrates
   * are an integer multiple of the base rate counter.  Therefore, the subtask
   * counter is reset when it reaches its limit (zero means run).
   *
   * Sample time offsets are handled by priming the counter with the
   * appropriate non-zero value in the model's initialization function.
   */
  (offset_rate210_M-&gt;Timing.TaskCounters.TID[1])++;
  if ((offset_rate210_M-&gt;Timing.TaskCounters.TID[1]) &gt; 4) {/* Sample time: [0.01s, 0.0s] */
    offset_rate210_M-&gt;Timing.TaskCounters.TID[1] = 0;
  }

  (offset_rate210_M-&gt;Timing.TaskCounters.TID[2])++;
  if ((offset_rate210_M-&gt;Timing.TaskCounters.TID[2]) &gt; 4) {/* Sample time: [0.01s, 0.002s] */
    offset_rate210_M-&gt;Timing.TaskCounters.TID[2] = 0;
  }

  (offset_rate210_M-&gt;Timing.TaskCounters.TID[3])++;
  if ((offset_rate210_M-&gt;Timing.TaskCounters.TID[3]) &gt; 4) {/* Sample time: [0.01s, 0.004s] */
    offset_rate210_M-&gt;Timing.TaskCounters.TID[3] = 0;
  }

  (offset_rate210_M-&gt;Timing.TaskCounters.TID[4])++;
  if ((offset_rate210_M-&gt;Timing.TaskCounters.TID[4]) &gt; 4) {/* Sample time: [0.01s, 0.006s] */
    offset_rate210_M-&gt;Timing.TaskCounters.TID[4] = 0;
  }

  (offset_rate210_M-&gt;Timing.TaskCounters.TID[5])++;
  if ((offset_rate210_M-&gt;Timing.TaskCounters.TID[5]) &gt; 4) {/* Sample time: [0.01s, 0.008s] */
    offset_rate210_M-&gt;Timing.TaskCounters.TID[5] = 0;
  }
}
</code>
  </function>
  <function name="rt_powd_snf" type="defn">
    <code line="106" type="func">real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else {
    tmp = fabs(u0);
    tmp_0 = fabs(u1);
    if (rtIsInf(u1)) {
      if (tmp == 1.0) {
        y = (rtNaN);
      } else if (tmp &gt; 1.0) {
        if (u1 &gt; 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 &gt; 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (tmp_0 == 0.0) {
      y = 1.0;
    } else if (tmp_0 == 1.0) {
      if (u1 &gt; 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) &amp;&amp; (u0 &gt;= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 &lt; 0.0) &amp;&amp; (u1 &gt; floor(u1))) {
      y = (rtNaN);
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}
</code>
  </function>
</sm:blocks>
