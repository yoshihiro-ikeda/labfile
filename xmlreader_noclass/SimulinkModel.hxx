// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SimulinkModel.xsd.
 */

#ifndef SIMULINK_MODEL_HXX
#define SIMULINK_MODEL_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace SimulinkModel
{
  namespace XSD
  {
    class blocks_T;
    class file_T;
    class shim_params_T;
    class block_T;
    class ioport_T;
    class connection_T;
    class var_T;
    class param_T;
    class code_T;
    class performance_T;
    class link_T;
    class object_T;
    class include_T;
    class function_T;
    class block_name_T;
    class type;
    class element;
    class mode;
    class type1;
    class type2;
    class type3;
    class kind;
    class type4;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace SimulinkModel
{
  /**
   * @brief C++ namespace for the %http://example.com/SimulinkModel
   * schema namespace.
   */
  namespace XSD
  {
    /**
     * @brief Class corresponding to the %blocks_T schema type.
     *
     * @nosubgrouping
     */
    class blocks_T: public ::xml_schema::type
    {
      public:
      /**
       * @name file
       *
       * @brief Accessor and modifier functions for the %file
       * sequence element.
       *
       * Processed Input File List
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::file_T file_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< file_type > file_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef file_sequence::iterator file_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef file_sequence::const_iterator file_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const file_sequence&
      file () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      file_sequence&
      file ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      file (const file_sequence& s);

      //@}

      /**
       * @name shim-params
       *
       * @brief Accessor and modifier functions for the %shim-params
       * sequence element.
       *
       * SHIM parameters
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::shim_params_T shim_params_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< shim_params_type > shim_params_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef shim_params_sequence::iterator shim_params_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef shim_params_sequence::const_iterator shim_params_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< shim_params_type, char > shim_params_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const shim_params_sequence&
      shim_params () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      shim_params_sequence&
      shim_params ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      shim_params (const shim_params_sequence& s);

      //@}

      /**
       * @name block
       *
       * @brief Accessor and modifier functions for the %block
       * sequence element.
       *
       * Simulink Block List
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::block_T block_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< block_type > block_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef block_sequence::iterator block_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef block_sequence::const_iterator block_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< block_type, char > block_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const block_sequence&
      block () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      block_sequence&
      block ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      block (const block_sequence& s);

      //@}

      /**
       * @name code
       *
       * @brief Accessor and modifier functions for the %code
       * sequence element.
       *
       * Program Header/Source Code
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::code_T code_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< code_type > code_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef code_sequence::iterator code_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef code_sequence::const_iterator code_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< code_type, char > code_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const code_sequence&
      code () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      code_sequence&
      code ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      code (const code_sequence& s);

      //@}

      /**
       * @name object
       *
       * @brief Accessor and modifier functions for the %object
       * sequence element.
       *
       * Program Specific Objects
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::object_T object_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< object_type > object_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef object_sequence::iterator object_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef object_sequence::const_iterator object_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< object_type, char > object_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const object_sequence&
      object () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      object_sequence&
      object ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      object (const object_sequence& s);

      //@}

      /**
       * @name deftype
       *
       * @brief Accessor and modifier functions for the %deftype
       * sequence element.
       *
       * Program Specific Types
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::object_T deftype_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< deftype_type > deftype_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef deftype_sequence::iterator deftype_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef deftype_sequence::const_iterator deftype_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< deftype_type, char > deftype_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const deftype_sequence&
      deftype () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      deftype_sequence&
      deftype ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      deftype (const deftype_sequence& s);

      //@}

      /**
       * @name includes
       *
       * @brief Accessor and modifier functions for the %includes
       * sequence element.
       *
       * Header Files
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::include_T includes_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< includes_type > includes_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef includes_sequence::iterator includes_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef includes_sequence::const_iterator includes_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< includes_type, char > includes_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const includes_sequence&
      includes () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      includes_sequence&
      includes ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      includes (const includes_sequence& s);

      //@}

      /**
       * @name function
       *
       * @brief Accessor and modifier functions for the %function
       * sequence element.
       *
       * Sub Functions
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::function_T function_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< function_type > function_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef function_sequence::iterator function_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef function_sequence::const_iterator function_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< function_type, char > function_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const function_sequence&
      function () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      function_sequence&
      function ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      function (const function_sequence& s);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< name_type > name_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const name_optional&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      name_optional&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      name (const name_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      blocks_T ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      blocks_T (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      blocks_T (const blocks_T& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual blocks_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      blocks_T&
      operator= (const blocks_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~blocks_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      file_sequence file_;
      shim_params_sequence shim_params_;
      block_sequence block_;
      code_sequence code_;
      object_sequence object_;
      deftype_sequence deftype_;
      includes_sequence includes_;
      function_sequence function_;
      name_optional name_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %file_T schema type.
     *
     * Input File Information
     *
     * @nosubgrouping
     */
    class file_T: public ::xml_schema::type
    {
      public:
      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::type type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const name_type&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      name_type&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name timestamp
       *
       * @brief Accessor and modifier functions for the %timestamp
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string timestamp_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< timestamp_type, char > timestamp_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const timestamp_type&
      timestamp () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      timestamp_type&
      timestamp ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      timestamp (const timestamp_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      timestamp (::std::auto_ptr< timestamp_type > p);

      //@}

      /**
       * @name size
       *
       * @brief Accessor and modifier functions for the %size
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ size_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const size_type&
      size () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      size_type&
      size ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      size (const size_type& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      file_T (const type_type&,
              const name_type&,
              const timestamp_type&,
              const size_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      file_T (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      file_T (const file_T& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual file_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      file_T&
      operator= (const file_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~file_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< timestamp_type > timestamp_;
      ::xsd::cxx::tree::one< size_type > size_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %shim_params_T schema type.
     *
     * SHIM Parameters
     *
     * @nosubgrouping
     */
    class shim_params_T: public ::xml_schema::type
    {
      public:
      /**
       * @name element
       *
       * @brief Accessor and modifier functions for the %element
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::element element_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< element_type, char > element_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const element_type&
      element () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      element_type&
      element ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      element (const element_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      element (::std::auto_ptr< element_type > p);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const name_type&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      name_type&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      shim_params_T (const element_type&,
                     const name_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      shim_params_T (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      shim_params_T (const shim_params_T& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual shim_params_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      shim_params_T&
      operator= (const shim_params_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~shim_params_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< element_type > element_;
      ::xsd::cxx::tree::one< name_type > name_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %block_T schema type.
     *
     * Block Information
     *
     * @nosubgrouping
     */
    class block_T: public ::xml_schema::type
    {
      public:
      /**
       * @name input
       *
       * @brief Accessor and modifier functions for the %input
       * sequence element.
       *
       * input channel information
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::ioport_T input_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< input_type > input_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef input_sequence::iterator input_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef input_sequence::const_iterator input_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< input_type, char > input_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const input_sequence&
      input () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      input_sequence&
      input ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      input (const input_sequence& s);

      //@}

      /**
       * @name output
       *
       * @brief Accessor and modifier functions for the %output
       * sequence element.
       *
       * output channel information
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::ioport_T output_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< output_type > output_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef output_sequence::iterator output_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef output_sequence::const_iterator output_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const output_sequence&
      output () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      output_sequence&
      output ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      output (const output_sequence& s);

      //@}

      /**
       * @name blocks
       *
       * @brief Accessor and modifier functions for the %blocks
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::blocks_T blocks_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< blocks_type > blocks_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef blocks_sequence::iterator blocks_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef blocks_sequence::const_iterator blocks_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< blocks_type, char > blocks_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const blocks_sequence&
      blocks () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      blocks_sequence&
      blocks ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      blocks (const blocks_sequence& s);

      //@}

      /**
       * @name var
       *
       * @brief Accessor and modifier functions for the %var
       * sequence element.
       *
       * input/output variables
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::var_T var_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< var_type > var_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef var_sequence::iterator var_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef var_sequence::const_iterator var_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< var_type, char > var_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const var_sequence&
      var () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      var_sequence&
      var ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      var (const var_sequence& s);

      //@}

      /**
       * @name signal
       *
       * @brief Accessor and modifier functions for the %signal
       * sequence element.
       *
       * signal
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::param_T signal_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< signal_type > signal_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef signal_sequence::iterator signal_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef signal_sequence::const_iterator signal_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< signal_type, char > signal_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const signal_sequence&
      signal () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      signal_sequence&
      signal ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      signal (const signal_sequence& s);

      //@}

      /**
       * @name state
       *
       * @brief Accessor and modifier functions for the %state
       * sequence element.
       *
       * states
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::param_T state_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< state_type > state_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef state_sequence::iterator state_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef state_sequence::const_iterator state_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< state_type, char > state_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const state_sequence&
      state () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      state_sequence&
      state ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      state (const state_sequence& s);

      //@}

      /**
       * @name trigger_state
       *
       * @brief Accessor and modifier functions for the %trigger_state
       * sequence element.
       *
       * Trigger states
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::param_T trigger_state_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< trigger_state_type > trigger_state_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef trigger_state_sequence::iterator trigger_state_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef trigger_state_sequence::const_iterator trigger_state_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< trigger_state_type, char > trigger_state_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const trigger_state_sequence&
      trigger_state () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      trigger_state_sequence&
      trigger_state ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      trigger_state (const trigger_state_sequence& s);

      //@}

      /**
       * @name invariant_signal
       *
       * @brief Accessor and modifier functions for the %invariant_signal
       * sequence element.
       *
       * Trigger states
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::param_T invariant_signal_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< invariant_signal_type > invariant_signal_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef invariant_signal_sequence::iterator invariant_signal_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef invariant_signal_sequence::const_iterator invariant_signal_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< invariant_signal_type, char > invariant_signal_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const invariant_signal_sequence&
      invariant_signal () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      invariant_signal_sequence&
      invariant_signal ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      invariant_signal (const invariant_signal_sequence& s);

      //@}

      /**
       * @name param
       *
       * @brief Accessor and modifier functions for the %param
       * sequence element.
       *
       * parameters
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::param_T param_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< param_type > param_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef param_sequence::iterator param_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef param_sequence::const_iterator param_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< param_type, char > param_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const param_sequence&
      param () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      param_sequence&
      param ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      param (const param_sequence& s);

      //@}

      /**
       * @name const_param
       *
       * @brief Accessor and modifier functions for the %const_param
       * sequence element.
       *
       * constant parameters
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::param_T const_param_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< const_param_type > const_param_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef const_param_sequence::iterator const_param_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef const_param_sequence::const_iterator const_param_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< const_param_type, char > const_param_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const const_param_sequence&
      const_param () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      const_param_sequence&
      const_param ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      const_param (const const_param_sequence& s);

      //@}

      /**
       * @name code
       *
       * @brief Accessor and modifier functions for the %code
       * sequence element.
       *
       * Simulink C Code
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::code_T code_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< code_type > code_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef code_sequence::iterator code_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef code_sequence::const_iterator code_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< code_type, char > code_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const code_sequence&
      code () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      code_sequence&
      code ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      code (const code_sequence& s);

      //@}

      /**
       * @name performance
       *
       * @brief Accessor and modifier functions for the %performance
       * sequence element.
       *
       * SHIM Performance
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::performance_T performance_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< performance_type > performance_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef performance_sequence::iterator performance_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef performance_sequence::const_iterator performance_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< performance_type, char > performance_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const performance_sequence&
      performance () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      performance_sequence&
      performance ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      performance (const performance_sequence& s);

      //@}

      /**
       * @name forward
       *
       * @brief Accessor and modifier functions for the %forward
       * sequence element.
       *
       * CSP forward link
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::link_T forward_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< forward_type > forward_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef forward_sequence::iterator forward_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef forward_sequence::const_iterator forward_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< forward_type, char > forward_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const forward_sequence&
      forward () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      forward_sequence&
      forward ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      forward (const forward_sequence& s);

      //@}

      /**
       * @name backword
       *
       * @brief Accessor and modifier functions for the %backword
       * sequence element.
       *
       * CSP backword link
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::link_T backword_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< backword_type > backword_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef backword_sequence::iterator backword_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef backword_sequence::const_iterator backword_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< backword_type, char > backword_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const backword_sequence&
      backword () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      backword_sequence&
      backword ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      backword (const backword_sequence& s);

      //@}

      /**
       * @name merged_to
       *
       * @brief Accessor and modifier functions for the %merged_to
       * sequence element.
       *
       * Merged to
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::block_name_T merged_to_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< merged_to_type > merged_to_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef merged_to_sequence::iterator merged_to_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef merged_to_sequence::const_iterator merged_to_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< merged_to_type, char > merged_to_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const merged_to_sequence&
      merged_to () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      merged_to_sequence&
      merged_to ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      merged_to (const merged_to_sequence& s);

      //@}

      /**
       * @name merge_block
       *
       * @brief Accessor and modifier functions for the %merge_block
       * sequence element.
       *
       * Merge blocks
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::block_name_T merge_block_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< merge_block_type > merge_block_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef merge_block_sequence::iterator merge_block_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef merge_block_sequence::const_iterator merge_block_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< merge_block_type, char > merge_block_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const merge_block_sequence&
      merge_block () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      merge_block_sequence&
      merge_block ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      merge_block (const merge_block_sequence& s);

      //@}

      /**
       * @name bind
       *
       * @brief Accessor and modifier functions for the %bind
       * sequence element.
       *
       * Bind blocks
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::block_name_T bind_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< bind_type > bind_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef bind_sequence::iterator bind_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef bind_sequence::const_iterator bind_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< bind_type, char > bind_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const bind_sequence&
      bind () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      bind_sequence&
      bind ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      bind (const bind_sequence& s);

      //@}

      /**
       * @name bound_to
       *
       * @brief Accessor and modifier functions for the %bound_to
       * sequence element.
       *
       * Bound to
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::block_name_T bound_to_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< bound_to_type > bound_to_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef bound_to_sequence::iterator bound_to_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef bound_to_sequence::const_iterator bound_to_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< bound_to_type, char > bound_to_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const bound_to_sequence&
      bound_to () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      bound_to_sequence&
      bound_to ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      bound_to (const bound_to_sequence& s);

      //@}

      /**
       * @name blocktype
       *
       * @brief Accessor and modifier functions for the %blocktype
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string blocktype_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< blocktype_type, char > blocktype_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const blocktype_type&
      blocktype () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      blocktype_type&
      blocktype ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      blocktype (const blocktype_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      blocktype (::std::auto_ptr< blocktype_type > p);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const name_type&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      name_type&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string type_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< type_type > type_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const type_optional&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      type_optional&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      type (const type_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name rate
       *
       * @brief Accessor and modifier functions for the %rate
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string rate_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< rate_type > rate_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< rate_type, char > rate_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const rate_optional&
      rate () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      rate_optional&
      rate ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      rate (const rate_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      rate (const rate_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      rate (::std::auto_ptr< rate_type > p);

      //@}

      /**
       * @name Period
       *
       * @brief Accessor and modifier functions for the %Period
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::float_ Period_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< Period_type > Period_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< Period_type, char > Period_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const Period_optional&
      Period () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      Period_optional&
      Period ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      Period (const Period_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      Period (const Period_optional& x);

      //@}

      /**
       * @name PulseType
       *
       * @brief Accessor and modifier functions for the %PulseType
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string PulseType_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< PulseType_type > PulseType_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< PulseType_type, char > PulseType_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const PulseType_optional&
      PulseType () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      PulseType_optional&
      PulseType ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      PulseType (const PulseType_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      PulseType (const PulseType_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      PulseType (::std::auto_ptr< PulseType_type > p);

      //@}

      /**
       * @name PulseWidth
       *
       * @brief Accessor and modifier functions for the %PulseWidth
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::float_ PulseWidth_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< PulseWidth_type > PulseWidth_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< PulseWidth_type, char > PulseWidth_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const PulseWidth_optional&
      PulseWidth () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      PulseWidth_optional&
      PulseWidth ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      PulseWidth (const PulseWidth_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      PulseWidth (const PulseWidth_optional& x);

      //@}

      /**
       * @name peinfo
       *
       * @brief Accessor and modifier functions for the %peinfo
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string peinfo_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< peinfo_type > peinfo_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< peinfo_type, char > peinfo_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const peinfo_optional&
      peinfo () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      peinfo_optional&
      peinfo ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      peinfo (const peinfo_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      peinfo (const peinfo_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      peinfo (::std::auto_ptr< peinfo_type > p);

      //@}

      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ id_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< id_type > id_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const id_optional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      id_optional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const id_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const id_optional& x);

      //@}

      /**
       * @name priority
       *
       * @brief Accessor and modifier functions for the %priority
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ priority_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< priority_type > priority_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< priority_type, char > priority_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const priority_optional&
      priority () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      priority_optional&
      priority ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      priority (const priority_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      priority (const priority_optional& x);

      //@}

      /**
       * @name sequence
       *
       * @brief Accessor and modifier functions for the %sequence
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ sequence_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< sequence_type > sequence_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< sequence_type, char > sequence_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const sequence_optional&
      sequence () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      sequence_optional&
      sequence ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      sequence (const sequence_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      sequence (const sequence_optional& x);

      //@}

      /**
       * @name stateflow
       *
       * @brief Accessor and modifier functions for the %stateflow
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string stateflow_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< stateflow_type > stateflow_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< stateflow_type, char > stateflow_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const stateflow_optional&
      stateflow () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      stateflow_optional&
      stateflow ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      stateflow (const stateflow_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      stateflow (const stateflow_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      stateflow (::std::auto_ptr< stateflow_type > p);

      //@}

      /**
       * @name DataStoreName
       *
       * @brief Accessor and modifier functions for the %DataStoreName
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string DataStoreName_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< DataStoreName_type > DataStoreName_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< DataStoreName_type, char > DataStoreName_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const DataStoreName_optional&
      DataStoreName () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      DataStoreName_optional&
      DataStoreName ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      DataStoreName (const DataStoreName_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      DataStoreName (const DataStoreName_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      DataStoreName (::std::auto_ptr< DataStoreName_type > p);

      //@}

      /**
       * @name TreatAsAtomicUnit
       *
       * @brief Accessor and modifier functions for the %TreatAsAtomicUnit
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string TreatAsAtomicUnit_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< TreatAsAtomicUnit_type > TreatAsAtomicUnit_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< TreatAsAtomicUnit_type, char > TreatAsAtomicUnit_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const TreatAsAtomicUnit_optional&
      TreatAsAtomicUnit () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      TreatAsAtomicUnit_optional&
      TreatAsAtomicUnit ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      TreatAsAtomicUnit (const TreatAsAtomicUnit_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      TreatAsAtomicUnit (const TreatAsAtomicUnit_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      TreatAsAtomicUnit (::std::auto_ptr< TreatAsAtomicUnit_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      block_T (const blocktype_type&,
               const name_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      block_T (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      block_T (const block_T& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual block_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      block_T&
      operator= (const block_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~block_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      input_sequence input_;
      output_sequence output_;
      blocks_sequence blocks_;
      var_sequence var_;
      signal_sequence signal_;
      state_sequence state_;
      trigger_state_sequence trigger_state_;
      invariant_signal_sequence invariant_signal_;
      param_sequence param_;
      const_param_sequence const_param_;
      code_sequence code_;
      performance_sequence performance_;
      forward_sequence forward_;
      backword_sequence backword_;
      merged_to_sequence merged_to_;
      merge_block_sequence merge_block_;
      bind_sequence bind_;
      bound_to_sequence bound_to_;
      ::xsd::cxx::tree::one< blocktype_type > blocktype_;
      ::xsd::cxx::tree::one< name_type > name_;
      type_optional type_;
      rate_optional rate_;
      Period_optional Period_;
      PulseType_optional PulseType_;
      PulseWidth_optional PulseWidth_;
      peinfo_optional peinfo_;
      id_optional id_;
      priority_optional priority_;
      sequence_optional sequence_;
      stateflow_optional stateflow_;
      DataStoreName_optional DataStoreName_;
      TreatAsAtomicUnit_optional TreatAsAtomicUnit_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ioport_T schema type.
     *
     * @nosubgrouping
     */
    class ioport_T: public ::xml_schema::type
    {
      public:
      /**
       * @name connect
       *
       * @brief Accessor and modifier functions for the %connect
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::connection_T connect_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< connect_type > connect_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef connect_sequence::iterator connect_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef connect_sequence::const_iterator connect_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< connect_type, char > connect_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const connect_sequence&
      connect () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      connect_sequence&
      connect ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      connect (const connect_sequence& s);

      //@}

      /**
       * @name line
       *
       * @brief Accessor and modifier functions for the %line
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string line_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const line_type&
      line () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      line_type&
      line ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      line (const line_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      line (::std::auto_ptr< line_type > p);

      //@}

      /**
       * @name port
       *
       * @brief Accessor and modifier functions for the %port
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string port_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const port_type&
      port () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      port_type&
      port ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      port (const port_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      port (::std::auto_ptr< port_type > p);

      //@}

      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string type_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< type_type > type_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const type_optional&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      type_optional&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      type (const type_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name usename
       *
       * @brief Accessor and modifier functions for the %usename
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::boolean usename_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< usename_type > usename_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< usename_type, char > usename_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const usename_optional&
      usename () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      usename_optional&
      usename ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      usename (const usename_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      usename (const usename_optional& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ioport_T (const line_type&,
                const port_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ioport_T (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ioport_T (const ioport_T& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ioport_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ioport_T&
      operator= (const ioport_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ioport_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      connect_sequence connect_;
      ::xsd::cxx::tree::one< line_type > line_;
      ::xsd::cxx::tree::one< port_type > port_;
      type_optional type_;
      usename_optional usename_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %connection_T schema type.
     *
     * @nosubgrouping
     */
    class connection_T: public ::xml_schema::type
    {
      public:
      /**
       * @name block
       *
       * @brief Accessor and modifier functions for the %block
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string block_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< block_type, char > block_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const block_type&
      block () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      block_type&
      block ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      block (const block_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      block (::std::auto_ptr< block_type > p);

      //@}

      /**
       * @name port
       *
       * @brief Accessor and modifier functions for the %port
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string port_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const port_type&
      port () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      port_type&
      port ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      port (const port_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      port (::std::auto_ptr< port_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      connection_T (const block_type&,
                    const port_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      connection_T (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      connection_T (const connection_T& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual connection_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      connection_T&
      operator= (const connection_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~connection_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< block_type > block_;
      ::xsd::cxx::tree::one< port_type > port_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %var_T schema type.
     *
     * @nosubgrouping
     */
    class var_T: public ::xml_schema::type
    {
      public:
      /**
       * @name storage
       *
       * @brief Accessor and modifier functions for the %storage
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string storage_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< storage_type > storage_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< storage_type, char > storage_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const storage_optional&
      storage () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      storage_optional&
      storage ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      storage (const storage_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      storage (const storage_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      storage (::std::auto_ptr< storage_type > p);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const name_type&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      name_type&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name mode
       *
       * @brief Accessor and modifier functions for the %mode
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::mode mode_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< mode_type, char > mode_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const mode_type&
      mode () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      mode_type&
      mode ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      mode (const mode_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      mode (::std::auto_ptr< mode_type > p);

      //@}

      /**
       * @name line
       *
       * @brief Accessor and modifier functions for the %line
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string line_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< line_type > line_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const line_optional&
      line () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      line_optional&
      line ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      line (const line_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      line (const line_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      line (::std::auto_ptr< line_type > p);

      //@}

      /**
       * @name port
       *
       * @brief Accessor and modifier functions for the %port
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string port_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< port_type > port_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const port_optional&
      port () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      port_optional&
      port ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      port (const port_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      port (const port_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      port (::std::auto_ptr< port_type > p);

      //@}

      /**
       * @name size
       *
       * @brief Accessor and modifier functions for the %size
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ size_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< size_type > size_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const size_optional&
      size () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      size_optional&
      size ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      size (const size_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      size (const size_optional& x);

      //@}

      /**
       * @name start
       *
       * @brief Accessor and modifier functions for the %start
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ start_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< start_type > start_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< start_type, char > start_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const start_optional&
      start () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      start_optional&
      start ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      start (const start_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      start (const start_optional& x);

      //@}

      /**
       * @name end
       *
       * @brief Accessor and modifier functions for the %end
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ end_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< end_type > end_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< end_type, char > end_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const end_optional&
      end () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      end_optional&
      end ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      end (const end_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      end (const end_optional& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      var_T (const name_type&,
             const type_type&,
             const mode_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      var_T (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      var_T (const var_T& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual var_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      var_T&
      operator= (const var_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~var_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      storage_optional storage_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< mode_type > mode_;
      line_optional line_;
      port_optional port_;
      size_optional size_;
      start_optional start_;
      end_optional end_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %param_T schema type.
     *
     * @nosubgrouping
     */
    class param_T: public ::xml_schema::type
    {
      public:
      /**
       * @name storage
       *
       * @brief Accessor and modifier functions for the %storage
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string storage_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< storage_type, char > storage_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const storage_type&
      storage () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      storage_type&
      storage ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      storage (const storage_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      storage (::std::auto_ptr< storage_type > p);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const name_type&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      name_type&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name size
       *
       * @brief Accessor and modifier functions for the %size
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ size_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< size_type > size_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const size_optional&
      size () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      size_optional&
      size ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      size (const size_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      size (const size_optional& x);

      //@}

      /**
       * @name value
       *
       * @brief Accessor and modifier functions for the %value
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string value_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< value_type > value_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const value_optional&
      value () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      value_optional&
      value ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      value (const value_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      value (const value_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      value (::std::auto_ptr< value_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      param_T (const storage_type&,
               const name_type&,
               const type_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      param_T (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      param_T (const param_T& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual param_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      param_T&
      operator= (const param_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~param_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< storage_type > storage_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      size_optional size_;
      value_optional value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %code_T schema type.
     *
     * @nosubgrouping
     */
    class code_T: public ::xml_schema::string
    {
      public:
      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::type1 type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name file
       *
       * @brief Accessor and modifier functions for the %file
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string file_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< file_type > file_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const file_optional&
      file () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      file_optional&
      file ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      file (const file_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      file (const file_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      file (::std::auto_ptr< file_type > p);

      //@}

      /**
       * @name line
       *
       * @brief Accessor and modifier functions for the %line
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ line_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< line_type > line_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const line_optional&
      line () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      line_optional&
      line ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      line (const line_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      line (const line_optional& x);

      //@}

      /**
       * @name index
       *
       * @brief Accessor and modifier functions for the %index
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ index_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< index_type > index_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const index_optional&
      index () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      index_optional&
      index ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      index (const index_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      index (const index_optional& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from initializers for required 
       * elements and attributes.
       */
      code_T (const type_type&);

      /**
       * @brief Create an instance from a C string and initializers
       * for required elements and attributes.
       */
      code_T (const char*,
              const type_type&);

      /**
       * @brief Create an instance from a string andinitializers
       * for required elements and attributes.
       */
      code_T (const ::std::string&,
              const type_type&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      code_T (const ::xml_schema::string&,
              const type_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      code_T (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      code_T (const code_T& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual code_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      code_T&
      operator= (const code_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~code_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
      file_optional file_;
      line_optional line_;
      index_optional index_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %performance_T schema type.
     *
     * @nosubgrouping
     */
    class performance_T: public ::xml_schema::type
    {
      public:
      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::type2 type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name best
       *
       * @brief Accessor and modifier functions for the %best
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::float_ best_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< best_type, char > best_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const best_type&
      best () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      best_type&
      best ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      best (const best_type& x);

      //@}

      /**
       * @name typical
       *
       * @brief Accessor and modifier functions for the %typical
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::float_ typical_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< typical_type, char > typical_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const typical_type&
      typical () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      typical_type&
      typical ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      typical (const typical_type& x);

      //@}

      /**
       * @name worst
       *
       * @brief Accessor and modifier functions for the %worst
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::float_ worst_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< worst_type, char > worst_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const worst_type&
      worst () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      worst_type&
      worst ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      worst (const worst_type& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      performance_T (const type_type&,
                     const best_type&,
                     const typical_type&,
                     const worst_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      performance_T (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      performance_T (const performance_T& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual performance_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      performance_T&
      operator= (const performance_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~performance_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< best_type > best_;
      ::xsd::cxx::tree::one< typical_type > typical_;
      ::xsd::cxx::tree::one< worst_type > worst_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %link_T schema type.
     *
     * @nosubgrouping
     */
    class link_T: public ::xml_schema::type
    {
      public:
      /**
       * @name var
       *
       * @brief Accessor and modifier functions for the %var
       * sequence element.
       *
       * data flow (variable)
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::var_T var_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< var_type > var_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef var_sequence::iterator var_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef var_sequence::const_iterator var_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< var_type, char > var_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const var_sequence&
      var () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      var_sequence&
      var ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      var (const var_sequence& s);

      //@}

      /**
       * @name block
       *
       * @brief Accessor and modifier functions for the %block
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string block_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< block_type, char > block_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const block_type&
      block () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      block_type&
      block ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      block (const block_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      block (::std::auto_ptr< block_type > p);

      //@}

      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::type3 type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name label
       *
       * @brief Accessor and modifier functions for the %label
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string label_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< label_type > label_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const label_optional&
      label () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      label_optional&
      label ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      label (const label_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      label (const label_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      label (::std::auto_ptr< label_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      link_T (const block_type&,
              const type_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      link_T (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      link_T (const link_T& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual link_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      link_T&
      operator= (const link_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~link_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      var_sequence var_;
      ::xsd::cxx::tree::one< block_type > block_;
      ::xsd::cxx::tree::one< type_type > type_;
      label_optional label_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %object_T schema type.
     *
     * @nosubgrouping
     */
    class object_T: public ::xml_schema::string
    {
      public:
      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name has_struct
       *
       * @brief Accessor and modifier functions for the %has_struct
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::boolean has_struct_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< has_struct_type > has_struct_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< has_struct_type, char > has_struct_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const has_struct_optional&
      has_struct () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      has_struct_optional&
      has_struct ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      has_struct (const has_struct_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      has_struct (const has_struct_optional& x);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const name_type&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      name_type&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name size
       *
       * @brief Accessor and modifier functions for the %size
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ size_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< size_type > size_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const size_optional&
      size () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      size_optional&
      size ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      size (const size_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      size (const size_optional& x);

      //@}

      /**
       * @name value
       *
       * @brief Accessor and modifier functions for the %value
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string value_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< value_type > value_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const value_optional&
      value () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      value_optional&
      value ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      value (const value_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      value (const value_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      value (::std::auto_ptr< value_type > p);

      //@}

      /**
       * @name kind
       *
       * @brief Accessor and modifier functions for the %kind
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::kind kind_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< kind_type > kind_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< kind_type, char > kind_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const kind_optional&
      kind () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      kind_optional&
      kind ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      kind (const kind_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      kind (const kind_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      kind (::std::auto_ptr< kind_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from initializers for required 
       * elements and attributes.
       */
      object_T (const type_type&,
                const name_type&);

      /**
       * @brief Create an instance from a C string and initializers
       * for required elements and attributes.
       */
      object_T (const char*,
                const type_type&,
                const name_type&);

      /**
       * @brief Create an instance from a string andinitializers
       * for required elements and attributes.
       */
      object_T (const ::std::string&,
                const type_type&,
                const name_type&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      object_T (const ::xml_schema::string&,
                const type_type&,
                const name_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      object_T (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      object_T (const object_T& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual object_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      object_T&
      operator= (const object_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~object_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
      has_struct_optional has_struct_;
      ::xsd::cxx::tree::one< name_type > name_;
      size_optional size_;
      value_optional value_;
      kind_optional kind_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %include_T schema type.
     *
     * @nosubgrouping
     */
    class include_T: public ::xml_schema::type
    {
      public:
      /**
       * @name index
       *
       * @brief Accessor and modifier functions for the %index
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::int_ index_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const index_type&
      index () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      index_type&
      index ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      index (const index_type& x);

      //@}

      /**
       * @name from
       *
       * @brief Accessor and modifier functions for the %from
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string from_type;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< from_type > from_optional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const from_optional&
      from () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      from_optional&
      from ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      from (const from_type& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      from (const from_optional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      from (::std::auto_ptr< from_type > p);

      //@}

      /**
       * @name file
       *
       * @brief Accessor and modifier functions for the %file
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string file_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const file_type&
      file () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      file_type&
      file ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      file (const file_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      file (::std::auto_ptr< file_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      include_T (const index_type&,
                 const file_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      include_T (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      include_T (const include_T& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual include_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      include_T&
      operator= (const include_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~include_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< index_type > index_;
      from_optional from_;
      ::xsd::cxx::tree::one< file_type > file_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %function_T schema type.
     *
     * @nosubgrouping
     */
    class function_T: public ::xml_schema::type
    {
      public:
      /**
       * @name code
       *
       * @brief Accessor and modifier functions for the %code
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::code_T code_type;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< code_type > code_optional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< code_type, char > code_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const code_optional&
      code () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      code_optional&
      code ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      code (const code_type& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      code (const code_optional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      code (::std::auto_ptr< code_type > p);

      //@}

      /**
       * @name function
       *
       * @brief Accessor and modifier functions for the %function
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::SimulinkModel::XSD::function_T function_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< function_type > function_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef function_sequence::iterator function_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef function_sequence::const_iterator function_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< function_type, char > function_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const function_sequence&
      function () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      function_sequence&
      function ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      function (const function_sequence& s);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const name_type&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      name_type&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< name_type > p);

      //@}

      /**
       * @name type
       *
       * @brief Accessor and modifier functions for the %type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::SimulinkModel::XSD::type4 type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const type_type&
      type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      type_type&
      type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      type (const type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      type (::std::auto_ptr< type_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      function_T (const name_type&,
                  const type_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      function_T (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      function_T (const function_T& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual function_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      function_T&
      operator= (const function_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~function_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      code_optional code_;
      function_sequence function_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %block_name_T schema type.
     *
     * @nosubgrouping
     */
    class block_name_T: public ::xml_schema::type
    {
      public:
      /**
       * @name block
       *
       * @brief Accessor and modifier functions for the %block
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string block_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< block_type, char > block_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const block_type&
      block () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      block_type&
      block ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      block (const block_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      block (::std::auto_ptr< block_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      block_name_T (const block_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      block_name_T (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      block_name_T (const block_name_T& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual block_name_T*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      block_name_T&
      operator= (const block_name_T& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~block_name_T ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< block_type > block_;

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %type
     * schema type.
     */
    class type: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        shim,
        shim_schema,
        c_source,
        c_header,
        c_data,
        xml
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      type (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      type (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      type (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      type (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      type (const type& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual type*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      type&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_type_convert ();
      }

      //@cond

      protected:
      value
      _xsd_type_convert () const;

      public:
      static const char* const _xsd_type_literals_[6];
      static const value _xsd_type_indexes_[6];

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %element
     * schema type.
     */
    class element: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        componentset,
        mastercomponent,
        commoninstructionset
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      element (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      element (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      element (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      element (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      element (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      element (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      element (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      element (const element& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual element*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      element&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_element_convert ();
      }

      //@cond

      protected:
      value
      _xsd_element_convert () const;

      public:
      static const char* const _xsd_element_literals_[3];
      static const value _xsd_element_indexes_[3];

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %mode
     * schema type.
     */
    class mode: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        extin,
        extout,
        input,
        output,
        state,
        trigger_state,
        invariant_signal
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      mode (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      mode (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      mode (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      mode (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      mode (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      mode (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      mode (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      mode (const mode& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual mode*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      mode&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_mode_convert ();
      }

      //@cond

      protected:
      value
      _xsd_mode_convert () const;

      public:
      static const char* const _xsd_mode_literals_[7];
      static const value _xsd_mode_indexes_[7];

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %type1
     * schema type.
     */
    class type1: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        task,
        update,
        init,
        state,
        invariant_signal,
        param,
        const_,
        func,
        autovars,
        rt_macro,
        rt_type,
        rt_code,
        rt_init,
        common,
        common_init
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      type1 (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      type1 (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      type1 (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      type1 (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type1 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type1 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type1 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      type1 (const type1& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual type1*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      type1&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_type1_convert ();
      }

      //@cond

      protected:
      value
      _xsd_type1_convert () const;

      public:
      static const char* const _xsd_type1_literals_[15];
      static const value _xsd_type1_indexes_[15];

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %type2
     * schema type.
     */
    class type2: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        task,
        update,
        init
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      type2 (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      type2 (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      type2 (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      type2 (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type2 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type2 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type2 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      type2 (const type2& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual type2*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      type2&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_type2_convert ();
      }

      //@cond

      protected:
      value
      _xsd_type2_convert () const;

      public:
      static const char* const _xsd_type2_literals_[3];
      static const value _xsd_type2_indexes_[3];

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %type3
     * schema type.
     */
    class type3: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        data,
        event,
        port
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      type3 (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      type3 (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      type3 (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      type3 (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type3 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type3 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type3 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      type3 (const type3& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual type3*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      type3&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_type3_convert ();
      }

      //@cond

      protected:
      value
      _xsd_type3_convert () const;

      public:
      static const char* const _xsd_type3_literals_[3];
      static const value _xsd_type3_indexes_[3];

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %kind
     * schema type.
     */
    class kind: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        rtm_extern,
        rtm_pointer,
        rtm_object,
        bsignal,
        bstate,
        param
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      kind (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      kind (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      kind (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      kind (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      kind (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      kind (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      kind (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      kind (const kind& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual kind*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      kind&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_kind_convert ();
      }

      //@cond

      protected:
      value
      _xsd_kind_convert () const;

      public:
      static const char* const _xsd_kind_literals_[6];
      static const value _xsd_kind_indexes_[6];

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %type4
     * schema type.
     */
    class type4: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        decl,
        defn
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      type4 (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      type4 (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      type4 (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      type4 (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type4 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type4 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      type4 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      type4 (const type4& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual type4*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      type4&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_type4_convert ();
      }

      //@cond

      protected:
      value
      _xsd_type4_convert () const;

      public:
      static const char* const _xsd_type4_literals_[2];
      static const value _xsd_type4_indexes_[2];

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace SimulinkModel
{
  namespace XSD
  {
    /**
     * @name Parsing functions for the %blocks document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ input source.
     *
     * @param is A Xerces-C++ input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ input source with an error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    ::std::auto_ptr< ::SimulinkModel::XSD::blocks_T >
    blocks (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace SimulinkModel
{
  namespace XSD
  {
    /**
     * @name Serialization functions for the %blocks document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    blocks (::std::ostream& os,
            const ::SimulinkModel::XSD::blocks_T& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    blocks (::std::ostream& os,
            const ::SimulinkModel::XSD::blocks_T& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    blocks (::std::ostream& os,
            const ::SimulinkModel::XSD::blocks_T& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    blocks (::xercesc::XMLFormatTarget& ft,
            const ::SimulinkModel::XSD::blocks_T& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    blocks (::xercesc::XMLFormatTarget& ft,
            const ::SimulinkModel::XSD::blocks_T& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    blocks (::xercesc::XMLFormatTarget& ft,
            const ::SimulinkModel::XSD::blocks_T& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    void
    blocks (::xercesc::DOMDocument& d,
            const ::SimulinkModel::XSD::blocks_T& x,
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    blocks (const ::SimulinkModel::XSD::blocks_T& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    //@}

    void
    operator<< (::xercesc::DOMElement&, const blocks_T&);

    void
    operator<< (::xercesc::DOMElement&, const file_T&);

    void
    operator<< (::xercesc::DOMElement&, const shim_params_T&);

    void
    operator<< (::xercesc::DOMElement&, const block_T&);

    void
    operator<< (::xercesc::DOMElement&, const ioport_T&);

    void
    operator<< (::xercesc::DOMElement&, const connection_T&);

    void
    operator<< (::xercesc::DOMElement&, const var_T&);

    void
    operator<< (::xercesc::DOMElement&, const param_T&);

    void
    operator<< (::xercesc::DOMElement&, const code_T&);

    void
    operator<< (::xercesc::DOMElement&, const performance_T&);

    void
    operator<< (::xercesc::DOMElement&, const link_T&);

    void
    operator<< (::xercesc::DOMElement&, const object_T&);

    void
    operator<< (::xercesc::DOMElement&, const include_T&);

    void
    operator<< (::xercesc::DOMElement&, const function_T&);

    void
    operator<< (::xercesc::DOMElement&, const block_name_T&);

    void
    operator<< (::xercesc::DOMElement&, const type&);

    void
    operator<< (::xercesc::DOMAttr&, const type&);

    void
    operator<< (::xml_schema::list_stream&,
                const type&);

    void
    operator<< (::xercesc::DOMElement&, const element&);

    void
    operator<< (::xercesc::DOMAttr&, const element&);

    void
    operator<< (::xml_schema::list_stream&,
                const element&);

    void
    operator<< (::xercesc::DOMElement&, const mode&);

    void
    operator<< (::xercesc::DOMAttr&, const mode&);

    void
    operator<< (::xml_schema::list_stream&,
                const mode&);

    void
    operator<< (::xercesc::DOMElement&, const type1&);

    void
    operator<< (::xercesc::DOMAttr&, const type1&);

    void
    operator<< (::xml_schema::list_stream&,
                const type1&);

    void
    operator<< (::xercesc::DOMElement&, const type2&);

    void
    operator<< (::xercesc::DOMAttr&, const type2&);

    void
    operator<< (::xml_schema::list_stream&,
                const type2&);

    void
    operator<< (::xercesc::DOMElement&, const type3&);

    void
    operator<< (::xercesc::DOMAttr&, const type3&);

    void
    operator<< (::xml_schema::list_stream&,
                const type3&);

    void
    operator<< (::xercesc::DOMElement&, const kind&);

    void
    operator<< (::xercesc::DOMAttr&, const kind&);

    void
    operator<< (::xml_schema::list_stream&,
                const kind&);

    void
    operator<< (::xercesc::DOMElement&, const type4&);

    void
    operator<< (::xercesc::DOMAttr&, const type4&);

    void
    operator<< (::xml_schema::list_stream&,
                const type4&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIMULINK_MODEL_HXX
