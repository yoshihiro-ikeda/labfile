<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<sm:blocks xmlns:sm="http://example.com/SimulinkModel" name="vipcellcounting_win" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://example.com/SimulinkModel SimulinkModel.xsd">
  <file name="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" size="16097" timestamp="2014-04-23T12:54:24+0900" type="c-header"/>
  <file name="models2/cell/vipcellcounting_win.xml" size="53859" timestamp="2014-06-20T16:46:42+0900" type="xml"/>
  <file name="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" size="96143" timestamp="2014-04-23T12:54:24+0900" type="c-source"/>
  <file name="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" size="39320" timestamp="2014-04-23T12:54:24+0900" type="c-data"/>
  <block blocktype="SubSystem" id="1" name="vipcellcounting_win_DisplayResults">
    <input line="vipcellcounting_win_Video_1" port="vipcellcounting_win_DisplayResults_VideoIn">
      <connect block="vipcellcounting_win_Video" port="vipcellcounting_win_Video_1"/>
    </input>
    <input line="vipcellcounting_win_Subsystem_1" port="vipcellcounting_win_DisplayResults_Centroids">
      <connect block="vipcellcounting_win_Subsystem" port="vipcellcounting_win_Subsystem_Out1"/>
    </input>
    <input line="vipcellcounting_win_Video_2" port="vipcellcounting_win_DisplayResults_Resetcount">
      <connect block="vipcellcounting_win_Video" port="vipcellcounting_win_Video_2"/>
    </input>
    <sm:blocks>
      <block blocktype="Inport" id="2" name="vipcellcounting_win_DisplayResults_VideoIn">
        <output line="vipcellcounting_win_DisplayResults_VideoIn_1" port="vipcellcounting_win_DisplayResults_VideoIn_1">
          <connect block="vipcellcounting_win_DisplayResults_InsertText1" port="vipcellcounting_win_DisplayResults_InsertText1_1"/>
        </output>
      </block>
      <block blocktype="Inport" id="3" name="vipcellcounting_win_DisplayResults_Centroids">
        <output line="vipcellcounting_win_DisplayResults_Centroids_1" port="vipcellcounting_win_DisplayResults_Centroids_1">
          <connect block="vipcellcounting_win_DisplayResults_DrawMarkers" port="vipcellcounting_win_DisplayResults_DrawMarkers_2"/>
          <connect block="vipcellcounting_win_DisplayResults_Probe" port="vipcellcounting_win_DisplayResults_Probe_1"/>
        </output>
      </block>
      <block blocktype="Inport" id="4" name="vipcellcounting_win_DisplayResults_Resetcount">
        <output line="vipcellcounting_win_DisplayResults_Resetcount_1" port="vipcellcounting_win_DisplayResults_Resetcount_1">
          <connect block="vipcellcounting_win_DisplayResults_LogicalOperator" port="vipcellcounting_win_DisplayResults_LogicalOperator_1"/>
        </output>
      </block>
      <block blocktype="Scope" id="5" name="vipcellcounting_win_DisplayResults_Celldivisionrate">
        <input line="vipcellcounting_win_DisplayResults_DataTypeConversion_1" port="vipcellcounting_win_DisplayResults_Celldivisionrate_1">
          <connect block="vipcellcounting_win_DisplayResults_DataTypeConversion" port="vipcellcounting_win_DisplayResults_DataTypeConversion_1"/>
        </input>
      </block>
      <block blocktype="SubSystem" id="6" name="vipcellcounting_win_DisplayResults_ConverttoRGB">
        <input line="vipcellcounting_win_DisplayResults_InsertText2_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_I">
          <connect block="vipcellcounting_win_DisplayResults_InsertText2" port="vipcellcounting_win_DisplayResults_InsertText2_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_ConverttoRGB_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_Image">
          <connect block="vipcellcounting_win_DisplayResults_DrawMarkers" port="vipcellcounting_win_DisplayResults_DrawMarkers_1"/>
        </output>
        <sm:blocks>
          <block blocktype="Inport" id="7" name="vipcellcounting_win_DisplayResults_ConverttoRGB_I">
            <output line="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1">
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1"/>
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_2"/>
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_3"/>
            </output>
          </block>
          <block blocktype="Concatenate" id="8" name="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate">
            <input line="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1">
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_I" port="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1"/>
            </input>
            <input line="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_2">
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_I" port="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1"/>
            </input>
            <input line="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_3">
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_I" port="vipcellcounting_win_DisplayResults_ConverttoRGB_I_1"/>
            </input>
            <output line="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1">
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_Image" port="vipcellcounting_win_DisplayResults_ConverttoRGB_Image_1"/>
            </output>
            <var line="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" mode="output" name="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" size="684288" type="real32_T"/>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" index="1" line="1804" type="task">  /* SignalConversion: '&lt;S4&gt;/ConcatBufferAtMatrix ConcatenateIn1' */
  memcpy(&amp;vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1[0],
         &amp;vipcellcounting_win_B.vipcellcounting_win_DisplayRe_n[0], 228096U *
         sizeof(real32_T));

</code>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" index="2" line="1809" type="task">  /* SignalConversion: '&lt;S4&gt;/ConcatBufferAtMatrix ConcatenateIn2' */
  memcpy(&amp;vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1
         [228096], &amp;vipcellcounting_win_B.vipcellcounting_win_DisplayRe_n[0],
         228096U * sizeof(real32_T));

</code>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" index="3" line="1814" type="task">  /* SignalConversion: '&lt;S4&gt;/ConcatBufferAtMatrix ConcatenateIn3' */
  memcpy(&amp;vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1
         [456192], &amp;vipcellcounting_win_B.vipcellcounting_win_DisplayRe_n[0],
         228096U * sizeof(real32_T));

</code>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2527" type="init">  {
    int_T i;
    for (i = 0; i &lt; 684288; i++) {
      vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1[i] =
        0.0F;
    }
  }
</code>
            <forward block="vipcellcounting_win_DisplayResults_DrawMarkers" type="data">
              <var line="vipcellcounting_win_DisplayResults_ConverttoRGB_1" mode="input" name="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" port="vipcellcounting_win_DisplayResults_DrawMarkers_1" size="684288" type="real32_T"/>
            </forward>
            <backward block="vipcellcounting_win_DisplayResults_InsertText2" type="data"/>
          </block>
          <block blocktype="Outport" id="9" name="vipcellcounting_win_DisplayResults_ConverttoRGB_Image">
            <input line="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_Image_1">
              <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1"/>
            </input>
          </block>
        </sm:blocks>
      </block>
      <block blocktype="SubSystem" id="10" name="vipcellcounting_win_DisplayResults_Counter1" type="enabled">
        <input line="vipcellcounting_win_DisplayResults_LogicalOperator_1" port="vipcellcounting_win_DisplayResults_Counter1_Reset">
          <connect block="vipcellcounting_win_DisplayResults_LogicalOperator" port="vipcellcounting_win_DisplayResults_LogicalOperator_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_Counter1_1" port="vipcellcounting_win_DisplayResults_Counter1_Out1">
          <connect block="vipcellcounting_win_DisplayResults_Mux" port="vipcellcounting_win_DisplayResults_Mux_1"/>
        </output>
        <sm:blocks>
          <block blocktype="EnablePort" id="11" name="vipcellcounting_win_DisplayResults_Counter1_Reset"/>
          <block blocktype="Bias" id="12" name="vipcellcounting_win_DisplayResults_Counter1_Bias">
            <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_1" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1">
              <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_y"/>
            </input>
            <output line="vipcellcounting_win_DisplayResults_Counter1_Bias_1" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1">
              <connect block="vipcellcounting_win_DisplayResults_Counter1_Out1" port="vipcellcounting_win_DisplayResults_Counter1_Out1_1"/>
            </output>
            <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1" type="uint16_T"/>
            <var line="vipcellcounting_win_DisplayResults_Counter1_Bias_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_Bias_1" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1" type="uint16_T"/>
            <param name="Bias_Bias" storage="vipcellcounting_win_P" type="uint16_T"/>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1562" type="task">/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    /* Bias: '&lt;S5&gt;/Bias' */
    vipcellcounting_win_DisplayResults_Counter1_Bias_1 = (uint16_T)((uint32_T)
      vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1 +
      (uint32_T)vipcellcounting_win_P.Bias_Bias);

/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
</code>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2565" type="init">  vipcellcounting_win_DisplayResults_Counter1_Bias_1 = 0U;
</code>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="44" type="param">  1U,
</code>
            <forward block="vipcellcounting_win_DisplayResults_InsertText1" type="data">
              <var line="vipcellcounting_win_DisplayResults_Mux_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_Bias_1" port="vipcellcounting_win_DisplayResults_InsertText1_2" type="uint16_T"/>
            </forward>
            <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output" type="data">
              <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" type="uint16_T"/>
            </backward>
          </block>
          <block blocktype="SubSystem" id="13" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running">
            <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_y">
              <connect block="vipcellcounting_win_DisplayResults_Counter1_Bias" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1"/>
            </output>
            <sm:blocks>
              <block blocktype="S-Function" id="14" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation">
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_1">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y"/>
                </input>
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_2">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y"/>
                </input>
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_3">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y"/>
                </input>
                <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_1" type="uint16_T"/>
                <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" type="data">
                  <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" type="uint16_T"/>
                </backward>
              </block>
              <block blocktype="SignalSpecification" id="15" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar">
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1"/>
                </input>
                <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u"/>
                </output>
                <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1" type="uint16_T"/>
                <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate" type="data"/>
                <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" type="data"/>
                <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output" type="data">
                  <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" type="uint16_T"/>
                </backward>
              </block>
              <block blocktype="SubSystem" id="16" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld">
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1"/>
                </input>
                <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_y">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U"/>
                </output>
                <sm:blocks>
                  <block blocktype="Inport" id="17" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u">
                    <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_2"/>
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1"/>
                    </output>
                  </block>
                  <block blocktype="Constant" id="18" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant">
                    <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_3"/>
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_2"/>
                    </output>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" type="uint16_T"/>
                    <param name="FixPtConstant_Value" storage="vipcellcounting_win_P" type="uint16_T"/>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1567" type="task">/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    /* Constant: '&lt;S7&gt;/FixPt Constant' */
    vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1
      = vipcellcounting_win_P.FixPtConstant_Value;

/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
</code>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2566" type="init">  vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1
    = 0U;
</code>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="45" type="param">  1U,
</code>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_3" type="uint16_T"/>
                    </forward>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_2" type="uint16_T"/>
                    </forward>
                  </block>
                  <block blocktype="DataTypeDuplicate" id="19" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate">
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1"/>
                    </input>
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_2">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u_1"/>
                    </input>
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_3">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1"/>
                    </input>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_1" type="uint16_T"/>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_3" type="uint16_T"/>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar" type="data"/>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" type="uint16_T"/>
                    </backward>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" type="uint16_T"/>
                    </backward>
                  </block>
                  <block blocktype="Sum" id="20" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1">
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_u_1"/>
                    </input>
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_2">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1"/>
                    </input>
                    <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_1"/>
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_y" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_y_1"/>
                    </output>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_2" type="uint16_T"/>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" type="uint16_T"/>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1571" type="task">/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    /* Sum: '&lt;S7&gt;/FixPt Sum1' */
    vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1
      = (uint16_T)((uint32_T)
                   vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1
                   + (uint32_T)
                   vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1);

/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
</code>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2568" type="init">  vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1
    = 0U;
</code>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtDataTypeDuplicate_1" type="uint16_T"/>
                    </forward>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_2" type="uint16_T"/>
                    </forward>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_2" type="uint16_T"/>
                    </forward>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar" type="data"/>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtConstant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtConstant_1" type="uint16_T"/>
                    </backward>
                  </block>
                  <block blocktype="Outport" id="21" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_y">
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_y_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1"/>
                    </input>
                  </block>
                </sm:blocks>
              </block>
              <block blocktype="UnitDelay" id="22" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output">
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y"/>
                </input>
                <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1"/>
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_y" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_y_1"/>
                </output>
                <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" type="uint16_T"/>
                <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" type="uint16_T"/>
                <state name="Output_DSTATE" storage="vipcellcounting_win_DWork" type="uint16_T"/>
                <param name="Output_X0" storage="vipcellcounting_win_P" type="uint16_T"/>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1558" type="task">/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; S 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
    if (!vipcellcounting_win_DWork.Counter1_MODE) {
/*&gt;&gt;&gt; S 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
      /* InitializeConditions for UnitDelay: '&lt;S6&gt;/Output' */
      vipcellcounting_win_DWork.Output_DSTATE = vipcellcounting_win_P.Output_X0;
      vipcellcounting_win_DWork.Counter1_MODE = TRUE;
/*&lt;&lt;&lt; E 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
    }
/*&gt;&gt;&gt; E 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    /* UnitDelay: '&lt;S6&gt;/Output' */
    vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1 =
      vipcellcounting_win_DWork.Output_DSTATE;

/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
</code>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1596" type="update">/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    /* Update for UnitDelay: '&lt;S6&gt;/Output' */
    vipcellcounting_win_DWork.Output_DSTATE =
      vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1;
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    if (vipcellcounting_win_DWork.Counter1_MODE) {
      vipcellcounting_win_DWork.Counter1_MODE = FALSE;
    }
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
</code>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2564" type="init">  vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1 = 0U;
</code>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2675" type="state">  {
    char_T *sErr;
    int32_T i;
    /* InitializeConditions for UnitDelay: '&lt;S6&gt;/Output' */
    vipcellcounting_win_DWork.Output_DSTATE = vipcellcounting_win_P.Output_X0;

  }
</code>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="43" type="param">  0U,
</code>
                <forward block="vipcellcounting_win_DisplayResults_Counter1_Bias" type="data">
                  <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1" type="uint16_T"/>
                </forward>
                <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar" type="data">
                  <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Forcetobescalar_1" type="uint16_T"/>
                </forward>
                <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" type="data">
                  <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" type="uint16_T"/>
                </backward>
              </block>
              <block blocktype="SubSystem" id="23" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero">
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_y"/>
                </input>
                <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_1"/>
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_2"/>
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_3"/>
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1"/>
                </output>
                <sm:blocks>
                  <block blocktype="Inport" id="24" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U">
                    <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_2"/>
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_2"/>
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_3"/>
                    </output>
                  </block>
                  <block blocktype="Constant" id="25" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant">
                    <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_3"/>
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1"/>
                    </output>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" type="uint16_T"/>
                    <param name="Constant_Value" storage="vipcellcounting_win_P" type="uint16_T"/>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1578" type="task">/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    /* Constant: '&lt;S8&gt;/Constant' */
    vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1
      = vipcellcounting_win_P.Constant_Value;

/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
</code>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2570" type="init">  vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1
    = 0U;
</code>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="46" type="param">  0U,
</code>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_3" type="uint16_T"/>
                    </forward>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" type="uint16_T"/>
                    </forward>
                  </block>
                  <block blocktype="DataTypeDuplicate" id="26" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1">
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1"/>
                    </input>
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_2">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1"/>
                    </input>
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_3">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1"/>
                    </input>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_1" type="uint16_T"/>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_2" type="uint16_T"/>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_3" type="uint16_T"/>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" type="uint16_T"/>
                    </backward>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" type="uint16_T"/>
                    </backward>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" type="uint16_T"/>
                    </backward>
                  </block>
                  <block blocktype="Switch" id="27" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch">
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1"/>
                    </input>
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_2">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1"/>
                    </input>
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_3">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1"/>
                    </input>
                    <output line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_1"/>
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y_1"/>
                    </output>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" type="uint16_T"/>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_U_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_2" type="uint16_T"/>
                    <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" type="uint16_T"/>
                    <param name="FixPtSwitch_Threshold" storage="vipcellcounting_win_P" type="uint16_T"/>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1582" type="task">/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
    /* Switch: '&lt;S8&gt;/FixPt Switch' */
    if (vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1
        &gt; vipcellcounting_win_P.FixPtSwitch_Threshold) {
      vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1
        =
        vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1;
    } else {
      vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1
        =
        vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1;
    }

    /* End of Switch: '&lt;S8&gt;/FixPt Switch' */
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
</code>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2572" type="init">  vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1
    = 0U;
</code>
                    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="47" type="param">  65535U
,</code>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_FixPtDataTypePropagation_1" type="uint16_T"/>
                    </forward>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" type="uint16_T"/>
                    </forward>
                    <forward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtDataTypeDuplicate1_1" type="uint16_T"/>
                    </forward>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_IncrementRealWorld_FixPtSum1_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_IncrementRealWorld_FixPtSum1_1" type="uint16_T"/>
                    </backward>
                    <backward block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant" type="data">
                      <var line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_CounterFreeRunning_WrapToZero_Constant_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Constant_1" type="uint16_T"/>
                    </backward>
                  </block>
                  <block blocktype="Outport" id="28" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y">
                    <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_Y_1">
                      <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_WrapToZero_FixPtSwitch_1"/>
                    </input>
                  </block>
                </sm:blocks>
              </block>
              <block blocktype="Outport" id="29" name="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_y">
                <input line="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_y_1">
                  <connect block="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output" port="vipcellcounting_win_DisplayResults_Counter1_CounterFree-Running_Output_1"/>
                </input>
              </block>
            </sm:blocks>
          </block>
          <block blocktype="Outport" id="30" name="vipcellcounting_win_DisplayResults_Counter1_Out1">
            <input line="vipcellcounting_win_DisplayResults_Counter1_Bias_1" port="vipcellcounting_win_DisplayResults_Counter1_Out1_1">
              <connect block="vipcellcounting_win_DisplayResults_Counter1_Bias" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1"/>
            </input>
          </block>
        </sm:blocks>
        <state name="Counter1_MODE" storage="vipcellcounting_win_DWork" type="boolean_T"/>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1548" type="task">  /* Outputs for Enabled SubSystem: '&lt;S1&gt;/Counter1' incorporates:
   *  EnablePort: '&lt;S5&gt;/Reset'
   */
/*&lt;&lt;&lt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  if (vipcellcounting_win_DisplayResults_LogicalOperator_enable) {
/*&gt;&gt;&gt; S 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; S 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
    if (!vipcellcounting_win_DWork.Counter1_MODE) {
/*&gt;&gt;&gt; S 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
    }
/*&gt;&gt;&gt; E 3 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  } else {
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
/*&lt;&lt;&lt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &lt;&lt;&lt;*/
  }
/*&gt;&gt;&gt; E 1 vipcellcounting_win_DisplayResults_Counter1 '&lt;S1&gt;/Counter1' &gt;&gt;&gt;*/
  /* End of Outputs for SubSystem: '&lt;S1&gt;/Counter1' */
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2674" type="init">  {
    char_T *sErr;
    int32_T i;
    /* Start for Enabled SubSystem: '&lt;S1&gt;/Counter1' */
  }
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2678" type="state">  {
    char_T *sErr;
    int32_T i;
    /* End of Start for SubSystem: '&lt;S1&gt;/Counter1' */
  }
</code>
        <backward block="vipcellcounting_win_DisplayResults_LogicalOperator" type="data"/>
      </block>
      <block blocktype="DataTypeConversion" id="31" name="vipcellcounting_win_DisplayResults_DataTypeConversion">
        <input line="vipcellcounting_win_DisplayResults_Selector1_1" port="vipcellcounting_win_DisplayResults_DataTypeConversion_1">
          <connect block="vipcellcounting_win_DisplayResults_Selector1" port="vipcellcounting_win_DisplayResults_Selector1_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_DataTypeConversion_1" port="vipcellcounting_win_DisplayResults_DataTypeConversion_1">
          <connect block="vipcellcounting_win_DisplayResults_Celldivisionrate" port="vipcellcounting_win_DisplayResults_Celldivisionrate_1"/>
          <connect block="vipcellcounting_win_DisplayResults_Mux" port="vipcellcounting_win_DisplayResults_Mux_2"/>
        </output>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1632" type="task">  /* DataTypeConversion: '&lt;S1&gt;/Data Type Conversion' */
  tmp = floor(vipcellcounting_win_DisplayResults_Selector1_enable);
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  vipcellcounting_win_DisplayResults_DataTypeConversion_enable = (uint16_T)(tmp &lt;
    0.0 ? (uint16_T)(int32_T)(int16_T)-(int16_T)(uint16_T)-tmp : (uint16_T)tmp);

  /* End of DataTypeConversion: '&lt;S1&gt;/Data Type Conversion' */
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2563" type="init">  vipcellcounting_win_DisplayResults_DataTypeConversion_enable = 0U;
</code>
        <forward block="vipcellcounting_win_DisplayResults_InsertText1" type="data"/>
        <backward block="vipcellcounting_win_DisplayResults_Selector1" type="data"/>
      </block>
      <block blocktype="S-Function" id="32" name="vipcellcounting_win_DisplayResults_DrawMarkers">
        <input line="vipcellcounting_win_DisplayResults_ConverttoRGB_1" port="vipcellcounting_win_DisplayResults_DrawMarkers_1">
          <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB" port="vipcellcounting_win_DisplayResults_ConverttoRGB_Image"/>
        </input>
        <input line="vipcellcounting_win_DisplayResults_Centroids_1" port="vipcellcounting_win_DisplayResults_DrawMarkers_2">
          <connect block="vipcellcounting_win_DisplayResults_Centroids" port="vipcellcounting_win_DisplayResults_Centroids_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_DrawMarkers_1" port="vipcellcounting_win_DisplayResults_DrawMarkers_1">
          <connect block="vipcellcounting_win_DisplayResults_Results" port="vipcellcounting_win_DisplayResults_Results_1"/>
        </output>
        <var line="vipcellcounting_win_DisplayResults_ConverttoRGB_1" mode="input" name="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" port="vipcellcounting_win_DisplayResults_DrawMarkers_1" size="684288" type="real32_T"/>
        <signal name="vipcellcounting_win_DisplayResu" size="684288" storage="vipcellcounting_win_B" type="real32_T"/>
        <param name="DrawMarkers_RTP_FILLCOLOR" size="3" storage="vipcellcounting_win_P" type="real32_T"/>
        <param name="DrawMarkers_RTP_SIZE" storage="vipcellcounting_win_P" type="real32_T"/>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1819" type="task">  /* S-Function (svipdrawmarkers): '&lt;S1&gt;/Draw Markers' */
  isSizeValid = TRUE;
  numShape = 0;
  if (vipcellcounting_win_DWork.CountCells_DIMS1[1] &gt; 1) {
    isSizeValid = !((vipcellcounting_win_DWork.CountCells_DIMS1[1] &amp; 1) != 0);
    numShape = vipcellcounting_win_DWork.CountCells_DIMS1[0];
  } else {
    if (vipcellcounting_win_DWork.CountCells_DIMS1[1] == 1) {
      numShape = 1;
      isSizeValid = !((vipcellcounting_win_DWork.CountCells_DIMS1[0] &amp; 1) != 0);
    }
  }

  memcpy(&amp;vipcellcounting_win_B.vipcellcounting_win_DisplayResu[0],
         &amp;vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1[0],
         684288U * sizeof(real32_T));
  if (isSizeValid) {
    /* Update view port. */
    /* Draw all stars. */
    v = (real32_T)fabs(vipcellcounting_win_P.DrawMarkers_RTP_SIZE);
    if (v &lt; 8.388608E+6F) {
      if (v &gt;= 0.5F) {
        size = (int32_T)(real32_T)floor
          (vipcellcounting_win_P.DrawMarkers_RTP_SIZE + 0.5F);
      } else {
        size = (int32_T)(vipcellcounting_win_P.DrawMarkers_RTP_SIZE * 0.0F);
      }
    } else {
      size = (int32_T)vipcellcounting_win_P.DrawMarkers_RTP_SIZE;
    }

    for (indxLocation = 0; indxLocation &lt; numShape; indxLocation++) {
      v = (real32_T)fabs
        (vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation +
         numShape]);
      if (v &lt; 8.388608E+6F) {
        if (v &gt;= 0.5F) {
          v = (real32_T)floor
            (vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation
             + numShape] + 0.5F);
        } else {
          v = vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation
            + numShape] * 0.0F;
        }
      } else {
        v = vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation +
          numShape];
      }

      indxColor = (int32_T)v - 1;
      v = (real32_T)fabs
        (vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation]);
      if (v &lt; 8.388608E+6F) {
        if (v &gt;= 0.5F) {
          v = (real32_T)floor
            (vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation]
             + 0.5F);
        } else {
          v = vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation]
            * 0.0F;
        }
      } else {
        v = vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[indxLocation];
      }

      opacityIndx = (int32_T)v - 1;
      line_idx = opacityIndx - size;
      line_idx_0 = opacityIndx + size;
      isSizeValid = FALSE;

      /* Find the visible portion of a line. */
      visited = FALSE;
      visited_0 = FALSE;
      done = FALSE;
      line_idx_2 = indxColor;
      line_idx_1 = line_idx;
      line_idx_6 = indxColor;
      line_idx_3 = line_idx_0;
      while (!done) {
        strLen = 0;
        strPtrIdx = 0;

        /* Determine viewport violations. */
        if (line_idx_2 &lt; 0) {
          strLen = 4;
        } else {
          if (line_idx_2 &gt; 431) {
            strLen = 8;
          }
        }

        if (line_idx_6 &lt; 0) {
          strPtrIdx = 4;
        } else {
          if (line_idx_6 &gt; 431) {
            strPtrIdx = 8;
          }
        }

        if (line_idx_1 &lt; 0) {
          strLen = (int32_T)((uint32_T)strLen | 1U);
        } else {
          if (line_idx_1 &gt; 527) {
            strLen = (int32_T)((uint32_T)strLen | 2U);
          }
        }

        if (line_idx_3 &lt; 0) {
          strPtrIdx = (int32_T)((uint32_T)strPtrIdx | 1U);
        } else {
          if (line_idx_3 &gt; 527) {
            strPtrIdx = (int32_T)((uint32_T)strPtrIdx | 2U);
          }
        }

        if (!(((uint32_T)strLen | (uint32_T)strPtrIdx) != 0U)) {
          /* Line falls completely within bounds. */
          done = TRUE;
          isSizeValid = TRUE;
        } else if (((uint32_T)strLen &amp; (uint32_T)strPtrIdx) != 0U) {
          /* Line falls completely out of bounds. */
          done = TRUE;
          isSizeValid = FALSE;
        } else if ((uint32_T)strLen != 0U) {
          /* Clip 1st point; if it's in-bounds, clip 2nd point. */
          if (visited) {
            line_idx_2 = indxColor;
            line_idx_1 = line_idx;
          }

          i = line_idx_6 - line_idx_2;
          in = line_idx_3 - line_idx_1;
          if (((uint32_T)strLen &amp; 4U) != 0U) {
            /* Violated RMin. */
            idxFillColor = -line_idx_2 * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_1 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_1 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_2 = 0;
            visited = TRUE;
          } else if (((uint32_T)strLen &amp; 8U) != 0U) {
            /* Violated RMax. */
            idxFillColor = (431 - line_idx_2) * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_1 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_1 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_2 = 431;
            visited = TRUE;
          } else if (((uint32_T)strLen &amp; 1U) != 0U) {
            /* Violated CMin. */
            idxFillColor = -line_idx_1 * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_2 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_2 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_1 = 0;
            visited = TRUE;
          } else {
            /* Violated CMax. */
            idxFillColor = (527 - line_idx_1) * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_2 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_2 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_1 = 527;
            visited = TRUE;
          }
        } else {
          /* Clip the 2nd point. */
          if (visited_0) {
            line_idx_6 = indxColor;
            line_idx_3 = line_idx_0;
          }

          i = line_idx_6 - line_idx_2;
          in = line_idx_3 - line_idx_1;
          if (((uint32_T)strPtrIdx &amp; 4U) != 0U) {
            /* Violated RMin. */
            idxFillColor = -line_idx_6 * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_3 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_3 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_6 = 0;
            visited_0 = TRUE;
          } else if (((uint32_T)strPtrIdx &amp; 8U) != 0U) {
            /* Violated RMax. */
            idxFillColor = (431 - line_idx_6) * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_3 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_3 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_6 = 431;
            visited_0 = TRUE;
          } else if (((uint32_T)strPtrIdx &amp; 1U) != 0U) {
            /* Violated CMin. */
            idxFillColor = -line_idx_3 * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_6 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_6 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_3 = 0;
            visited_0 = TRUE;
          } else {
            /* Violated CMax. */
            idxFillColor = (527 - line_idx_3) * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_6 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_6 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_3 = 527;
            visited_0 = TRUE;
          }
        }
      }

      if (isSizeValid) {
        i = line_idx_1 * 432 + line_idx_2;
        for (in = line_idx_1; in &lt;= line_idx_3; in++) {
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[i] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[0];
          line_idx_1 = i + 228096;
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[line_idx_1] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[1];
          line_idx_1 += 228096;
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[line_idx_1] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[2];
          i += 432;
        }
      }

      line_idx_2 = indxColor - size;
      line_idx = opacityIndx - size;
      line_idx_6 = indxColor + size;
      line_idx_0 = opacityIndx + size;
      isSizeValid = FALSE;

      /* Find the visible portion of a line. */
      visited = FALSE;
      visited_0 = FALSE;
      done = FALSE;
      line_idx_4 = line_idx_2;
      line_idx_1 = line_idx;
      line_idx_5 = line_idx_6;
      line_idx_3 = line_idx_0;
      while (!done) {
        strLen = 0;
        strPtrIdx = 0;

        /* Determine viewport violations. */
        if (line_idx_4 &lt; 0) {
          strLen = 4;
        } else {
          if (line_idx_4 &gt; 431) {
            strLen = 8;
          }
        }

        if (line_idx_5 &lt; 0) {
          strPtrIdx = 4;
        } else {
          if (line_idx_5 &gt; 431) {
            strPtrIdx = 8;
          }
        }

        if (line_idx_1 &lt; 0) {
          strLen = (int32_T)((uint32_T)strLen | 1U);
        } else {
          if (line_idx_1 &gt; 527) {
            strLen = (int32_T)((uint32_T)strLen | 2U);
          }
        }

        if (line_idx_3 &lt; 0) {
          strPtrIdx = (int32_T)((uint32_T)strPtrIdx | 1U);
        } else {
          if (line_idx_3 &gt; 527) {
            strPtrIdx = (int32_T)((uint32_T)strPtrIdx | 2U);
          }
        }

        if (!(((uint32_T)strLen | (uint32_T)strPtrIdx) != 0U)) {
          /* Line falls completely within bounds. */
          done = TRUE;
          isSizeValid = TRUE;
        } else if (((uint32_T)strLen &amp; (uint32_T)strPtrIdx) != 0U) {
          /* Line falls completely out of bounds. */
          done = TRUE;
          isSizeValid = FALSE;
        } else if ((uint32_T)strLen != 0U) {
          /* Clip 1st point; if it's in-bounds, clip 2nd point. */
          if (visited) {
            line_idx_4 = line_idx_2;
            line_idx_1 = line_idx;
          }

          i = line_idx_5 - line_idx_4;
          in = line_idx_3 - line_idx_1;
          if (((uint32_T)strLen &amp; 4U) != 0U) {
            /* Violated RMin. */
            idxFillColor = -line_idx_4 * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_1 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_1 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_4 = 0;
            visited = TRUE;
          } else if (((uint32_T)strLen &amp; 8U) != 0U) {
            /* Violated RMax. */
            idxFillColor = (431 - line_idx_4) * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_1 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_1 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_4 = 431;
            visited = TRUE;
          } else if (((uint32_T)strLen &amp; 1U) != 0U) {
            /* Violated CMin. */
            idxFillColor = -line_idx_1 * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_4 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_4 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_1 = 0;
            visited = TRUE;
          } else {
            /* Violated CMax. */
            idxFillColor = (527 - line_idx_1) * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_4 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_4 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_1 = 527;
            visited = TRUE;
          }
        } else {
          /* Clip the 2nd point. */
          if (visited_0) {
            line_idx_5 = line_idx_6;
            line_idx_3 = line_idx_0;
          }

          i = line_idx_5 - line_idx_4;
          in = line_idx_3 - line_idx_1;
          if (((uint32_T)strPtrIdx &amp; 4U) != 0U) {
            /* Violated RMin. */
            idxFillColor = -line_idx_5 * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_3 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_3 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_5 = 0;
            visited_0 = TRUE;
          } else if (((uint32_T)strPtrIdx &amp; 8U) != 0U) {
            /* Violated RMax. */
            idxFillColor = (431 - line_idx_5) * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_3 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_3 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_5 = 431;
            visited_0 = TRUE;
          } else if (((uint32_T)strPtrIdx &amp; 1U) != 0U) {
            /* Violated CMin. */
            idxFillColor = -line_idx_3 * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_5 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_5 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_3 = 0;
            visited_0 = TRUE;
          } else {
            /* Violated CMax. */
            idxFillColor = (527 - line_idx_3) * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_5 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_5 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_3 = 527;
            visited_0 = TRUE;
          }
        }
      }

      if (isSizeValid) {
        i = line_idx_1 * 432 + line_idx_4;
        for (in = line_idx_4; in &lt;= line_idx_5; in++) {
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[i] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[0];
          line_idx_1 = i + 228096;
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[line_idx_1] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[1];
          line_idx_1 += 228096;
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[line_idx_1] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[2];
          i += 433;
        }
      }

      line_idx_2 = indxColor - size;
      line_idx = opacityIndx + size;
      line_idx_6 = indxColor + size;
      line_idx_0 = opacityIndx - size;
      isSizeValid = FALSE;

      /* Find the visible portion of a line. */
      visited = FALSE;
      visited_0 = FALSE;
      done = FALSE;
      line_idx_4 = line_idx_2;
      line_idx_1 = line_idx;
      line_idx_5 = line_idx_6;
      line_idx_3 = line_idx_0;
      while (!done) {
        strLen = 0;
        strPtrIdx = 0;

        /* Determine viewport violations. */
        if (line_idx_4 &lt; 0) {
          strLen = 4;
        } else {
          if (line_idx_4 &gt; 431) {
            strLen = 8;
          }
        }

        if (line_idx_5 &lt; 0) {
          strPtrIdx = 4;
        } else {
          if (line_idx_5 &gt; 431) {
            strPtrIdx = 8;
          }
        }

        if (line_idx_1 &lt; 0) {
          strLen = (int32_T)((uint32_T)strLen | 1U);
        } else {
          if (line_idx_1 &gt; 527) {
            strLen = (int32_T)((uint32_T)strLen | 2U);
          }
        }

        if (line_idx_3 &lt; 0) {
          strPtrIdx = (int32_T)((uint32_T)strPtrIdx | 1U);
        } else {
          if (line_idx_3 &gt; 527) {
            strPtrIdx = (int32_T)((uint32_T)strPtrIdx | 2U);
          }
        }

        if (!(((uint32_T)strLen | (uint32_T)strPtrIdx) != 0U)) {
          /* Line falls completely within bounds. */
          done = TRUE;
          isSizeValid = TRUE;
        } else if (((uint32_T)strLen &amp; (uint32_T)strPtrIdx) != 0U) {
          /* Line falls completely out of bounds. */
          done = TRUE;
          isSizeValid = FALSE;
        } else if ((uint32_T)strLen != 0U) {
          /* Clip 1st point; if it's in-bounds, clip 2nd point. */
          if (visited) {
            line_idx_4 = line_idx_2;
            line_idx_1 = line_idx;
          }

          i = line_idx_5 - line_idx_4;
          in = line_idx_3 - line_idx_1;
          if (((uint32_T)strLen &amp; 4U) != 0U) {
            /* Violated RMin. */
            idxFillColor = -line_idx_4 * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_1 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_1 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_4 = 0;
            visited = TRUE;
          } else if (((uint32_T)strLen &amp; 8U) != 0U) {
            /* Violated RMax. */
            idxFillColor = (431 - line_idx_4) * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_1 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_1 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_4 = 431;
            visited = TRUE;
          } else if (((uint32_T)strLen &amp; 1U) != 0U) {
            /* Violated CMin. */
            idxFillColor = -line_idx_1 * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_4 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_4 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_1 = 0;
            visited = TRUE;
          } else {
            /* Violated CMax. */
            idxFillColor = (527 - line_idx_1) * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_4 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_4 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_1 = 527;
            visited = TRUE;
          }
        } else {
          /* Clip the 2nd point. */
          if (visited_0) {
            line_idx_5 = line_idx_6;
            line_idx_3 = line_idx_0;
          }

          i = line_idx_5 - line_idx_4;
          in = line_idx_3 - line_idx_1;
          if (((uint32_T)strPtrIdx &amp; 4U) != 0U) {
            /* Violated RMin. */
            idxFillColor = -line_idx_5 * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_3 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_3 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_5 = 0;
            visited_0 = TRUE;
          } else if (((uint32_T)strPtrIdx &amp; 8U) != 0U) {
            /* Violated RMax. */
            idxFillColor = (431 - line_idx_5) * in;
            if (((idxFillColor &gt;= 0) &amp;&amp; (i &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (i &lt;
                  0))) {
              line_idx_3 += (div_s32_floor(idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            } else {
              line_idx_3 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, i) + 1) &gt;&gt; 1;
            }

            line_idx_5 = 431;
            visited_0 = TRUE;
          } else if (((uint32_T)strPtrIdx &amp; 1U) != 0U) {
            /* Violated CMin. */
            idxFillColor = -line_idx_3 * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_5 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_5 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_3 = 0;
            visited_0 = TRUE;
          } else {
            /* Violated CMax. */
            idxFillColor = (527 - line_idx_3) * i;
            if (((idxFillColor &gt;= 0) &amp;&amp; (in &gt;= 0)) || ((idxFillColor &lt; 0) &amp;&amp; (in
                  &lt; 0))) {
              line_idx_5 += (div_s32_floor(idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            } else {
              line_idx_5 -= (div_s32_floor(-idxFillColor &lt;&lt; 1, in) + 1) &gt;&gt; 1;
            }

            line_idx_3 = 527;
            visited_0 = TRUE;
          }
        }
      }

      if (isSizeValid) {
        i = line_idx_1 * 432 + line_idx_4;
        for (in = line_idx_4; in &lt;= line_idx_5; in++) {
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[i] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[0];
          line_idx_1 = i + 228096;
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[line_idx_1] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[1];
          line_idx_1 += 228096;
          vipcellcounting_win_B.vipcellcounting_win_DisplayResu[line_idx_1] =
            vipcellcounting_win_P.DrawMarkers_RTP_FILLCOLOR[2];
          i -= 431;
        }
      }
    }
  }

  /* End of S-Function (svipdrawmarkers): '&lt;S1&gt;/Draw Markers' */
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2503" type="init">  {
    int_T i;
    for (i = 0; i &lt; 684288; i++) {
      vipcellcounting_win_B.vipcellcounting_win_DisplayResu[i] = 0.0F;
    }
  }
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="35" type="param">  { 0.0F, 1.0F, 0.0F },
  3.0F,
</code>
        <forward block="vipcellcounting_win_DisplayResults_Results" type="data"/>
        <backward block="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate" type="data">
          <var line="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" mode="output" name="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" port="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate_1" size="684288" type="real32_T"/>
        </backward>
        <backward block="vipcellcounting_win_Subsystem_CountCells" type="data"/>
      </block>
      <block blocktype="S-Function" id="33" name="vipcellcounting_win_DisplayResults_InsertText1">
        <input line="vipcellcounting_win_DisplayResults_VideoIn_1" port="vipcellcounting_win_DisplayResults_InsertText1_1">
          <connect block="vipcellcounting_win_DisplayResults_VideoIn" port="vipcellcounting_win_DisplayResults_VideoIn_1"/>
        </input>
        <input line="vipcellcounting_win_DisplayResults_Mux_1" port="vipcellcounting_win_DisplayResults_InsertText1_2">
          <connect block="vipcellcounting_win_DisplayResults_Mux" port="vipcellcounting_win_DisplayResults_Mux_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_InsertText1_1" port="vipcellcounting_win_DisplayResults_InsertText1_1">
          <connect block="vipcellcounting_win_DisplayResults_InsertText2" port="vipcellcounting_win_DisplayResults_InsertText2_1"/>
        </output>
        <var line="vipcellcounting_win_DisplayResults_VideoIn_1" mode="input" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_DisplayResults_InsertText1_1" size="228096" type="real32_T"/>
        <var line="vipcellcounting_win_DisplayResults_Mux_1" mode="input" name="vipcellcounting_win_DisplayResults_Counter1_Bias_1" port="vipcellcounting_win_DisplayResults_InsertText1_2" type="uint16_T"/>
        <state name="InsertText1_colorVectorDW" storage="vipcellcounting_win_DWork" type="real32_T"/>
        <state name="InsertText1_TxtLoc" size="2" storage="vipcellcounting_win_DWork" type="int32_T"/>
        <state name="InsertText1_TxtSelctn" storage="vipcellcounting_win_DWork" type="uint32_T"/>
        <state name="InsertText1_VarHolder" size="3" storage="vipcellcounting_win_DWork" type="uint16_T"/>
        <state name="InsertText1_RepBuf" size="56" storage="vipcellcounting_win_DWork" type="uint8_T"/>
        <state name="InsertText1_StringDataDW" size="19" storage="vipcellcounting_win_DWork" type="uint8_T"/>
        <param name="InsertText1_colorRTP" storage="vipcellcounting_win_P" type="real32_T"/>
        <param name="InsertText1_TxtOpacity" storage="vipcellcounting_win_P" type="real32_T"/>
        <param name="InsertText1_TxtLocation" size="2" storage="vipcellcounting_win_P" type="int32_T"/>
        <const_param name="InsertText1_GlyLBea" size="256" storage="vipcellcounting_win_ConstP" type="int32_T"/>
        <const_param name="InsertText1_GlyTBea" size="256" storage="vipcellcounting_win_ConstP" type="int32_T"/>
        <const_param name="InsertText1_GlyInde" size="256" storage="vipcellcounting_win_ConstP" type="uint32_T"/>
        <const_param name="InsertText1_GlyWidt" size="256" storage="vipcellcounting_win_ConstP" type="uint16_T"/>
        <const_param name="InsertText1_GlyHeig" size="256" storage="vipcellcounting_win_ConstP" type="uint16_T"/>
        <const_param name="InsertText1_GlyXAdv" size="256" storage="vipcellcounting_win_ConstP" type="uint16_T"/>
        <const_param name="InsertText1_StrArray" size="19" storage="vipcellcounting_win_ConstP" type="uint8_T"/>
        <const_param name="InsertText1_GlyDat" size="2929" storage="vipcellcounting_win_ConstP" type="uint8_T"/>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1651" type="task">  /* S-Function (sviptextrender): '&lt;S1&gt;/Insert Text1' */
  strLen = 2;
  strPtrIdx = 0;

  memcpy(&amp;vipcellcounting_win_B.vipcellcounting_win_DisplayRe_n[0],
         &amp;vipcellcounting_win_B.vipcellcounting_win_Video_1[0], 228096U * sizeof
         (real32_T));
  while (strLen &gt; 0) {
    isSizeValid = TRUE;
    if (vipcellcounting_win_P.InsertText1_TxtOpacity == 0.0F) {
      isSizeValid = FALSE;
    }

    /* copy location to int32 container */
    line_idx_1 = vipcellcounting_win_P.InsertText1_TxtLocation[1] - 1;
    line_idx = vipcellcounting_win_P.InsertText1_TxtLocation[0] - 1;

    /* update the color/intensity */
    vipcellcounting_win_DWork.InsertText1_colorVectorDW =
      vipcellcounting_win_P.InsertText1_colorRTP;

    /* Saturate color values */
    if (vipcellcounting_win_DWork.InsertText1_colorVectorDW &lt; 0.0F) {
      vipcellcounting_win_DWork.InsertText1_colorVectorDW = 0.0F;
    } else {
      if (vipcellcounting_win_DWork.InsertText1_colorVectorDW &gt; 1.0F) {
        vipcellcounting_win_DWork.InsertText1_colorVectorDW = 1.0F;
      }
    }

    vipcellcounting_win_DWork.InsertText1_VarHolder[0] =
      vipcellcounting_win_B.TmpSignalConversionAtInsertText[strPtrIdx];
    vipcellcounting_win_DWork.InsertText1_VarHolder[1] =
      vipcellcounting_win_B.TmpSignalConversionAtInsertText[1 + strPtrIdx];
    vipcellcounting_win_DWork.InsertText1_VarHolder[2] =
      vipcellcounting_win_B.TmpSignalConversionAtInsertText[2 + strPtrIdx];
    MWVIP_snprintf_wrapper(&amp;vipcellcounting_win_DWork.InsertText1_RepBuf[0U],
      &amp;vipcellcounting_win_DWork.InsertText1_StringDataDW[0],
      &amp;vipcellcounting_win_DWork.InsertText1_VarHolder[0U], strLen + 1, 5, FALSE,
      56);
    in = MWVIP_strlen(&amp;vipcellcounting_win_DWork.InsertText1_RepBuf[0]);
    strPtrIdx += 2;
    strLen -= 2;
    if (isSizeValid) {
      /* put the pen at the beginning of the string */
      idxFillColor = line_idx;
      for (line_idx_0 = 0; line_idx_0 &lt; in; line_idx_0++) {
        if (vipcellcounting_win_DWork.InsertText1_RepBuf[line_idx_0] == 10) {
          line_idx_1 += 20;
          idxFillColor = line_idx;
        } else {
          numShape = vipcellcounting_win_DWork.InsertText1_RepBuf[line_idx_0];
          line_idx_2 = (int32_T)
            vipcellcounting_win_ConstP.InsertText1_GlyInde[numShape];
          if (!((vipcellcounting_win_ConstP.InsertText1_GlyWidt[numShape] != 0) &amp;&amp;
                (vipcellcounting_win_ConstP.InsertText1_GlyHeig[numShape] != 0) &amp;&amp;
                (vipcellcounting_win_ConstP.InsertText1_GlyXAdv[numShape] != 0)))
          {
            numShape = 32;
            line_idx_2 = 0;
          }

          opacityVal = vipcellcounting_win_P.InsertText1_TxtOpacity;
          MWVIP_DrawText_I_single_AA
            (&amp;vipcellcounting_win_ConstP.InsertText1_GlyDat[line_idx_2],
             idxFillColor, line_idx_1 + 16,
             vipcellcounting_win_ConstP.InsertText1_GlyLBea[numShape],
             vipcellcounting_win_ConstP.InsertText1_GlyTBea[numShape],
             vipcellcounting_win_ConstP.InsertText1_GlyWidt[numShape],
             vipcellcounting_win_ConstP.InsertText1_GlyHeig[numShape], 528U,
             432U, &amp;vipcellcounting_win_B.vipcellcounting_win_DisplayRe_n[0],
             &amp;vipcellcounting_win_DWork.InsertText1_colorVectorDW, &amp;(&amp;opacityVal)
             [0U], FALSE);
          idxFillColor +=
            vipcellcounting_win_ConstP.InsertText1_GlyXAdv[numShape];
        }
      }
    }
  }

  /* End of S-Function (sviptextrender): '&lt;S1&gt;/Insert Text1' */
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2685" type="init">  {
    char_T *sErr;
    int32_T i;
    /* Start for S-Function (sviptextrender): '&lt;S1&gt;/Insert Text1' */
    for (i = 0; i &lt; 19; i++) {
      vipcellcounting_win_DWork.InsertText1_StringDataDW[i] =
        vipcellcounting_win_ConstP.InsertText1_StrArray[i];
    }
    /* End of Start for S-Function (sviptextrender): '&lt;S1&gt;/Insert Text1' */
  }
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2615" type="state">  vipcellcounting_win_DWork.InsertText1_colorVectorDW = 0.0F;
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="30" type="param">  1.0F,
  1.0F,
  { 10, 10 },
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="57" type="const">  /* Computed Parameter: InsertText1_GlyLBea
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 2, 4, 0, 1, 1, 1, 1,
    1, 2, 1, 2, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  /* Computed Parameter: InsertText1_GlyTBea
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 9, 3, 7, 3, 0, 12, 13,
    12, 12, 12, 12, 12, 12, 12, 12, 9, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
    0, 9, 13, 9, 13, 9, 13, 0, 0, 0, 0, 0, 0, 9, 9, 9, 0, 0, 9, 0, 11, 9, 0, 0,
    9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0 },
  /* Computed Parameter: InsertText1_GlyInde
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 132U, 204U, 222U, 240U, 0U, 249U, 345U, 449U, 533U, 617U,
    713U, 785U, 881U, 965U, 1061U, 1157U, 0U, 0U, 0U, 0U, 0U, 0U, 1184U, 1304U,
    1388U, 1484U, 1580U, 1676U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 1772U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1892U, 1973U,
    2077U, 2140U, 2244U, 2316U, 0U, 0U, 0U, 0U, 0U, 0U, 2420U, 2501U, 2564U, 0U,
    0U, 2636U, 0U, 2699U, 2776U, 0U, 0U, 2839U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText1_GlyWidt
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 11U,
    0U, 0U, 0U, 0U, 0U, 8U, 3U, 6U, 3U, 0U, 8U, 8U, 7U, 7U, 8U, 6U, 8U, 7U, 8U,
    8U, 3U, 0U, 0U, 0U, 0U, 0U, 0U, 10U, 7U, 8U, 8U, 8U, 8U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 10U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 9U, 8U, 7U, 8U, 8U, 8U, 0U, 0U, 0U, 0U, 0U, 0U, 9U, 7U, 8U, 0U, 0U,
    7U, 0U, 7U, 7U, 0U, 0U, 10U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText1_GlyHeig
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 12U,
    0U, 0U, 0U, 0U, 0U, 9U, 6U, 3U, 3U, 0U, 12U, 13U, 12U, 12U, 12U, 12U, 12U,
    12U, 12U, 12U, 9U, 0U, 0U, 0U, 0U, 0U, 0U, 12U, 12U, 12U, 12U, 12U, 12U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 12U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 9U, 13U, 9U, 13U, 9U, 13U, 0U, 0U, 0U, 0U, 0U, 0U,
    9U, 9U, 9U, 0U, 0U, 9U, 0U, 11U, 9U, 0U, 0U, 9U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText1_GlyXAdv
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 10U, 0U, 0U, 0U, 0U, 10U,
    0U, 0U, 0U, 0U, 0U, 10U, 10U, 10U, 10U, 0U, 10U, 10U, 10U, 10U, 10U, 10U,
    10U, 10U, 10U, 10U, 10U, 0U, 0U, 0U, 0U, 0U, 0U, 10U, 10U, 10U, 10U, 10U,
    10U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 10U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 10U, 10U, 10U, 10U, 10U, 10U, 0U, 0U, 0U, 0U,
    0U, 0U, 10U, 10U, 10U, 0U, 0U, 10U, 0U, 10U, 10U, 0U, 0U, 10U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText1_StrArray
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 70U, 114U, 97U, 109U, 101U, 32U, 37U, 100U, 44U, 32U, 67U, 111U, 117U, 110U,
    116U, 32U, 37U, 100U, 0U },
  /* Computed Parameter: InsertText1_GlyDat
   * Referenced by: '&lt;S1&gt;/Insert Text1'
   */
  { 0U, 36U, 200U, 250U, 200U, 36U, 0U, 0U, 0U, 104U, 160U, 0U, 197U, 152U, 62U,
    155U, 196U, 0U, 0U, 48U, 205U, 10U, 0U, 250U, 12U, 0U, 12U, 250U, 0U, 13U,
    207U, 43U, 0U, 0U, 215U, 105U, 10U, 106U, 215U, 0U, 166U, 97U, 0U, 0U, 0U,
    67U, 240U, 255U, 239U, 67U, 103U, 161U, 0U, 0U, 0U, 0U, 0U, 10U, 43U, 9U,
    46U, 206U, 11U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 12U, 207U, 69U, 191U, 249U, 191U,
    24U, 0U, 0U, 0U, 0U, 165U, 98U, 173U, 164U, 56U, 167U, 172U, 0U, 0U, 0U,
    101U, 162U, 0U, 244U, 21U, 0U, 21U, 243U, 0U, 0U, 45U, 206U, 11U, 0U, 244U,
    22U, 0U, 23U, 243U, 0U, 12U, 206U, 44U, 0U, 0U, 174U, 167U, 60U, 170U, 174U,
    0U, 164U, 99U, 0U, 0U, 0U, 27U, 194U, 250U, 192U, 26U, 0U, 0U, 0U, 164U,
    255U, 0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U,
    0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U, 255U, 255U, 255U, 255U, 255U,
    255U, 255U, 255U, 48U, 48U, 48U, 181U, 255U, 48U, 48U, 48U, 0U, 0U, 0U, 164U,
    255U, 0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U,
    0U, 0U, 0U, 40U, 40U, 6U, 255U, 255U, 40U, 255U, 255U, 36U, 44U, 252U, 11U,
    161U, 172U, 0U, 106U, 11U, 0U, 4U, 4U, 4U, 4U, 4U, 4U, 255U, 255U, 255U,
    255U, 255U, 255U, 48U, 48U, 48U, 48U, 48U, 48U, 40U, 40U, 6U, 255U, 255U,
    40U, 255U, 255U, 40U, 0U, 18U, 160U, 240U, 240U, 158U, 16U, 0U, 3U, 200U,
    217U, 78U, 78U, 218U, 196U, 2U, 93U, 255U, 52U, 0U, 0U, 54U, 255U, 90U, 180U,
    223U, 0U, 0U, 0U, 0U, 224U, 178U, 229U, 183U, 0U, 0U, 0U, 0U, 184U, 228U,
    250U, 167U, 0U, 0U, 0U, 0U, 168U, 249U, 249U, 168U, 0U, 0U, 0U, 0U, 169U,
    248U, 227U, 183U, 0U, 0U, 0U, 0U, 186U, 227U, 178U, 221U, 0U, 0U, 0U, 0U,
    228U, 178U, 90U, 255U, 46U, 0U, 0U, 60U, 255U, 91U, 3U, 199U, 212U, 74U, 80U,
    222U, 199U, 3U, 0U, 18U, 163U, 242U, 239U, 158U, 17U, 0U, 0U, 0U, 0U, 2U,
    30U, 0U, 0U, 0U, 0U, 55U, 143U, 229U, 164U, 0U, 0U, 0U, 223U, 248U, 173U,
    255U, 164U, 0U, 0U, 0U, 99U, 15U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U,
    255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U,
    164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U,
    0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U,
    0U, 0U, 52U, 52U, 52U, 255U, 182U, 52U, 52U, 52U, 255U, 255U, 255U, 255U,
    255U, 255U, 255U, 255U, 88U, 197U, 243U, 247U, 195U, 61U, 0U, 155U, 129U,
    65U, 73U, 206U, 248U, 44U, 0U, 0U, 0U, 0U, 39U, 255U, 139U, 0U, 0U, 0U, 0U,
    8U, 255U, 152U, 0U, 0U, 0U, 0U, 66U, 255U, 89U, 0U, 0U, 0U, 6U, 202U, 203U,
    4U, 0U, 0U, 3U, 169U, 226U, 29U, 0U, 0U, 1U, 160U, 227U, 34U, 0U, 0U, 0U,
    125U, 242U, 41U, 0U, 0U, 0U, 59U, 253U, 103U, 0U, 0U, 0U, 0U, 210U, 247U,
    57U, 52U, 52U, 52U, 33U, 255U, 255U, 255U, 255U, 255U, 255U, 164U, 78U, 204U,
    240U, 250U, 214U, 105U, 0U, 91U, 116U, 65U, 68U, 183U, 255U, 91U, 0U, 0U, 0U,
    0U, 17U, 255U, 157U, 0U, 0U, 0U, 0U, 25U, 255U, 121U, 0U, 0U, 6U, 45U, 182U,
    204U, 13U, 0U, 112U, 255U, 255U, 221U, 32U, 0U, 0U, 21U, 51U, 82U, 190U,
    240U, 58U, 0U, 0U, 0U, 0U, 4U, 220U, 206U, 0U, 0U, 0U, 0U, 0U, 170U, 250U,
    0U, 0U, 0U, 0U, 3U, 216U, 220U, 84U, 113U, 63U, 67U, 177U, 255U, 98U, 89U,
    218U, 248U, 246U, 198U, 84U, 0U, 0U, 0U, 0U, 0U, 82U, 255U, 164U, 0U, 0U, 0U,
    0U, 15U, 229U, 255U, 164U, 0U, 0U, 0U, 0U, 152U, 211U, 255U, 164U, 0U, 0U,
    0U, 60U, 252U, 56U, 255U, 164U, 0U, 0U, 7U, 215U, 146U, 0U, 255U, 164U, 0U,
    0U, 130U, 226U, 13U, 0U, 255U, 164U, 0U, 43U, 249U, 76U, 0U, 0U, 255U, 164U,
    0U, 198U, 169U, 0U, 0U, 0U, 255U, 164U, 0U, 255U, 255U, 255U, 255U, 255U,
    255U, 255U, 255U, 48U, 48U, 48U, 48U, 48U, 255U, 181U, 48U, 0U, 0U, 0U, 0U,
    0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 255U, 255U, 255U,
    255U, 255U, 180U, 255U, 182U, 52U, 52U, 52U, 36U, 255U, 164U, 0U, 0U, 0U, 0U,
    255U, 164U, 0U, 0U, 0U, 0U, 255U, 254U, 235U, 172U, 43U, 0U, 50U, 61U, 111U,
    225U, 244U, 48U, 0U, 0U, 0U, 26U, 241U, 182U, 0U, 0U, 0U, 0U, 177U, 242U, 0U,
    0U, 0U, 0U, 177U, 246U, 0U, 0U, 0U, 13U, 237U, 190U, 147U, 74U, 66U, 190U,
    250U, 58U, 193U, 240U, 248U, 195U, 60U, 0U, 0U, 1U, 108U, 214U, 248U, 228U,
    160U, 0U, 0U, 145U, 247U, 124U, 59U, 78U, 135U, 0U, 56U, 255U, 94U, 0U, 0U,
    0U, 0U, 0U, 157U, 232U, 2U, 0U, 0U, 0U, 0U, 0U, 217U, 182U, 88U, 218U, 248U,
    189U, 38U, 0U, 246U, 225U, 171U, 60U, 88U, 235U, 227U, 15U, 252U, 225U, 5U,
    0U, 0U, 87U, 255U, 111U, 237U, 170U, 0U, 0U, 0U, 14U, 255U, 157U, 197U, 180U,
    0U, 0U, 0U, 9U, 255U, 147U, 123U, 241U, 16U, 0U, 0U, 72U, 255U, 85U, 16U,
    228U, 195U, 68U, 81U, 225U, 202U, 4U, 0U, 37U, 181U, 244U, 239U, 159U, 18U,
    0U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 52U, 52U, 52U, 52U, 52U, 191U,
    195U, 0U, 0U, 0U, 0U, 44U, 252U, 54U, 0U, 0U, 0U, 0U, 178U, 171U, 0U, 0U, 0U,
    0U, 59U, 253U, 42U, 0U, 0U, 0U, 0U, 195U, 170U, 0U, 0U, 0U, 0U, 76U, 255U,
    50U, 0U, 0U, 0U, 1U, 208U, 196U, 0U, 0U, 0U, 0U, 80U, 255U, 97U, 0U, 0U, 0U,
    0U, 196U, 250U, 15U, 0U, 0U, 0U, 24U, 254U, 193U, 0U, 0U, 0U, 0U, 75U, 255U,
    140U, 0U, 0U, 0U, 0U, 0U, 85U, 205U, 249U, 242U, 179U, 32U, 0U, 70U, 255U,
    165U, 63U, 111U, 252U, 201U, 0U, 153U, 255U, 13U, 0U, 0U, 179U, 249U, 0U,
    132U, 255U, 71U, 0U, 1U, 211U, 191U, 0U, 24U, 227U, 239U, 86U, 145U, 224U,
    36U, 0U, 0U, 57U, 252U, 255U, 245U, 58U, 0U, 0U, 39U, 235U, 146U, 108U, 236U,
    251U, 117U, 0U, 183U, 226U, 5U, 0U, 20U, 196U, 255U, 82U, 247U, 171U, 0U, 0U,
    0U, 33U, 255U, 155U, 233U, 211U, 1U, 0U, 0U, 29U, 255U, 132U, 125U, 255U,
    165U, 63U, 75U, 204U, 235U, 29U, 1U, 108U, 214U, 251U, 238U, 171U, 36U, 0U,
    0U, 75U, 205U, 248U, 229U, 135U, 6U, 0U, 74U, 254U, 162U, 61U, 91U, 231U,
    152U, 0U, 201U, 214U, 1U, 0U, 0U, 72U, 253U, 32U, 248U, 168U, 0U, 0U, 0U, 7U,
    255U, 105U, 234U, 207U, 0U, 0U, 0U, 29U, 255U, 144U, 139U, 255U, 128U, 12U,
    27U, 169U, 255U, 159U, 7U, 160U, 254U, 255U, 230U, 78U, 255U, 152U, 0U, 0U,
    20U, 39U, 5U, 39U, 255U, 124U, 0U, 0U, 0U, 0U, 0U, 103U, 255U, 64U, 0U, 0U,
    0U, 0U, 8U, 215U, 216U, 2U, 61U, 133U, 66U, 74U, 192U, 247U, 59U, 0U, 49U,
    200U, 244U, 244U, 188U, 54U, 0U, 0U, 255U, 255U, 40U, 255U, 255U, 40U, 40U,
    40U, 6U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 40U, 40U, 6U, 255U, 255U, 40U,
    255U, 255U, 40U, 0U, 0U, 0U, 31U, 255U, 194U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    115U, 255U, 253U, 24U, 0U, 0U, 0U, 0U, 0U, 0U, 199U, 170U, 255U, 106U, 0U,
    0U, 0U, 0U, 0U, 28U, 254U, 39U, 208U, 191U, 0U, 0U, 0U, 0U, 0U, 112U, 205U,
    0U, 118U, 252U, 22U, 0U, 0U, 0U, 0U, 196U, 116U, 0U, 30U, 254U, 103U, 0U, 0U,
    0U, 26U, 252U, 32U, 4U, 4U, 196U, 188U, 0U, 0U, 0U, 109U, 255U, 255U, 255U,
    255U, 255U, 251U, 19U, 0U, 0U, 193U, 139U, 52U, 52U, 52U, 70U, 255U, 100U,
    0U, 24U, 253U, 41U, 0U, 0U, 0U, 0U, 211U, 185U, 0U, 106U, 221U, 0U, 0U, 0U,
    0U, 0U, 136U, 250U, 17U, 190U, 145U, 0U, 0U, 0U, 0U, 0U, 61U, 255U, 97U,
    255U, 255U, 255U, 251U, 224U, 134U, 4U, 255U, 182U, 54U, 80U, 188U, 255U,
    107U, 255U, 164U, 0U, 0U, 17U, 255U, 158U, 255U, 164U, 0U, 0U, 25U, 255U,
    119U, 255U, 164U, 5U, 45U, 185U, 204U, 12U, 255U, 255U, 255U, 255U, 205U,
    16U, 0U, 255U, 181U, 54U, 103U, 223U, 221U, 33U, 255U, 164U, 0U, 0U, 24U,
    240U, 182U, 255U, 164U, 0U, 0U, 0U, 174U, 246U, 255U, 164U, 0U, 0U, 0U, 188U,
    237U, 255U, 182U, 52U, 61U, 127U, 253U, 148U, 255U, 255U, 255U, 253U, 232U,
    146U, 8U, 0U, 0U, 66U, 184U, 239U, 247U, 222U, 166U, 0U, 105U, 254U, 183U,
    77U, 59U, 99U, 180U, 43U, 250U, 173U, 1U, 0U, 0U, 0U, 0U, 151U, 253U, 30U,
    0U, 0U, 0U, 0U, 0U, 217U, 207U, 0U, 0U, 0U, 0U, 0U, 0U, 246U, 172U, 0U, 0U,
    0U, 0U, 0U, 0U, 249U, 170U, 0U, 0U, 0U, 0U, 0U, 0U, 224U, 201U, 0U, 0U, 0U,
    0U, 0U, 0U, 161U, 252U, 30U, 0U, 0U, 0U, 0U, 0U, 53U, 253U, 183U, 5U, 0U, 0U,
    0U, 0U, 0U, 118U, 255U, 202U, 92U, 57U, 80U, 151U, 0U, 0U, 73U, 188U, 241U,
    251U, 221U, 160U, 255U, 255U, 255U, 245U, 209U, 119U, 6U, 0U, 255U, 182U,
    54U, 75U, 143U, 250U, 185U, 2U, 255U, 164U, 0U, 0U, 0U, 112U, 255U, 95U,
    255U, 164U, 0U, 0U, 0U, 7U, 241U, 185U, 255U, 164U, 0U, 0U, 0U, 0U, 193U,
    232U, 255U, 164U, 0U, 0U, 0U, 0U, 171U, 250U, 255U, 164U, 0U, 0U, 0U, 0U,
    171U, 245U, 255U, 164U, 0U, 0U, 0U, 0U, 194U, 220U, 255U, 164U, 0U, 0U, 0U,
    9U, 243U, 163U, 255U, 164U, 0U, 0U, 0U, 123U, 255U, 62U, 255U, 182U, 55U,
    81U, 163U, 255U, 138U, 0U, 255U, 255U, 254U, 238U, 188U, 84U, 0U, 0U, 255U,
    255U, 255U, 255U, 255U, 255U, 224U, 0U, 255U, 182U, 52U, 52U, 52U, 52U, 45U,
    0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U,
    255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 255U, 255U, 255U, 255U, 255U, 20U,
    0U, 255U, 181U, 48U, 48U, 48U, 48U, 3U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U,
    0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U,
    255U, 182U, 52U, 52U, 52U, 52U, 52U, 12U, 255U, 255U, 255U, 255U, 255U, 255U,
    255U, 60U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 60U, 255U, 182U, 52U,
    52U, 52U, 52U, 52U, 12U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U,
    0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U,
    0U, 0U, 0U, 0U, 255U, 255U, 255U, 255U, 255U, 255U, 108U, 0U, 255U, 181U,
    48U, 48U, 48U, 48U, 20U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U,
    0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U,
    0U, 0U, 0U, 0U, 0U, 70U, 255U, 141U, 0U, 0U, 0U, 0U, 126U, 236U, 21U, 0U,
    171U, 251U, 44U, 0U, 0U, 40U, 248U, 94U, 0U, 0U, 28U, 244U, 194U, 0U, 1U,
    194U, 187U, 0U, 0U, 0U, 0U, 117U, 255U, 94U, 103U, 246U, 34U, 0U, 0U, 0U, 0U,
    5U, 212U, 233U, 240U, 117U, 0U, 0U, 0U, 0U, 0U, 0U, 64U, 255U, 222U, 4U, 0U,
    0U, 0U, 0U, 0U, 0U, 106U, 255U, 253U, 51U, 0U, 0U, 0U, 0U, 0U, 26U, 241U,
    140U, 240U, 202U, 2U, 0U, 0U, 0U, 0U, 175U, 206U, 4U, 109U, 255U, 104U, 0U,
    0U, 0U, 82U, 252U, 51U, 0U, 3U, 206U, 238U, 21U, 0U, 14U, 229U, 140U, 0U, 0U,
    0U, 55U, 254U, 158U, 0U, 151U, 222U, 10U, 0U, 0U, 0U, 0U, 154U, 254U, 59U,
    27U, 161U, 222U, 251U, 240U, 165U, 9U, 0U, 0U, 46U, 130U, 72U, 58U, 139U,
    255U, 111U, 0U, 0U, 0U, 0U, 0U, 0U, 4U, 255U, 157U, 0U, 0U, 0U, 83U, 197U,
    244U, 255U, 255U, 164U, 0U, 0U, 102U, 255U, 166U, 73U, 50U, 255U, 164U, 0U,
    0U, 224U, 200U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 249U, 175U, 0U, 0U, 20U,
    255U, 166U, 0U, 0U, 190U, 243U, 84U, 81U, 215U, 239U, 214U, 57U, 0U, 32U,
    194U, 249U, 209U, 77U, 76U, 238U, 220U, 2U, 255U, 164U, 0U, 0U, 0U, 0U, 0U,
    0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U,
    255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 43U, 199U, 249U, 206U, 55U,
    0U, 255U, 184U, 205U, 96U, 68U, 209U, 237U, 18U, 255U, 243U, 39U, 0U, 0U,
    64U, 255U, 105U, 255U, 165U, 0U, 0U, 0U, 12U, 255U, 151U, 255U, 164U, 0U, 0U,
    0U, 3U, 255U, 158U, 255U, 164U, 0U, 0U, 0U, 27U, 255U, 133U, 255U, 179U, 0U,
    0U, 0U, 104U, 255U, 65U, 255U, 244U, 165U, 65U, 94U, 239U, 188U, 0U, 255U,
    104U, 132U, 236U, 242U, 162U, 16U, 0U, 0U, 37U, 168U, 234U, 250U, 229U, 178U,
    36U, 239U, 229U, 100U, 57U, 81U, 149U, 164U, 252U, 41U, 0U, 0U, 0U, 0U, 232U,
    193U, 0U, 0U, 0U, 0U, 0U, 251U, 168U, 0U, 0U, 0U, 0U, 0U, 233U, 193U, 0U, 0U,
    0U, 0U, 0U, 167U, 252U, 42U, 0U, 0U, 0U, 0U, 39U, 242U, 229U, 102U, 56U, 76U,
    143U, 0U, 42U, 172U, 236U, 250U, 227U, 167U, 0U, 0U, 0U, 0U, 0U, 0U, 255U,
    164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U,
    0U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 55U, 201U, 248U, 219U, 93U, 250U,
    164U, 35U, 243U, 192U, 66U, 84U, 202U, 255U, 164U, 157U, 246U, 18U, 0U, 0U,
    4U, 255U, 164U, 225U, 190U, 0U, 0U, 0U, 0U, 255U, 164U, 250U, 167U, 0U, 0U,
    0U, 0U, 255U, 164U, 244U, 175U, 0U, 0U, 0U, 2U, 255U, 164U, 200U, 224U, 1U,
    0U, 0U, 124U, 255U, 164U, 97U, 255U, 145U, 61U, 141U, 159U, 255U, 164U, 0U,
    123U, 233U, 241U, 149U, 7U, 255U, 164U, 0U, 29U, 166U, 238U, 247U, 193U, 48U,
    0U, 22U, 227U, 200U, 70U, 73U, 207U, 234U, 15U, 149U, 246U, 22U, 0U, 0U, 50U,
    255U, 97U, 227U, 187U, 0U, 0U, 0U, 4U, 255U, 144U, 251U, 255U, 255U, 255U,
    255U, 255U, 255U, 161U, 234U, 189U, 48U, 48U, 48U, 48U, 48U, 30U, 168U, 232U,
    12U, 0U, 0U, 0U, 0U, 0U, 39U, 240U, 207U, 94U, 56U, 64U, 106U, 104U, 0U, 37U,
    162U, 229U, 252U, 240U, 197U, 90U, 0U, 0U, 0U, 124U, 223U, 251U, 240U, 197U,
    0U, 0U, 86U, 255U, 158U, 61U, 64U, 111U, 0U, 0U, 151U, 255U, 13U, 0U, 0U, 0U,
    0U, 0U, 163U, 255U, 0U, 0U, 0U, 0U, 255U, 255U, 255U, 255U, 255U, 255U, 255U,
    255U, 52U, 52U, 182U, 255U, 52U, 52U, 52U, 52U, 0U, 0U, 164U, 255U, 0U, 0U,
    0U, 0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U,
    0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U, 0U,
    0U, 0U, 164U, 255U, 0U, 0U, 0U, 0U, 0U, 0U, 164U, 255U, 0U, 0U, 0U, 0U, 255U,
    164U, 105U, 240U, 100U, 58U, 228U, 201U, 6U, 255U, 212U, 138U, 211U, 221U,
    174U, 138U, 255U, 66U, 255U, 229U, 6U, 167U, 255U, 70U, 73U, 255U, 90U, 255U,
    165U, 0U, 164U, 255U, 1U, 72U, 255U, 92U, 255U, 164U, 0U, 164U, 255U, 0U,
    72U, 255U, 92U, 255U, 164U, 0U, 164U, 255U, 0U, 72U, 255U, 92U, 255U, 164U,
    0U, 164U, 255U, 0U, 72U, 255U, 92U, 255U, 164U, 0U, 164U, 255U, 0U, 72U,
    255U, 92U, 255U, 164U, 0U, 164U, 255U, 0U, 72U, 255U, 92U, 255U, 164U, 75U,
    207U, 249U, 213U, 49U, 255U, 220U, 222U, 88U, 85U, 243U, 196U, 255U, 235U,
    31U, 0U, 0U, 177U, 247U, 255U, 164U, 0U, 0U, 0U, 164U, 255U, 255U, 164U, 0U,
    0U, 0U, 164U, 255U, 255U, 164U, 0U, 0U, 0U, 164U, 255U, 255U, 164U, 0U, 0U,
    0U, 164U, 255U, 255U, 164U, 0U, 0U, 0U, 164U, 255U, 255U, 164U, 0U, 0U, 0U,
    164U, 255U, 0U, 52U, 186U, 244U, 244U, 186U, 50U, 0U, 44U, 246U, 201U, 72U,
    72U, 201U, 244U, 42U, 170U, 246U, 21U, 0U, 0U, 21U, 246U, 168U, 233U, 187U,
    0U, 0U, 0U, 0U, 187U, 232U, 252U, 167U, 0U, 0U, 0U, 0U, 167U, 251U, 233U,
    186U, 0U, 0U, 0U, 0U, 185U, 232U, 170U, 245U, 20U, 0U, 0U, 16U, 243U, 169U,
    44U, 246U, 198U, 71U, 70U, 193U, 246U, 44U, 0U, 53U, 190U, 246U, 243U, 185U,
    51U, 0U, 255U, 164U, 45U, 181U, 242U, 255U, 162U, 255U, 205U, 225U, 106U,
    58U, 255U, 164U, 255U, 246U, 50U, 0U, 0U, 148U, 94U, 255U, 166U, 0U, 0U, 0U,
    0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 255U,
    164U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 128U, 82U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U,
    255U, 255U, 255U, 255U, 255U, 255U, 255U, 52U, 52U, 255U, 182U, 52U, 52U,
    52U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U,
    255U, 164U, 0U, 0U, 0U, 0U, 0U, 255U, 164U, 0U, 0U, 0U, 0U, 0U, 242U, 170U,
    0U, 0U, 0U, 0U, 0U, 192U, 241U, 96U, 57U, 85U, 0U, 0U, 48U, 201U, 248U, 248U,
    220U, 255U, 164U, 0U, 0U, 0U, 164U, 255U, 255U, 164U, 0U, 0U, 0U, 164U, 255U,
    255U, 164U, 0U, 0U, 0U, 164U, 255U, 255U, 164U, 0U, 0U, 0U, 164U, 255U, 255U,
    164U, 0U, 0U, 0U, 164U, 255U, 255U, 164U, 0U, 0U, 0U, 164U, 255U, 248U, 180U,
    0U, 0U, 47U, 243U, 255U, 198U, 247U, 110U, 117U, 232U, 210U, 255U, 51U, 214U,
    249U, 204U, 65U, 164U, 255U, 11U, 218U, 236U, 25U, 0U, 0U, 44U, 250U, 93U,
    0U, 0U, 54U, 251U, 184U, 1U, 3U, 201U, 182U, 0U, 0U, 0U, 0U, 125U, 255U,
    110U, 115U, 242U, 30U, 0U, 0U, 0U, 0U, 3U, 197U, 247U, 245U, 107U, 0U, 0U,
    0U, 0U, 0U, 0U, 73U, 255U, 242U, 9U, 0U, 0U, 0U, 0U, 0U, 6U, 208U, 221U,
    255U, 142U, 0U, 0U, 0U, 0U, 0U, 136U, 236U, 25U, 171U, 254U, 67U, 0U, 0U, 0U,
    60U, 253U, 83U, 0U, 18U, 228U, 228U, 17U, 0U, 13U, 222U, 161U, 0U, 0U, 0U,
    68U, 254U, 169U, 0U },
</code>
        <forward block="vipcellcounting_win_DisplayResults_InsertText2" type="data"/>
        <backward block="vipcellcounting_win_DisplayResults_Counter1_Bias" type="data">
          <var line="vipcellcounting_win_DisplayResults_Counter1_Bias_1" mode="output" name="vipcellcounting_win_DisplayResults_Counter1_Bias_1" port="vipcellcounting_win_DisplayResults_Counter1_Bias_1" type="uint16_T"/>
        </backward>
        <backward block="vipcellcounting_win_DisplayResults_DataTypeConversion" type="data"/>
        <backward block="vipcellcounting_win_Video" type="data">
          <var line="vipcellcounting_win_Video_1" mode="output" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_Video_1" size="228096" type="real32_T"/>
        </backward>
      </block>
      <block blocktype="S-Function" id="34" name="vipcellcounting_win_DisplayResults_InsertText2">
        <input line="vipcellcounting_win_DisplayResults_InsertText1_1" port="vipcellcounting_win_DisplayResults_InsertText2_1">
          <connect block="vipcellcounting_win_DisplayResults_InsertText1" port="vipcellcounting_win_DisplayResults_InsertText1_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_InsertText2_1" port="vipcellcounting_win_DisplayResults_InsertText2_1">
          <connect block="vipcellcounting_win_DisplayResults_ConverttoRGB" port="vipcellcounting_win_DisplayResults_ConverttoRGB_I"/>
        </output>
        <signal name="vipcellcounting_win_DisplayRe_n" size="228096" storage="vipcellcounting_win_B" type="real32_T"/>
        <state name="InsertText2_colorVectorDW" storage="vipcellcounting_win_DWork" type="real32_T"/>
        <state name="InsertText2_TxtLoc" size="2" storage="vipcellcounting_win_DWork" type="int32_T"/>
        <state name="InsertText2_TxtSelctn" storage="vipcellcounting_win_DWork" type="uint32_T"/>
        <state name="InsertText2_RepBuf" storage="vipcellcounting_win_DWork" type="uint8_T"/>
        <state name="InsertText2_VarHolder" storage="vipcellcounting_win_DWork" type="uint8_T"/>
        <state name="InsertText2_StringDataDW" size="92" storage="vipcellcounting_win_DWork" type="uint8_T"/>
        <param name="InsertText2_colorRTP" storage="vipcellcounting_win_P" type="real32_T"/>
        <param name="InsertText2_TxtOpacity" storage="vipcellcounting_win_P" type="real32_T"/>
        <param name="InsertText2_TxtLocation" size="2" storage="vipcellcounting_win_P" type="int32_T"/>
        <const_param name="InsertText2_GlyLBea" size="256" storage="vipcellcounting_win_ConstP" type="int32_T"/>
        <const_param name="InsertText2_GlyTBea" size="256" storage="vipcellcounting_win_ConstP" type="int32_T"/>
        <const_param name="InsertText2_GlyInde" size="256" storage="vipcellcounting_win_ConstP" type="uint32_T"/>
        <const_param name="InsertText2_GlyWidt" size="256" storage="vipcellcounting_win_ConstP" type="uint16_T"/>
        <const_param name="InsertText2_GlyHeig" size="256" storage="vipcellcounting_win_ConstP" type="uint16_T"/>
        <const_param name="InsertText2_GlyXAdv" size="256" storage="vipcellcounting_win_ConstP" type="uint16_T"/>
        <const_param name="InsertText2_StrArray" size="92" storage="vipcellcounting_win_ConstP" type="uint8_T"/>
        <const_param name="InsertText2_GlyDat" size="1487" storage="vipcellcounting_win_ConstP" type="uint8_T"/>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1735" type="task">  /* S-Function (sviptextrender): '&lt;S1&gt;/Insert Text2' */
  strLen = 1;
  while (strLen &gt; 0) {
    isSizeValid = TRUE;
    if (vipcellcounting_win_P.InsertText2_TxtOpacity == 0.0F) {
      isSizeValid = FALSE;
    }

    /* copy location to int32 container */
    line_idx_1 = vipcellcounting_win_P.InsertText2_TxtLocation[1] - 1;
    line_idx = vipcellcounting_win_P.InsertText2_TxtLocation[0] - 1;

    /* update the color/intensity */
    vipcellcounting_win_DWork.InsertText2_colorVectorDW =
      vipcellcounting_win_P.InsertText2_colorRTP;

    /* Saturate color values */
    if (vipcellcounting_win_DWork.InsertText2_colorVectorDW &lt; 0.0F) {
      vipcellcounting_win_DWork.InsertText2_colorVectorDW = 0.0F;
    } else {
      if (vipcellcounting_win_DWork.InsertText2_colorVectorDW &gt; 1.0F) {
        vipcellcounting_win_DWork.InsertText2_colorVectorDW = 1.0F;
      }
    }

    in = MWVIP_strlen(&amp;vipcellcounting_win_DWork.InsertText2_StringDataDW[0]);
    strLen = 0;
    if (isSizeValid) {
      /* put the pen at the beginning of the string */
      idxFillColor = line_idx;
      for (line_idx_0 = 0; line_idx_0 &lt; in; line_idx_0++) {
        if (vipcellcounting_win_DWork.InsertText2_StringDataDW[line_idx_0] == 10)
        {
          line_idx_1 += 15;
          idxFillColor = line_idx;
        } else {
          numShape =
            vipcellcounting_win_DWork.InsertText2_StringDataDW[line_idx_0];
          line_idx_2 = (int32_T)
            vipcellcounting_win_ConstP.InsertText2_GlyInde[numShape];
          if (!((vipcellcounting_win_ConstP.InsertText2_GlyWidt[numShape] != 0) &amp;&amp;
                (vipcellcounting_win_ConstP.InsertText2_GlyHeig[numShape] != 0) &amp;&amp;
                (vipcellcounting_win_ConstP.InsertText2_GlyXAdv[numShape] != 0)))
          {
            numShape = 32;
            line_idx_2 = 0;
          }

          opacityVal_0 = vipcellcounting_win_P.InsertText2_TxtOpacity;
          MWVIP_DrawText_I_single_AA
            (&amp;vipcellcounting_win_ConstP.InsertText2_GlyDat[line_idx_2],
             idxFillColor, line_idx_1 + 12,
             vipcellcounting_win_ConstP.InsertText2_GlyLBea[numShape],
             vipcellcounting_win_ConstP.InsertText2_GlyTBea[numShape],
             vipcellcounting_win_ConstP.InsertText2_GlyWidt[numShape],
             vipcellcounting_win_ConstP.InsertText2_GlyHeig[numShape], 528U,
             432U, &amp;vipcellcounting_win_B.vipcellcounting_win_DisplayRe_n[0],
             &amp;vipcellcounting_win_DWork.InsertText2_colorVectorDW,
             &amp;(&amp;opacityVal_0)[0U], FALSE);
          idxFillColor +=
            vipcellcounting_win_ConstP.InsertText2_GlyXAdv[numShape];
        }
      }
    }
  }

  /* End of S-Function (sviptextrender): '&lt;S1&gt;/Insert Text2' */
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2511" type="init">  {
    int_T i;
    for (i = 0; i &lt; 228096; i++) {
      vipcellcounting_win_B.vipcellcounting_win_DisplayRe_n[i] = 0.0F;
    }
  }
  {
    char_T *sErr;
    int32_T i;
    /* Start for S-Function (sviptextrender): '&lt;S1&gt;/Insert Text2' */
    memcpy(&amp;vipcellcounting_win_DWork.InsertText2_StringDataDW[0],
           vipcellcounting_win_ConstP.InsertText2_StrArray, 92U * sizeof(uint8_T));
  }
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2616" type="state">  vipcellcounting_win_DWork.InsertText2_colorVectorDW = 0.0F;

</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="32" type="param">  1.0F,
  1.0F,
  { 1, 417 },
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="86" type="const">  /* Computed Parameter: InsertText2_GlyLBea
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  /* Computed Parameter: InsertText2_GlyTBea
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 9, 9, 0, 0, 9,
    0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 10, 7, 10,
    7, 10, 9, 0, 0, 10, 0, 7, 7, 0, 0, 8, 7, 9, 7, 0, 7, 0, 7, 7, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  /* Computed Parameter: InsertText2_GlyInde
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 15U, 87U, 168U, 0U, 0U, 0U, 222U,
    249U, 0U, 0U, 309U, 0U, 0U, 0U, 0U, 0U, 0U, 399U, 0U, 0U, 0U, 0U, 480U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 561U, 0U, 610U, 652U, 732U, 781U, 841U, 913U, 983U,
    0U, 0U, 1010U, 0U, 1040U, 1089U, 0U, 0U, 1145U, 1185U, 1227U, 1263U, 0U,
    1312U, 0U, 1382U, 1445U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText2_GlyWidt
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 3U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 8U, 9U, 6U, 0U, 0U, 0U, 3U, 5U, 0U,
    0U, 10U, 0U, 0U, 0U, 0U, 0U, 0U, 9U, 0U, 0U, 0U, 0U, 9U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 7U, 0U, 6U, 8U, 7U, 6U, 8U, 7U, 3U, 0U, 0U, 3U, 0U, 7U, 8U, 0U, 0U,
    5U, 6U, 4U, 7U, 0U, 10U, 0U, 7U, 6U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText2_GlyHeig
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 5U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 9U, 9U, 9U, 0U, 0U, 0U, 9U, 12U, 0U,
    0U, 9U, 0U, 0U, 0U, 0U, 0U, 0U, 9U, 0U, 0U, 0U, 0U, 9U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 7U, 0U, 7U, 10U, 7U, 10U, 9U, 10U, 9U, 0U, 0U, 10U, 0U, 7U, 7U, 0U,
    0U, 8U, 7U, 9U, 7U, 0U, 7U, 0U, 9U, 7U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText2_GlyXAdv
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 4U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 4U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 8U, 9U, 6U, 0U, 0U, 0U, 3U, 4U, 0U,
    0U, 10U, 0U, 0U, 0U, 0U, 0U, 0U, 7U, 0U, 0U, 0U, 0U, 7U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 7U, 0U, 6U, 8U, 7U, 5U, 8U, 7U, 3U, 0U, 0U, 3U, 0U, 7U, 8U, 0U, 0U,
    5U, 6U, 4U, 7U, 0U, 9U, 0U, 6U, 7U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U },
  /* Computed Parameter: InsertText2_StrArray
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 68U, 97U, 116U, 97U, 32U, 115U, 101U, 116U, 32U, 99U, 111U, 117U, 114U, 116U,
    101U, 115U, 121U, 32U, 111U, 102U, 32U, 74U, 111U, 110U, 97U, 116U, 104U,
    97U, 110U, 32U, 89U, 111U, 117U, 110U, 103U, 32U, 97U, 110U, 100U, 32U, 77U,
    105U, 99U, 104U, 97U, 101U, 108U, 32U, 69U, 108U, 111U, 119U, 105U, 116U,
    122U, 44U, 32U, 67U, 97U, 108U, 105U, 102U, 111U, 114U, 110U, 105U, 97U, 32U,
    73U, 110U, 115U, 116U, 105U, 116U, 117U, 116U, 101U, 32U, 111U, 102U, 32U,
    84U, 101U, 99U, 104U, 110U, 111U, 108U, 111U, 103U, 121U, 0U },
  /* Computed Parameter: InsertText2_GlyDat
   * Referenced by: '&lt;S1&gt;/Insert Text2'
   */
  { 165U, 216U, 3U, 196U, 255U, 3U, 60U, 232U, 0U, 141U, 98U, 0U, 0U, 0U, 0U, 0U,
    0U, 69U, 193U, 238U, 240U, 220U, 140U, 0U, 80U, 240U, 84U, 4U, 2U, 43U, 86U,
    0U, 219U, 110U, 0U, 0U, 0U, 0U, 0U, 28U, 255U, 29U, 0U, 0U, 0U, 0U, 0U, 47U,
    255U, 7U, 0U, 0U, 0U, 0U, 0U, 30U, 255U, 29U, 0U, 0U, 0U, 0U, 0U, 0U, 223U,
    116U, 0U, 0U, 0U, 0U, 0U, 0U, 88U, 245U, 95U, 6U, 0U, 42U, 102U, 0U, 0U, 79U,
    199U, 242U, 239U, 208U, 107U, 52U, 255U, 240U, 243U, 242U, 191U, 60U, 0U, 0U,
    52U, 255U, 4U, 0U, 13U, 118U, 247U, 57U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 155U,
    184U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 74U, 242U, 0U, 52U, 255U, 4U, 0U, 0U,
    0U, 56U, 253U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 80U, 229U, 0U, 52U, 255U, 4U,
    0U, 0U, 0U, 162U, 159U, 0U, 52U, 255U, 4U, 0U, 11U, 114U, 235U, 32U, 0U, 52U,
    255U, 240U, 240U, 234U, 170U, 37U, 0U, 0U, 52U, 255U, 240U, 240U, 240U, 153U,
    52U, 255U, 4U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U,
    0U, 52U, 255U, 240U, 240U, 240U, 11U, 52U, 255U, 4U, 0U, 0U, 0U, 52U, 255U,
    4U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 52U, 255U, 240U, 240U, 240U, 213U,
    52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U,
    52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 0U, 0U, 52U,
    255U, 4U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 52U, 255U,
    4U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 52U, 255U, 4U, 0U,
    0U, 52U, 255U, 4U, 0U, 0U, 57U, 251U, 0U, 15U, 0U, 123U, 203U, 0U, 179U,
    248U, 230U, 57U, 0U, 10U, 26U, 2U, 0U, 0U, 52U, 255U, 211U, 0U, 0U, 0U, 0U,
    193U, 255U, 4U, 52U, 255U, 250U, 41U, 0U, 0U, 28U, 249U, 255U, 4U, 52U, 255U,
    183U, 127U, 0U, 0U, 115U, 181U, 255U, 4U, 52U, 255U, 96U, 213U, 0U, 0U, 204U,
    92U, 255U, 4U, 52U, 255U, 17U, 248U, 44U, 37U, 206U, 52U, 255U, 4U, 52U,
    255U, 4U, 175U, 130U, 127U, 117U, 52U, 255U, 4U, 52U, 255U, 4U, 88U, 216U,
    214U, 29U, 52U, 255U, 4U, 52U, 255U, 4U, 11U, 245U, 195U, 0U, 52U, 255U, 4U,
    52U, 255U, 4U, 0U, 76U, 51U, 0U, 52U, 255U, 4U, 67U, 240U, 240U, 243U, 255U,
    240U, 240U, 240U, 22U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U,
    52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U,
    52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U,
    52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U,
    52U, 255U, 4U, 0U, 0U, 0U, 2U, 210U, 146U, 0U, 0U, 0U, 81U, 208U, 3U, 0U,
    71U, 250U, 37U, 0U, 10U, 223U, 59U, 0U, 0U, 0U, 185U, 174U, 0U, 132U, 162U,
    0U, 0U, 0U, 0U, 45U, 252U, 97U, 234U, 24U, 0U, 0U, 0U, 0U, 0U, 157U, 255U,
    113U, 0U, 0U, 0U, 0U, 0U, 0U, 55U, 255U, 7U, 0U, 0U, 0U, 0U, 0U, 0U, 52U,
    255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 0U, 52U,
    255U, 4U, 0U, 0U, 0U, 0U, 95U, 213U, 241U, 233U, 101U, 0U, 0U, 66U, 28U, 0U,
    109U, 241U, 0U, 0U, 0U, 0U, 0U, 52U, 255U, 3U, 0U, 54U, 178U, 230U, 243U,
    255U, 4U, 17U, 244U, 116U, 16U, 52U, 255U, 4U, 39U, 255U, 46U, 6U, 123U,
    255U, 25U, 0U, 143U, 244U, 212U, 80U, 191U, 204U, 0U, 21U, 169U, 238U, 242U,
    174U, 0U, 189U, 187U, 17U, 1U, 28U, 26U, 255U, 44U, 0U, 0U, 0U, 47U, 255U,
    8U, 0U, 0U, 0U, 19U, 254U, 42U, 0U, 0U, 0U, 0U, 170U, 184U, 16U, 2U, 43U, 0U,
    14U, 166U, 242U, 233U, 153U, 0U, 0U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U,
    0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 18U, 174U,
    240U, 221U, 136U, 255U, 4U, 0U, 174U, 160U, 6U, 17U, 153U, 255U, 4U, 17U,
    254U, 36U, 0U, 0U, 52U, 255U, 4U, 47U, 255U, 6U, 0U, 0U, 52U, 255U, 4U, 34U,
    255U, 23U, 0U, 0U, 52U, 255U, 4U, 0U, 214U, 134U, 1U, 34U, 185U, 255U, 4U,
    0U, 45U, 205U, 241U, 204U, 97U, 255U, 4U, 0U, 24U, 185U, 241U, 201U, 29U, 0U,
    0U, 187U, 126U, 1U, 146U, 168U, 0U, 24U, 255U, 23U, 0U, 62U, 237U, 0U, 47U,
    255U, 240U, 240U, 241U, 247U, 2U, 20U, 254U, 23U, 0U, 0U, 0U, 0U, 0U, 169U,
    167U, 14U, 0U, 39U, 1U, 0U, 12U, 159U, 238U, 235U, 195U, 2U, 0U, 0U, 135U,
    241U, 235U, 52U, 0U, 29U, 255U, 38U, 6U, 9U, 0U, 51U, 255U, 4U, 0U, 0U, 26U,
    243U, 255U, 240U, 146U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 52U, 255U, 4U, 0U,
    0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 52U, 255U, 4U,
    0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 16U, 170U, 240U, 220U, 135U, 255U, 4U,
    0U, 173U, 175U, 10U, 14U, 155U, 255U, 4U, 19U, 254U, 43U, 0U, 0U, 52U, 255U,
    4U, 47U, 255U, 7U, 0U, 0U, 52U, 255U, 4U, 30U, 255U, 23U, 0U, 0U, 54U, 255U,
    3U, 0U, 204U, 133U, 1U, 35U, 191U, 254U, 0U, 0U, 38U, 200U, 241U, 206U, 104U,
    235U, 0U, 0U, 26U, 9U, 0U, 12U, 159U, 161U, 0U, 0U, 117U, 228U, 239U, 233U,
    161U, 17U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 0U,
    52U, 255U, 4U, 0U, 0U, 0U, 0U, 52U, 255U, 72U, 215U, 242U, 103U, 0U, 52U,
    255U, 179U, 19U, 94U, 236U, 0U, 52U, 255U, 23U, 0U, 53U, 255U, 3U, 52U, 255U,
    4U, 0U, 52U, 255U, 4U, 52U, 255U, 4U, 0U, 52U, 255U, 4U, 52U, 255U, 4U, 0U,
    52U, 255U, 4U, 52U, 255U, 4U, 0U, 52U, 255U, 4U, 48U, 240U, 3U, 0U, 0U, 0U,
    52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U,
    52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U,
    52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 4U,
    52U, 255U, 4U, 52U, 255U, 4U, 52U, 255U, 72U, 215U, 242U, 103U, 0U, 52U,
    255U, 179U, 19U, 94U, 236U, 0U, 52U, 255U, 23U, 0U, 53U, 255U, 3U, 52U, 255U,
    4U, 0U, 52U, 255U, 4U, 52U, 255U, 4U, 0U, 52U, 255U, 4U, 52U, 255U, 4U, 0U,
    52U, 255U, 4U, 52U, 255U, 4U, 0U, 52U, 255U, 4U, 0U, 22U, 174U, 239U, 234U,
    147U, 6U, 0U, 0U, 187U, 155U, 6U, 16U, 194U, 136U, 0U, 24U, 255U, 31U, 0U,
    0U, 80U, 231U, 0U, 48U, 255U, 6U, 0U, 0U, 55U, 254U, 0U, 23U, 255U, 30U, 0U,
    0U, 81U, 230U, 0U, 0U, 184U, 153U, 5U, 17U, 196U, 136U, 0U, 0U, 21U, 174U,
    239U, 233U, 145U, 6U, 0U, 0U, 0U, 0U, 0U, 3U, 52U, 255U, 92U, 227U, 94U, 52U,
    255U, 159U, 10U, 0U, 52U, 255U, 15U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 52U,
    255U, 4U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 52U, 255U, 4U, 0U, 0U, 0U, 138U,
    240U, 239U, 111U, 0U, 37U, 255U, 35U, 4U, 21U, 0U, 20U, 247U, 135U, 12U, 0U,
    0U, 0U, 69U, 217U, 235U, 75U, 0U, 0U, 0U, 2U, 135U, 234U, 0U, 28U, 51U, 0U,
    101U, 235U, 0U, 37U, 206U, 240U, 222U, 74U, 0U, 12U, 78U, 1U, 0U, 52U, 255U,
    4U, 0U, 243U, 255U, 240U, 161U, 52U, 255U, 4U, 0U, 52U, 255U, 4U, 0U, 52U,
    255U, 4U, 0U, 52U, 255U, 5U, 0U, 34U, 255U, 57U, 0U, 0U, 149U, 247U, 144U,
    52U, 255U, 4U, 0U, 52U, 255U, 4U, 52U, 255U, 4U, 0U, 52U, 255U, 4U, 52U,
    255U, 4U, 0U, 52U, 255U, 4U, 52U, 255U, 4U, 0U, 52U, 255U, 4U, 51U, 255U, 6U,
    0U, 80U, 255U, 4U, 28U, 255U, 73U, 67U, 212U, 255U, 4U, 0U, 145U, 247U, 194U,
    81U, 255U, 4U, 203U, 84U, 0U, 13U, 250U, 95U, 0U, 6U, 236U, 12U, 137U, 150U,
    0U, 80U, 243U, 157U, 0U, 69U, 186U, 0U, 71U, 215U, 0U, 151U, 130U, 220U, 0U,
    144U, 110U, 0U, 10U, 249U, 25U, 218U, 16U, 238U, 27U, 219U, 34U, 0U, 0U,
    194U, 129U, 194U, 0U, 177U, 129U, 214U, 0U, 0U, 0U, 128U, 243U, 123U, 0U,
    113U, 243U, 138U, 0U, 0U, 0U, 61U, 255U, 51U, 0U, 48U, 255U, 62U, 0U, 0U,
    184U, 135U, 0U, 0U, 25U, 240U, 13U, 89U, 226U, 2U, 0U, 122U, 158U, 0U, 8U,
    240U, 67U, 1U, 220U, 59U, 0U, 0U, 153U, 161U, 66U, 216U, 0U, 0U, 0U, 57U,
    243U, 177U, 117U, 0U, 0U, 0U, 0U, 216U, 251U, 23U, 0U, 0U, 0U, 0U, 138U,
    175U, 0U, 0U, 0U, 0U, 0U, 211U, 76U, 0U, 0U, 0U, 0U, 65U, 229U, 3U, 0U, 0U,
    0U, 195U, 240U, 240U, 240U, 255U, 127U, 0U, 0U, 0U, 102U, 237U, 32U, 0U, 0U,
    54U, 246U, 70U, 0U, 0U, 22U, 227U, 121U, 0U, 0U, 4U, 192U, 174U, 1U, 0U, 0U,
    143U, 215U, 13U, 0U, 0U, 0U, 255U, 247U, 240U, 240U, 240U, 138U }
,</code>
        <forward block="vipcellcounting_win_DisplayResults_ConverttoRGB_MatrixConcatenate" type="data"/>
        <backward block="vipcellcounting_win_DisplayResults_InsertText1" type="data"/>
      </block>
      <block blocktype="Logic" id="35" name="vipcellcounting_win_DisplayResults_LogicalOperator">
        <input line="vipcellcounting_win_DisplayResults_Resetcount_1" port="vipcellcounting_win_DisplayResults_LogicalOperator_1">
          <connect block="vipcellcounting_win_DisplayResults_Resetcount" port="vipcellcounting_win_DisplayResults_Resetcount_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_LogicalOperator_1" port="vipcellcounting_win_DisplayResults_LogicalOperator_1">
          <connect block="vipcellcounting_win_DisplayResults_Counter1" port="vipcellcounting_win_DisplayResults_Counter1_Reset"/>
        </output>
        <var line="vipcellcounting_win_DisplayResults_Resetcount_1" mode="input" name="vipcellcounting_win_Video_2" port="vipcellcounting_win_DisplayResults_LogicalOperator_1" type="boolean_T"/>
        <var line="vipcellcounting_win_DisplayResults_LogicalOperator_1" mode="output" name="vipcellcounting_win_DisplayResults_LogicalOperator_enable" port="vipcellcounting_win_DisplayResults_LogicalOperator_1" type="boolean_T"/>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1544" type="task">  /* Logic: '&lt;S1&gt;/Logical Operator' */
  vipcellcounting_win_DisplayResults_LogicalOperator_enable =
    !vipcellcounting_win_B.vipcellcounting_win_Video_2;

</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2574" type="init">  vipcellcounting_win_DisplayResults_LogicalOperator_enable = FALSE;

</code>
        <forward block="vipcellcounting_win_DisplayResults_Counter1" type="data"/>
        <backward block="vipcellcounting_win_Video" type="data">
          <var line="vipcellcounting_win_Video_2" mode="output" name="vipcellcounting_win_Video_2" port="vipcellcounting_win_Video_2" type="boolean_T"/>
        </backward>
      </block>
      <block blocktype="Mux" id="36" name="vipcellcounting_win_DisplayResults_Mux">
        <input line="vipcellcounting_win_DisplayResults_Counter1_1" port="vipcellcounting_win_DisplayResults_Mux_1">
          <connect block="vipcellcounting_win_DisplayResults_Counter1" port="vipcellcounting_win_DisplayResults_Counter1_Out1"/>
        </input>
        <input line="vipcellcounting_win_DisplayResults_DataTypeConversion_1" port="vipcellcounting_win_DisplayResults_Mux_2">
          <connect block="vipcellcounting_win_DisplayResults_DataTypeConversion" port="vipcellcounting_win_DisplayResults_DataTypeConversion_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_Mux_1" port="vipcellcounting_win_DisplayResults_Mux_1">
          <connect block="vipcellcounting_win_DisplayResults_InsertText1" port="vipcellcounting_win_DisplayResults_InsertText1_2"/>
        </output>
      </block>
      <block blocktype="Probe" id="37" name="vipcellcounting_win_DisplayResults_Probe">
        <input line="vipcellcounting_win_DisplayResults_Centroids_1" port="vipcellcounting_win_DisplayResults_Probe_1">
          <connect block="vipcellcounting_win_DisplayResults_Centroids" port="vipcellcounting_win_DisplayResults_Centroids_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_Probe_1" port="vipcellcounting_win_DisplayResults_Probe_1">
          <connect block="vipcellcounting_win_DisplayResults_Selector1" port="vipcellcounting_win_DisplayResults_Selector1_1"/>
        </output>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1622" type="task">  /* Probe: '&lt;S1&gt;/Probe' */
  vipcellcounting_win_DisplayResults_Probe_enable[0] = (real_T)
    vipcellcounting_win_DWork.CountCells_DIMS1[0];
  vipcellcounting_win_DisplayResults_Probe_enable[1] = (real_T)
    vipcellcounting_win_DWork.CountCells_DIMS1[1];

</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2520" type="init">  vipcellcounting_win_DisplayResults_Probe_enable[0] = 0.0;
  vipcellcounting_win_DisplayResults_Probe_enable[1] = 0.0;
</code>
        <forward block="vipcellcounting_win_DisplayResults_Selector1" type="data"/>
        <backward block="vipcellcounting_win_Subsystem_CountCells" type="data"/>
      </block>
      <block blocktype="S-Function" id="38" name="vipcellcounting_win_DisplayResults_Results">
        <input line="vipcellcounting_win_DisplayResults_DrawMarkers_1" port="vipcellcounting_win_DisplayResults_Results_1">
          <connect block="vipcellcounting_win_DisplayResults_DrawMarkers" port="vipcellcounting_win_DisplayResults_DrawMarkers_1"/>
        </input>
        <state name="Results_ToVideoDevice" size="133" storage="vipcellcounting_win_DWork" type="real_T"/>
        <state name="Results_VideoInfo" size="10" storage="vipcellcounting_win_DWork" type="real_T"/>
        <state name="Results_ID_Dwork" size="1025" storage="vipcellcounting_win_DWork" type="uint8_T"/>
        <param name="Results_P1" storage="vipcellcounting_win_P" type="real_T"/>
        <param name="Results_P2" storage="vipcellcounting_win_P" type="real_T"/>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2467" type="update">  /* Update for S-Function (svipwvo2): '&lt;S1&gt;/Results' */
  sErr = GetErrorBuffer(&amp;vipcellcounting_win_DWork.Results_ToVideoDevice[0U]);
  LibUpdate_Video(&amp;vipcellcounting_win_DWork.Results_ToVideoDevice[0U],
                  &amp;vipcellcounting_win_B.vipcellcounting_win_DisplayResu[0U],
                  GetNullPointer(), GetNullPointer(), 528, 432);
  if (*sErr != 0) {
    rtmSetErrorStatus(vipcellcounting_win_M, sErr);
    rtmSetStopRequested(vipcellcounting_win_M, 1);
  }

  /* End of Update for S-Function (svipwvo2): '&lt;S1&gt;/Results' */
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2622" type="init">  {
    char_T *sErr;
    int32_T i;
    /* Start for S-Function (svipwvo2): '&lt;S1&gt;/Results' */
    sErr = GetErrorBuffer(&amp;vipcellcounting_win_DWork.Results_ToVideoDevice[0U]);
    CreateHostLibrary("tovideodevice.dll",
                      &amp;vipcellcounting_win_DWork.Results_ToVideoDevice[0U]);
    if (*sErr == 0) {
      createVideoInfo(&amp;vipcellcounting_win_DWork.Results_VideoInfo[0U], 1U, 30.0,
                      30.0, "RGB ", 1, 3, 528, 432, 0U, 1, 1, NULL);
      LibCreate_Video(&amp;vipcellcounting_win_DWork.Results_ToVideoDevice[0U], 0,
                      "vipcellcounting_win/Display\nResults/Results", "Results",
                      0U, 1, &amp;vipcellcounting_win_DWork.Results_VideoInfo[0U],
                      1U, 115, 145, 0U, 528, 432, 0, 0U);
      LibStart(&amp;vipcellcounting_win_DWork.Results_ToVideoDevice[0U]);
    }

    if (*sErr != 0) {
      DestroyHostLibrary(&amp;vipcellcounting_win_DWork.Results_ToVideoDevice[0U]);
      if (*sErr != 0) {
        rtmSetErrorStatus(vipcellcounting_win_M, sErr);
        rtmSetStopRequested(vipcellcounting_win_M, 1);
      }
    }

    /* End of Start for S-Function (svipwvo2): '&lt;S1&gt;/Results' */
  }
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2583" type="state">  {
    int_T i;
    for (i = 0; i &lt; 133; i++) {
      vipcellcounting_win_DWork.Results_ToVideoDevice[i] = 0.0;
    }
  }
  {
    int_T i;
    for (i = 0; i &lt; 10; i++) {
      vipcellcounting_win_DWork.Results_VideoInfo[i] = 0.0;
    }
  }
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="24" type="param">  1.0,
  1.0,
</code>
        <backward block="vipcellcounting_win_DisplayResults_DrawMarkers" type="data"/>
      </block>
      <block blocktype="Selector" id="39" name="vipcellcounting_win_DisplayResults_Selector1">
        <input line="vipcellcounting_win_DisplayResults_Probe_1" port="vipcellcounting_win_DisplayResults_Selector1_1">
          <connect block="vipcellcounting_win_DisplayResults_Probe" port="vipcellcounting_win_DisplayResults_Probe_1"/>
        </input>
        <output line="vipcellcounting_win_DisplayResults_Selector1_1" port="vipcellcounting_win_DisplayResults_Selector1_1">
          <connect block="vipcellcounting_win_DisplayResults_DataTypeConversion" port="vipcellcounting_win_DisplayResults_DataTypeConversion_1"/>
        </output>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1628" type="task">  /* Selector: '&lt;S1&gt;/Selector1' */
  vipcellcounting_win_DisplayResults_Selector1_enable =
    vipcellcounting_win_DisplayResults_Probe_enable[0];

</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2522" type="init">  vipcellcounting_win_DisplayResults_Selector1_enable = 0.0;

</code>
        <forward block="vipcellcounting_win_DisplayResults_DataTypeConversion" type="data"/>
        <backward block="vipcellcounting_win_DisplayResults_Probe" type="data"/>
      </block>
    </sm:blocks>
  </block>
  <block blocktype="SubSystem" id="40" name="vipcellcounting_win_Info">
    <sm:blocks/>
  </block>
  <block blocktype="SubSystem" id="41" name="vipcellcounting_win_SegmentCells">
    <input line="vipcellcounting_win_Video_1" port="vipcellcounting_win_SegmentCells_VideoIn">
      <connect block="vipcellcounting_win_Video" port="vipcellcounting_win_Video_1"/>
    </input>
    <output line="vipcellcounting_win_SegmentCells_1" port="vipcellcounting_win_SegmentCells_Segmented">
      <connect block="vipcellcounting_win_Subsystem" port="vipcellcounting_win_Subsystem_In1"/>
    </output>
    <sm:blocks>
      <block blocktype="Inport" id="42" name="vipcellcounting_win_SegmentCells_VideoIn">
        <output line="vipcellcounting_win_SegmentCells_VideoIn_1" port="vipcellcounting_win_SegmentCells_VideoIn_1">
          <connect block="vipcellcounting_win_SegmentCells_Subsystem1" port="vipcellcounting_win_SegmentCells_Subsystem1_In1"/>
        </output>
      </block>
      <block blocktype="SubSystem" id="43" name="vipcellcounting_win_SegmentCells_Subsystem">
        <input line="vipcellcounting_win_SegmentCells_Subsystem1_1" port="vipcellcounting_win_SegmentCells_Subsystem_In1">
          <connect block="vipcellcounting_win_SegmentCells_Subsystem1" port="vipcellcounting_win_SegmentCells_Subsystem1_Out1"/>
        </input>
        <output line="vipcellcounting_win_SegmentCells_Subsystem_1" port="vipcellcounting_win_SegmentCells_Subsystem_Out1">
          <connect block="vipcellcounting_win_SegmentCells_Segmented" port="vipcellcounting_win_SegmentCells_Segmented_1"/>
        </output>
        <sm:blocks>
          <block blocktype="Inport" id="44" name="vipcellcounting_win_SegmentCells_Subsystem_In1">
            <output line="vipcellcounting_win_SegmentCells_Subsystem_In1_1" port="vipcellcounting_win_SegmentCells_Subsystem_In1_1">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold" port="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1"/>
            </output>
          </block>
          <block blocktype="S-Function" id="45" name="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold">
            <input line="vipcellcounting_win_SegmentCells_Subsystem_In1_1" port="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem_In1" port="vipcellcounting_win_SegmentCells_Subsystem_In1_1"/>
            </input>
            <output line="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1" port="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem_Out1" port="vipcellcounting_win_SegmentCells_Subsystem_Out1_1"/>
            </output>
            <var line="vipcellcounting_win_SegmentCells_Subsystem_In1_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" port="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1" size="228096" type="real32_T"/>
            <signal name="vipcellcounting_win_SegmentCe_h" size="228096" storage="vipcellcounting_win_B" type="boolean_T"/>
            <param name="Autothreshold_FACTOR_RTP" storage="vipcellcounting_win_P" type="real32_T"/>
            <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="26" type="param">  0.8F,
</code>
            <forward block="vipcellcounting_win_Subsystem_CountCells" type="data"/>
            <backward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2" type="data">
              <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" size="228096" type="real32_T"/>
            </backward>
          </block>
          <block blocktype="Outport" id="46" name="vipcellcounting_win_SegmentCells_Subsystem_Out1">
            <input line="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1" port="vipcellcounting_win_SegmentCells_Subsystem_Out1_1">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold" port="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1"/>
            </input>
          </block>
        </sm:blocks>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1612" type="task">  /* Outputs for Atomic SubSystem: '&lt;S2&gt;/Subsystem' */
  vipcellcounting_win_Subsystem();

  /* End of Outputs for SubSystem: '&lt;S2&gt;/Subsystem' */
</code>
      </block>
      <block blocktype="SubSystem" id="47" name="vipcellcounting_win_SegmentCells_Subsystem1">
        <input line="vipcellcounting_win_SegmentCells_VideoIn_1" port="vipcellcounting_win_SegmentCells_Subsystem1_In1">
          <connect block="vipcellcounting_win_SegmentCells_VideoIn" port="vipcellcounting_win_SegmentCells_VideoIn_1"/>
        </input>
        <output line="vipcellcounting_win_SegmentCells_Subsystem1_1" port="vipcellcounting_win_SegmentCells_Subsystem1_Out1">
          <connect block="vipcellcounting_win_SegmentCells_Subsystem" port="vipcellcounting_win_SegmentCells_Subsystem_In1"/>
        </output>
        <sm:blocks>
          <block blocktype="Inport" id="48" name="vipcellcounting_win_SegmentCells_Subsystem1_In1">
            <output line="vipcellcounting_win_SegmentCells_Subsystem1_In1_1" port="vipcellcounting_win_SegmentCells_Subsystem1_In1_1">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I"/>
            </output>
          </block>
          <block blocktype="SubSystem" id="49" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells">
            <input line="vipcellcounting_win_SegmentCells_Subsystem1_In1_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem1_In1" port="vipcellcounting_win_SegmentCells_Subsystem1_In1_1"/>
            </input>
            <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Out">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem1_Out1" port="vipcellcounting_win_SegmentCells_Subsystem1_Out1_1"/>
            </output>
            <sm:blocks>
              <block blocktype="Inport" id="50" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I">
                <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1"/>
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1"/>
                </output>
              </block>
              <block blocktype="S-Function" id="51" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation">
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1"/>
                </input>
                <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_2"/>
                </output>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1" mode="input" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1" size="228096" type="real32_T"/>
                <state name="Dilation_ONE_PAD_IMG_DW" size="240745" storage="vipcellcounting_win_DWork" type="real32_T"/>
                <state name="Dilation_TWO_PAD_IMG_DW" size="240745" storage="vipcellcounting_win_DWork" type="real32_T"/>
                <state name="Dilation_NUMNONZ_DW" size="2" storage="vipcellcounting_win_DWork" type="int32_T"/>
                <state name="Dilation_STREL_DW" size="2" storage="vipcellcounting_win_DWork" type="int32_T"/>
                <state name="Dilation_DILATE_OFF_DW" size="14" storage="vipcellcounting_win_DWork" type="int32_T"/>
                <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract" type="data"/>
                <backward block="vipcellcounting_win_Video" type="data">
                  <var line="vipcellcounting_win_Video_1" mode="output" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_Video_1" size="228096" type="real32_T"/>
                </backward>
              </block>
              <block blocktype="S-Function" id="52" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1">
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1"/>
                </input>
                <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1"/>
                </output>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1" size="228096" type="real32_T"/>
                <signal name="vipcellcounting_win_SegmentCell" size="228096" storage="vipcellcounting_win_B" type="real32_T"/>
                <state name="Dilation1_ONE_PAD_IMG_DW" size="240745" storage="vipcellcounting_win_DWork" type="real32_T"/>
                <state name="Dilation1_TWO_PAD_IMG_DW" size="240745" storage="vipcellcounting_win_DWork" type="real32_T"/>
                <state name="Dilation1_NUMNONZ_DW" size="2" storage="vipcellcounting_win_DWork" type="int32_T"/>
                <state name="Dilation1_STREL_DW" size="2" storage="vipcellcounting_win_DWork" type="int32_T"/>
                <state name="Dilation1_DILATE_OFF_DW" size="14" storage="vipcellcounting_win_DWork" type="int32_T"/>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2515" type="init">  {
    int_T i;
    for (i = 0; i &lt; 228096; i++) {
      vipcellcounting_win_B.vipcellcounting_win_SegmentCell[i] = 0.0F;
    }
  }
</code>
                <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2" type="data"/>
                <backward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" size="228096" type="real32_T"/>
                </backward>
              </block>
              <block blocktype="Gain" id="53" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain">
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1"/>
                </input>
                <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1"/>
                </output>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1" mode="input" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" size="228096" type="real32_T"/>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" size="228096" type="real32_T"/>
                <param name="Gain_Gain" storage="vipcellcounting_win_P" type="real32_T"/>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2535" type="init">  {
    int_T i;
    for (i = 0; i &lt; 228096; i++) {
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1[i] = 0.0F;
    }
  }
</code>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="27" type="param">  2.0F,
</code>
                <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" size="228096" type="real32_T"/>
                </forward>
                <backward block="vipcellcounting_win_Video" type="data">
                  <var line="vipcellcounting_win_Video_1" mode="output" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_Video_1" size="228096" type="real32_T"/>
                </backward>
              </block>
              <block blocktype="Saturate" id="54" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation">
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1"/>
                </input>
                <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1"/>
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_2"/>
                </output>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" size="228096" type="real32_T"/>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" size="228096" type="real32_T"/>
                <param name="Saturation_UpperSat" storage="vipcellcounting_win_P" type="real32_T"/>
                <param name="Saturation_LowerSat" storage="vipcellcounting_win_P" type="real32_T"/>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2550" type="init">  {
    int_T i;
    for (i = 0; i &lt; 228096; i++) {
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1[i] =
        0.0F;
    }
  }
</code>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="28" type="param">  1.0F,
  0.0F,
</code>
                <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1" size="228096" type="real32_T"/>
                </forward>
                <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_2" size="228096" type="real32_T"/>
                </forward>
                <backward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" size="228096" type="real32_T"/>
                </backward>
              </block>
              <block blocktype="Sum" id="55" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract">
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1"/>
                </input>
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_2">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1"/>
                </input>
                <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1"/>
                </output>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" size="228096" type="real32_T"/>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" size="228096" type="real32_T"/>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2542" type="init">  {
    int_T i;
    for (i = 0; i &lt; 228096; i++) {
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1[i] =
        0.0F;
    }
  }
</code>
                <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" size="228096" type="real32_T"/>
                </forward>
                <backward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation" type="data"/>
                <backward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" size="228096" type="real32_T"/>
                </backward>
              </block>
              <block blocktype="Sum" id="56" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2">
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1_1"/>
                </input>
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_2">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1"/>
                </input>
                <output line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Out" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Out_1"/>
                </output>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_2" size="228096" type="real32_T"/>
                <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" size="228096" type="real32_T"/>
                <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2558" type="init">  {
    int_T i;
    for (i = 0; i &lt; 228096; i++) {
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1[i] =
        0.0F;
    }
  }
</code>
                <forward block="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem_In1_1" mode="input" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" port="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold_1" size="228096" type="real32_T"/>
                </forward>
                <backward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation1" type="data"/>
                <backward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation" type="data">
                  <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" mode="output" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1" size="228096" type="real32_T"/>
                </backward>
              </block>
              <block blocktype="Outport" id="57" name="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Out">
                <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Out_1">
                  <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1"/>
                </input>
              </block>
            </sm:blocks>
          </block>
          <block blocktype="Outport" id="58" name="vipcellcounting_win_SegmentCells_Subsystem1_Out1">
            <input line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_1" port="vipcellcounting_win_SegmentCells_Subsystem1_Out1_1">
              <connect block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Out"/>
            </input>
          </block>
        </sm:blocks>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1607" type="task">  /* Outputs for Atomic SubSystem: '&lt;S2&gt;/Subsystem1' */
  vipcellcounting_win_Subsystem1();

  /* End of Outputs for SubSystem: '&lt;S2&gt;/Subsystem1' */
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2680" type="init">  {
    char_T *sErr;
    int32_T i;
    /* Start for Atomic SubSystem: '&lt;S2&gt;/Subsystem1' */
    vipcellcountin_Subsystem1_Start();

    /* End of Start for SubSystem: '&lt;S2&gt;/Subsystem1' */
  }
</code>
      </block>
      <block blocktype="Outport" id="59" name="vipcellcounting_win_SegmentCells_Segmented">
        <input line="vipcellcounting_win_SegmentCells_Subsystem_1" port="vipcellcounting_win_SegmentCells_Segmented_1">
          <connect block="vipcellcounting_win_SegmentCells_Subsystem" port="vipcellcounting_win_SegmentCells_Subsystem_Out1"/>
        </input>
      </block>
    </sm:blocks>
  </block>
  <block blocktype="SubSystem" id="60" name="vipcellcounting_win_Subsystem">
    <input line="vipcellcounting_win_SegmentCells_1" port="vipcellcounting_win_Subsystem_In1">
      <connect block="vipcellcounting_win_SegmentCells" port="vipcellcounting_win_SegmentCells_Segmented"/>
    </input>
    <output line="vipcellcounting_win_Subsystem_1" port="vipcellcounting_win_Subsystem_Out1">
      <connect block="vipcellcounting_win_DisplayResults" port="vipcellcounting_win_DisplayResults_Centroids"/>
    </output>
    <sm:blocks>
      <block blocktype="Inport" id="61" name="vipcellcounting_win_Subsystem_In1">
        <output line="vipcellcounting_win_Subsystem_In1_1" port="vipcellcounting_win_Subsystem_In1_1">
          <connect block="vipcellcounting_win_Subsystem_CountCells" port="vipcellcounting_win_Subsystem_CountCells_1"/>
        </output>
      </block>
      <block blocktype="S-Function" id="62" name="vipcellcounting_win_Subsystem_CountCells">
        <input line="vipcellcounting_win_Subsystem_In1_1" port="vipcellcounting_win_Subsystem_CountCells_1">
          <connect block="vipcellcounting_win_Subsystem_In1" port="vipcellcounting_win_Subsystem_In1_1"/>
        </input>
        <output line="vipcellcounting_win_Subsystem_CountCells_1" port="vipcellcounting_win_Subsystem_CountCells_1">
          <connect block="vipcellcounting_win_Subsystem_Out1" port="vipcellcounting_win_Subsystem_Out1_1"/>
        </output>
        <signal name="vipcellcounting_win_Subsystem_C" size="3000" storage="vipcellcounting_win_B" type="real32_T"/>
        <state name="CountCells_STACK_DW" size="228096" storage="vipcellcounting_win_DWork" type="uint32_T"/>
        <state name="CountCells_PAD_DW" size="230020" storage="vipcellcounting_win_DWork" type="uint16_T"/>
        <state name="CountCells_N_PIXLIST_DW" size="228096" storage="vipcellcounting_win_DWork" type="int16_T"/>
        <state name="CountCells_M_PIXLIST_DW" size="228096" storage="vipcellcounting_win_DWork" type="int16_T"/>
        <state name="CountCells_NUM_PIX_DW" size="1500" storage="vipcellcounting_win_DWork" type="uint32_T"/>
        <state name="CountCells_DIMS1" size="2" storage="vipcellcounting_win_DWork" type="int32_T"/>
        <param name="CountCells_MINAREA_RTP" storage="vipcellcounting_win_P" type="uint32_T"/>
        <param name="CountCells_MAXAREA_RTP" storage="vipcellcounting_win_P" type="uint32_T"/>
        <const_param name="CountCells_WALKER_RTP" size="8" storage="vipcellcounting_win_ConstP" type="int32_T"/>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2507" type="init">  {
    int_T i;
    for (i = 0; i &lt; 3000; i++) {
      vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[i] = 0.0F;
    }
  }
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="41" type="param">  7U,
  300U,
</code>
        <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win_data.c" line="52" type="const">  /* Computed Parameter: CountCells_WALKER_RTP
   * Referenced by: '&lt;S3&gt;/Count Cells'
   */
  { -1, 433, 434, 435, 1, -433, -434, -435 },
</code>
        <forward block="vipcellcounting_win_DisplayResults_DrawMarkers" type="data"/>
        <forward block="vipcellcounting_win_DisplayResults_Probe" type="data"/>
        <backward block="vipcellcounting_win_SegmentCells_Subsystem_Autothreshold" type="data"/>
      </block>
      <block blocktype="Outport" id="63" name="vipcellcounting_win_Subsystem_Out1">
        <input line="vipcellcounting_win_Subsystem_CountCells_1" port="vipcellcounting_win_Subsystem_Out1_1">
          <connect block="vipcellcounting_win_Subsystem_CountCells" port="vipcellcounting_win_Subsystem_CountCells_1"/>
        </input>
      </block>
    </sm:blocks>
    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1617" type="task">  /* Outputs for Atomic SubSystem: '&lt;Root&gt;/Subsystem' */
  vipcellcounting_win_Subsystem_c();

  /* End of Outputs for SubSystem: '&lt;Root&gt;/Subsystem' */
</code>
  </block>
  <block blocktype="S-Function" id="64" name="vipcellcounting_win_Video">
    <output line="vipcellcounting_win_Video_1" port="vipcellcounting_win_Video_1">
      <connect block="vipcellcounting_win_DisplayResults" port="vipcellcounting_win_DisplayResults_VideoIn"/>
      <connect block="vipcellcounting_win_SegmentCells" port="vipcellcounting_win_SegmentCells_VideoIn"/>
    </output>
    <output line="vipcellcounting_win_Video_2" port="vipcellcounting_win_Video_2">
      <connect block="vipcellcounting_win_DisplayResults" port="vipcellcounting_win_DisplayResults_Resetcount"/>
    </output>
    <var line="vipcellcounting_win_Video_1" mode="output" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_Video_1" size="228096" type="real32_T"/>
    <var line="vipcellcounting_win_Video_2" mode="output" name="vipcellcounting_win_Video_2" port="vipcellcounting_win_Video_2" type="boolean_T"/>
    <signal name="vipcellcounting_win_Video_1" size="228096" storage="vipcellcounting_win_B" type="real32_T"/>
    <signal name="vipcellcounting_win_Video_2" storage="vipcellcounting_win_B" type="boolean_T"/>
    <state name="Video_HostLib" size="133" storage="vipcellcounting_win_DWork" type="real_T"/>
    <state name="Video_AudioInfo" size="5" storage="vipcellcounting_win_DWork" type="real_T"/>
    <state name="Video_VideoInfo" size="10" storage="vipcellcounting_win_DWork" type="real_T"/>
    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="1530" type="task">  /* S-Function (sdspwmmfi2): '&lt;Root&gt;/Video' */
  sErr = GetErrorBuffer(&amp;vipcellcounting_win_DWork.Video_HostLib[0U]);
  source_R = (void *)&amp;vipcellcounting_win_B.vipcellcounting_win_Video_1[0U];
  eof = (void *)&amp;(&amp;vipcellcounting_win_B.vipcellcounting_win_Video_2)[0U];
  LibOutputs_FromMMFile(&amp;vipcellcounting_win_DWork.Video_HostLib[0U], eof,
                        GetNullPointer(), source_R, GetNullPointer(),
                        GetNullPointer());
  if (*sErr != 0) {
    rtmSetErrorStatus(vipcellcounting_win_M, sErr);
    rtmSetStopRequested(vipcellcounting_win_M, 1);
  }

  /* End of S-Function (sdspwmmfi2): '&lt;Root&gt;/Video' */
</code>
    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2499" type="init">  {
    int_T i;
    for (i = 0; i &lt; 228096; i++) {
      vipcellcounting_win_B.vipcellcounting_win_Video_1[i] = 0.0F;
    }
  }
  {
    char_T *sErr;
    int32_T i;
    /* Start for S-Function (sdspwmmfi2): '&lt;Root&gt;/Video' */
    sErr = GetErrorBuffer(&amp;vipcellcounting_win_DWork.Video_HostLib[0U]);
    CreateHostLibrary("frommmfile.dll",
                      &amp;vipcellcounting_win_DWork.Video_HostLib[0U]);
    createAudioInfo(&amp;vipcellcounting_win_DWork.Video_AudioInfo[0U], 0U, 0U, 0.0,
                    0, 0, 0, 0, 0);
    createVideoInfo(&amp;vipcellcounting_win_DWork.Video_VideoInfo[0U], 1U,
                    30.00003000003, 30.00003000003, "RGB ", 1, 1, 528, 432, 0U,
                    1, 1, 0);
    if (*sErr == 0) {
      LibCreate_FromMMFile(&amp;vipcellcounting_win_DWork.Video_HostLib[0U], 0,
                           "C:\\Program Files\\MATLAB\\R2012a\\toolbox\\vision\\visiondemos\\ecolicells.avi",
                           "", &amp;vipcellcounting_win_DWork.Video_AudioInfo[0U],
                           &amp;vipcellcounting_win_DWork.Video_VideoInfo[0U], 0U,
                           1U, 2U, 0U, 0U);
      LibStart(&amp;vipcellcounting_win_DWork.Video_HostLib[0U]);
    }

    if (*sErr != 0) {
      DestroyHostLibrary(&amp;vipcellcounting_win_DWork.Video_HostLib[0U]);
      if (*sErr != 0) {
        rtmSetErrorStatus(vipcellcounting_win_M, sErr);
        rtmSetStopRequested(vipcellcounting_win_M, 1);
      }
    }

    /* End of Start for S-Function (sdspwmmfi2): '&lt;Root&gt;/Video' */
  }
  /* InitializeConditions for S-Function (sdspwmmfi2): '&lt;Root&gt;/Video' */
  vipcellcounting_win_B.vipcellcounting_win_Video_2 = FALSE;
  LibReset(&amp;vipcellcounting_win_DWork.Video_HostLib[0U]);
</code>
    <code file="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" line="2597" type="state">  {
    int_T i;
    for (i = 0; i &lt; 133; i++) {
      vipcellcounting_win_DWork.Video_HostLib[i] = 0.0;
    }
  }
  {
    int_T i;
    for (i = 0; i &lt; 5; i++) {
      vipcellcounting_win_DWork.Video_AudioInfo[i] = 0.0;
    }
  }
  {
    int_T i;
    for (i = 0; i &lt; 10; i++) {
      vipcellcounting_win_DWork.Video_VideoInfo[i] = 0.0;
    }
  }
</code>
    <forward block="vipcellcounting_win_DisplayResults_InsertText1" type="data">
      <var line="vipcellcounting_win_DisplayResults_VideoIn_1" mode="input" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_DisplayResults_InsertText1_1" size="228096" type="real32_T"/>
    </forward>
    <forward block="vipcellcounting_win_DisplayResults_LogicalOperator" type="data">
      <var line="vipcellcounting_win_DisplayResults_Resetcount_1" mode="input" name="vipcellcounting_win_Video_2" port="vipcellcounting_win_DisplayResults_LogicalOperator_1" type="boolean_T"/>
    </forward>
    <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation" type="data">
      <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1" mode="input" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Dilation_1" size="228096" type="real32_T"/>
    </forward>
    <forward block="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain" type="data">
      <var line="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_I_1" mode="input" name="vipcellcounting_win_Video_1" port="vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1" size="228096" type="real32_T"/>
    </forward>
  </block>
  <code type="common-init">  rt_InitInfAndNaN(sizeof(real_T));
</code>
  <code type="rt-macro">/* Macros for accessing real-time model data structure */
#ifndef rtmGetErrorStatus
# define rtmGetErrorStatus(rtm)        ((rtm)-&gt;errorStatus)
#endif

#ifndef rtmSetErrorStatus
# define rtmSetErrorStatus(rtm, val)   ((rtm)-&gt;errorStatus = (val))
#endif

#ifndef rtmGetStopRequested
# define rtmGetStopRequested(rtm)      ((rtm)-&gt;Timing.stopRequestedFlag)
#endif

#ifndef rtmSetStopRequested
# define rtmSetStopRequested(rtm, val) ((rtm)-&gt;Timing.stopRequestedFlag = (val))
#endif

#ifndef rtmGetStopRequestedPtr
# define rtmGetStopRequestedPtr(rtm)   (&amp;((rtm)-&gt;Timing.stopRequestedFlag))
#endif

</code>
  <code type="rt-type">/* Real-time Model Data Structure */
struct RT_MODEL_vipcellcounting_win {
  const char_T * volatile errorStatus;

  /*
   * Timing:
   * The following substructure contains information regarding
   * the timing information for the model.
   */
  struct {
    boolean_T stopRequestedFlag;
  } Timing;
};
</code>
  <code type="rt-init">  /* initialize real-time model */
  (void) memset((void *)vipcellcounting_win_M, 0,
                sizeof(RT_MODEL_vipcellcounting_win));
</code>
  <code type="autovars">  char_T *sErr;
  void *source_R;
  void *eof;
  int32_T indxLocation;
  int32_T indxColor;
  int32_T opacityIndx;
  real32_T opacityVal;
  int32_T strLen;
  int32_T strPtrIdx;
  real32_T opacityVal_0;
  boolean_T isSizeValid;
  int32_T numShape;
  int32_T size;
  int32_T in;
  int32_T i;
  boolean_T visited;
  boolean_T visited_0;
  boolean_T done;
  int32_T idxFillColor;
  int32_T line_idx;
  int32_T line_idx_0;
  int32_T line_idx_1;
  int32_T line_idx_2;
  int32_T line_idx_3;
  int32_T line_idx_4;
  int32_T line_idx_5;
  int32_T line_idx_6;
  real_T tmp;
  real32_T v;

</code>
  <object kind="rtm-extern" name="vipcellcounting_win_M" type="extern struct RT_MODEL_vipcellcounting_win * const"/>
  <object kind="rtm-object" name="vipcellcounting_win_M_" type="RT_MODEL_vipcellcounting_win"/>
  <object kind="rtm-pointer" name="vipcellcounting_win_M" type="RT_MODEL_vipcellcounting_win * const" value="&amp;vipcellcounting_win_M_"/>
  <includes file="&lt;math.h>" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="0"/>
  <includes file="&lt;string.h>" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="1"/>
  <includes file="&quot;rtwtypes.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="2"/>
  <includes file="&quot;HostLib_Video.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="3"/>
  <includes file="&quot;HostLib_Multimedia.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="4"/>
  <includes file="&quot;HostLib_MMFile.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="5"/>
  <includes file="&quot;vipdrawtext_rt.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="6"/>
  <includes file="&quot;rt_nonfinite.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="7"/>
  <includes file="&quot;rtGetInf.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="8"/>
  <includes file="&quot;rtGetNaN.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="9"/>
  <includes file="&quot;vipcellcounting_win_types.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.h" index="10"/>
  <includes file="&quot;vipcellcounting_win_private.h&quot;" from="models2/cell/vipcellcounting_win_ert_rtw/vipcellcounting_win.c" index="11"/>
  <function name="div_s32_floor" type="defn">
    <code line="57" type="func">int32_T div_s32_floor(int32_T numerator, int32_T denominator)
{
  int32_T quotient;
  uint32_T absNumerator;
  uint32_T absDenominator;
  uint32_T tempAbsQuotient;
  uint32_T quotientNeedsNegation;
  if (denominator == 0) {
    quotient = numerator &gt;= 0 ? MAX_int32_T : MIN_int32_T;

    /* Divide by zero handler */
  } else {
    absNumerator = (uint32_T)(numerator &gt;= 0 ? numerator : -numerator);
    absDenominator = (uint32_T)(denominator &gt;= 0 ? denominator : -denominator);
    quotientNeedsNegation = ((numerator &lt; 0) != (denominator &lt; 0));
    tempAbsQuotient = absDenominator == 0 ? MAX_uint32_T : absNumerator /
      absDenominator;
    if (quotientNeedsNegation) {
      absNumerator %= absDenominator;
      if (absNumerator &gt; 0) {
        tempAbsQuotient++;
      }
    }

    quotient = quotientNeedsNegation ? -(int32_T)tempAbsQuotient : (int32_T)
      tempAbsQuotient;
  }

  return quotient;
}
</code>
  </function>
  <function name="vipcellcountin_Subsystem1_Start" type="defn">
    <code line="162" type="func">/* Start for atomic system: '&lt;S2&gt;/Subsystem1' */
void vipcellcountin_Subsystem1_Start(void)
{
  int32_T previous;
  int32_T step;
  boolean_T isValid;
  int32_T idxOut;
  int32_T curNumNonZ;
  int32_T n;
  int32_T m;

  /* Start for S-Function (svipmorphop): '&lt;S11&gt;/Dilation' */
  previous = 0;
  step = 0;
  curNumNonZ = 0;
  isValid = TRUE;
  idxOut = 0;
  n = 0;
  while (n &lt; 1) {
    m = 0;
    while (m &lt; 7) {
      if (curNumNonZ == 0) {
        curNumNonZ = 1;
      } else if (curNumNonZ == 1) {
        step = idxOut - previous;
        curNumNonZ = 2;
      } else if (idxOut - previous == step) {
        curNumNonZ++;
      } else {
        isValid = FALSE;
        m = 7;
        n = 1;
      }

      previous = idxOut;
      idxOut++;
      m++;
    }

    idxOut += 438;
    n++;
  }

  if (isValid &amp;&amp; (curNumNonZ &gt;= 4)) {
    if (step == 445) {
      vipcellcounting_win_DWork.Dilation_STREL_DW[0] = 2;
    } else if (step == 1) {
      vipcellcounting_win_DWork.Dilation_STREL_DW[0] = 1;
    } else {
      vipcellcounting_win_DWork.Dilation_STREL_DW[0] = 0;
    }
  } else {
    vipcellcounting_win_DWork.Dilation_STREL_DW[0] = 0;
  }

  curNumNonZ = 0;
  isValid = TRUE;
  idxOut = 0;
  n = 0;
  while (n &lt; 7) {
    m = 0;
    while (m &lt; 1) {
      if (curNumNonZ == 0) {
        curNumNonZ = 1;
      } else if (curNumNonZ == 1) {
        step = idxOut - previous;
        curNumNonZ = 2;
      } else if (idxOut - previous == step) {
        curNumNonZ++;
      } else {
        isValid = FALSE;
        m = 1;
        n = 7;
      }

      previous = idxOut;
      idxOut++;
      m++;
    }

    idxOut += 444;
    n++;
  }

  if (isValid &amp;&amp; (curNumNonZ &gt;= 4)) {
    if (step == 445) {
      vipcellcounting_win_DWork.Dilation_STREL_DW[1] = 2;
    } else if (step == 1) {
      vipcellcounting_win_DWork.Dilation_STREL_DW[1] = 1;
    } else {
      vipcellcounting_win_DWork.Dilation_STREL_DW[1] = 0;
    }
  } else {
    vipcellcounting_win_DWork.Dilation_STREL_DW[1] = 0;
  }

  previous = 0;
  curNumNonZ = 0;
  n = 0;
  while (n &lt; 1) {
    for (m = 0; m &lt; 7; m++) {
      vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[previous] = m;
      curNumNonZ++;
      previous++;
    }

    n = 1;
  }

  vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0] = curNumNonZ;
  curNumNonZ = 0;
  for (n = 0; n &lt; 7; n++) {
    m = 0;
    while (m &lt; 1) {
      vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[previous] = n * 445;
      curNumNonZ++;
      previous++;
      m = 1;
    }
  }

  vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1] = curNumNonZ;

  /* End of Start for S-Function (svipmorphop): '&lt;S11&gt;/Dilation' */

  /* Start for S-Function (svipmorphop): '&lt;S11&gt;/Dilation1' */
  previous = 0;
  step = 0;
  curNumNonZ = 0;
  isValid = TRUE;
  idxOut = 0;
  n = 0;
  while (n &lt; 1) {
    m = 0;
    while (m &lt; 7) {
      if (curNumNonZ == 0) {
        curNumNonZ = 1;
      } else if (curNumNonZ == 1) {
        step = idxOut - previous;
        curNumNonZ = 2;
      } else if (idxOut - previous == step) {
        curNumNonZ++;
      } else {
        isValid = FALSE;
        m = 7;
        n = 1;
      }

      previous = idxOut;
      idxOut++;
      m++;
    }

    idxOut += 438;
    n++;
  }

  if (isValid &amp;&amp; (curNumNonZ &gt;= 4)) {
    if (step == 445) {
      vipcellcounting_win_DWork.Dilation1_STREL_DW[0] = 2;
    } else if (step == 1) {
      vipcellcounting_win_DWork.Dilation1_STREL_DW[0] = 1;
    } else {
      vipcellcounting_win_DWork.Dilation1_STREL_DW[0] = 0;
    }
  } else {
    vipcellcounting_win_DWork.Dilation1_STREL_DW[0] = 0;
  }

  curNumNonZ = 0;
  isValid = TRUE;
  idxOut = 0;
  n = 0;
  while (n &lt; 7) {
    m = 0;
    while (m &lt; 1) {
      if (curNumNonZ == 0) {
        curNumNonZ = 1;
      } else if (curNumNonZ == 1) {
        step = idxOut - previous;
        curNumNonZ = 2;
      } else if (idxOut - previous == step) {
        curNumNonZ++;
      } else {
        isValid = FALSE;
        m = 1;
        n = 7;
      }

      previous = idxOut;
      idxOut++;
      m++;
    }

    idxOut += 444;
    n++;
  }

  if (isValid &amp;&amp; (curNumNonZ &gt;= 4)) {
    if (step == 445) {
      vipcellcounting_win_DWork.Dilation1_STREL_DW[1] = 2;
    } else if (step == 1) {
      vipcellcounting_win_DWork.Dilation1_STREL_DW[1] = 1;
    } else {
      vipcellcounting_win_DWork.Dilation1_STREL_DW[1] = 0;
    }
  } else {
    vipcellcounting_win_DWork.Dilation1_STREL_DW[1] = 0;
  }

  previous = 0;
  curNumNonZ = 0;
  n = 0;
  while (n &lt; 1) {
    for (m = 0; m &lt; 7; m++) {
      vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[previous] = m;
      curNumNonZ++;
      previous++;
    }

    n = 1;
  }

  vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0] = curNumNonZ;
  curNumNonZ = 0;
  for (n = 0; n &lt; 7; n++) {
    m = 0;
    while (m &lt; 1) {
      vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[previous] = n * 445;
      curNumNonZ++;
      previous++;
      m = 1;
    }
  }

  vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1] = curNumNonZ;

  /* End of Start for S-Function (svipmorphop): '&lt;S11&gt;/Dilation1' */
}
</code>
  </function>
  <function name="vipcellcounting_win_Subsystem" type="defn">
    <code line="88" type="func">/* Output and update for atomic system: '&lt;S2&gt;/Subsystem' */
void vipcellcounting_win_Subsystem(void)
{
  int32_T i;
  real32_T Autothreshold_P_DW[256];
  real32_T Autothreshold_MU_DW[256];
  real32_T cnt;
  int32_T idxMaxVal;

  /* S-Function (svipgraythresh): '&lt;S9&gt;/Autothreshold' */
  for (i = 0; i &lt; 256; i++) {
    Autothreshold_P_DW[i] = 0.0F;
    Autothreshold_MU_DW[i] = 0.0F;
  }

  for (i = 0; i &lt; 228096; i++) {
    if (vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1[i] &lt;
        0.0F) {
      Autothreshold_P_DW[0]++;
    } else if
        (vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1[i]
         &gt; 1.0F) {
      Autothreshold_P_DW[255]++;
    } else {
      Autothreshold_P_DW[(uint8_T)
        (vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1[i]
         * 255.0F + 0.5F)]++;
    }
  }

  for (i = 0; i &lt; 256; i++) {
    Autothreshold_P_DW[i] /= 228096.0F;
  }

  Autothreshold_MU_DW[0] = Autothreshold_P_DW[0];
  cnt = 2.0F;
  for (i = 0; i &lt; 255; i++) {
    Autothreshold_MU_DW[i + 1] = Autothreshold_P_DW[i + 1] * cnt +
      Autothreshold_MU_DW[i];
    cnt++;
  }

  for (i = 0; i &lt; 255; i++) {
    Autothreshold_P_DW[i + 1] += Autothreshold_P_DW[i];
  }

  for (i = 0; i &lt; 256; i++) {
    cnt = Autothreshold_P_DW[i] * Autothreshold_MU_DW[255] -
      Autothreshold_MU_DW[i];
    cnt *= cnt;
    Autothreshold_P_DW[i] = cnt / ((1.0F - Autothreshold_P_DW[i]) *
      Autothreshold_P_DW[i]);
  }

  idxMaxVal = 0;
  cnt = 0.0F;
  for (i = 0; i &lt; 256; i++) {
    if (Autothreshold_P_DW[i] &gt; cnt) {
      cnt = Autothreshold_P_DW[i];
      idxMaxVal = i;
    }
  }

  cnt = (real32_T)idxMaxVal * vipcellcounting_win_P.Autothreshold_FACTOR_RTP /
    255.0F;
  for (i = 0; i &lt; 228096; i++) {
    vipcellcounting_win_B.vipcellcounting_win_SegmentCe_h[i] =
      (vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1[i] &lt;=
       cnt);
  }

  /* End of S-Function (svipgraythresh): '&lt;S9&gt;/Autothreshold' */
}
</code>
  </function>
  <function name="vipcellcounting_win_Subsystem1" type="defn">
    <code line="402" type="func">/* Output and update for atomic system: '&lt;S2&gt;/Subsystem1' */
void vipcellcounting_win_Subsystem1(void)
{
  int32_T ky;
  int32_T ku;
  int32_T i;
  int32_T inIdx;
  int32_T outIdx;
  int32_T col;
  int32_T row;
  int32_T numIter;
  int32_T gOffset;
  int32_T hOffset;
  real32_T Dilation_GBUF_DW[555];
  real32_T Dilation_HBUF_DW[555];
  real32_T Dilation1_GBUF_DW[555];
  real32_T Dilation1_HBUF_DW[555];
  real32_T maxVal;

  /* S-Function (svipmorphop): '&lt;S11&gt;/Dilation' */
  ky = 0;
  ku = 0;
  for (i = 0; i &lt; 3; i++) {
    for (row = 0; row &lt; 445; row++) {
      vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
      ky++;
    }
  }

  for (i = 0; i &lt; 528; i++) {
    vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
    ky++;
    vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
    ky++;
    vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
    ky++;
    memcpy(&amp;vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[ky],
           &amp;vipcellcounting_win_B.vipcellcounting_win_Video_1[ku], 432U * sizeof
           (real32_T));
    ky += 432;
    ku += 432;
    for (row = 0; row &lt; 10; row++) {
      vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
      ky++;
    }
  }

  for (i = 0; i &lt; 10; i++) {
    for (row = 0; row &lt; 445; row++) {
      vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
      ky++;
    }
  }

  for (i = 0; i &lt; 240745; i++) {
    vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[i] = (rtMinusInfF);
  }

  inIdx = 0;
  outIdx = 3;
  if (vipcellcounting_win_DWork.Dilation_STREL_DW[0] == 0) {
    for (col = 0; col &lt; 540; col++) {
      for (row = 0; row &lt; 438; row++) {
        maxVal = vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx +
          vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[0]];
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
          if (vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx +
              vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[i]] &gt; maxVal) {
            maxVal = vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx +
              vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[i]];
          }
        }

        vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[outIdx] = maxVal;
        inIdx++;
        outIdx++;
      }

      inIdx += 7;
      outIdx += 7;
    }
  } else if (vipcellcounting_win_DWork.Dilation_STREL_DW[0] == 1) {
    numIter = 441 / vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0];
    ky = vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[0] / 445 * 445;
    ku = vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[0] - ky;
    gOffset = (vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0] + ku) - 3;
    hOffset = ku - 3;
    inIdx = 3 + ky;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++)
    {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++)
    {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (col = 0; col &lt; 540; col++) {
      ky = vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx];
        ky++;
        inIdx++;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
          if ((Dilation_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx]))
          {
            Dilation_GBUF_DW[ky] = Dilation_GBUF_DW[ky - 1];
          } else {
            Dilation_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx++;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx - 1];
        ky--;
        inIdx--;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
          if ((Dilation_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx - 1]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx -
                       1])) {
            Dilation_HBUF_DW[ky - 1] = Dilation_HBUF_DW[ky];
          } else {
            Dilation_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx - 1];
          }

          ky--;
          inIdx--;
        }
      }

      inIdx += 445;
      for (row = 0; row &lt; 438; row++) {
        if ((Dilation_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[outIdx] =
            Dilation_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[outIdx] =
            Dilation_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx++;
      }

      outIdx += 7;
    }
  } else {
    numIter = 540 / vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0];
    ku = vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[0] / 445;
    gOffset = vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0] + ku;
    hOffset = ku;
    inIdx = vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[0] - ku * 445;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++)
    {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++)
    {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (row = 0; row &lt; 438; row++) {
      ky = vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx];
        ky++;
        inIdx += 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
          if ((Dilation_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx]))
          {
            Dilation_GBUF_DW[ky] = Dilation_GBUF_DW[ky - 1];
          } else {
            Dilation_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx += 445;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx - 445];
        ky--;
        inIdx -= 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]; i++) {
          if ((Dilation_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx - 445]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx -
                       445])) {
            Dilation_HBUF_DW[ky - 1] = Dilation_HBUF_DW[ky];
          } else {
            Dilation_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation_ONE_PAD_IMG_DW[inIdx - 445];
          }

          ky--;
          inIdx -= 445;
        }
      }

      inIdx++;
      for (col = 0; col &lt; 540; col++) {
        if ((Dilation_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[outIdx] =
            Dilation_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[outIdx] =
            Dilation_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx += 445;
      }

      outIdx += -240299;
    }
  }

  inIdx = 3;
  outIdx = 0;
  if (vipcellcounting_win_DWork.Dilation_STREL_DW[1] == 0) {
    for (col = 0; col &lt; 528; col++) {
      for (row = 3; row &lt; 435; row++) {
        maxVal = vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx +
          vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation_NUMNONZ_DW
          [0]]];
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
          if (vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW
              [i + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]] + inIdx] &gt;
              maxVal) {
            maxVal =
              vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW
              [i + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[0]] + inIdx];
          }
        }

        vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] = maxVal;
        inIdx++;
        outIdx++;
      }

      inIdx += 13;
    }
  } else if (vipcellcounting_win_DWork.Dilation_STREL_DW[1] == 1) {
    numIter = 432 / vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1];
    ky =
      vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation_NUMNONZ_DW
      [0]] / 445 * 445;
    ku =
      vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation_NUMNONZ_DW
      [0]] - ky;
    gOffset = vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1] + ku;
    hOffset = ku;
    inIdx = ky + 3;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++)
    {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++)
    {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (col = 0; col &lt; 528; col++) {
      ky = vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx];
        ky++;
        inIdx++;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
          if ((Dilation_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx]))
          {
            Dilation_GBUF_DW[ky] = Dilation_GBUF_DW[ky - 1];
          } else {
            Dilation_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx++;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx - 1];
        ky--;
        inIdx--;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
          if ((Dilation_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx - 1]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx -
                       1])) {
            Dilation_HBUF_DW[ky - 1] = Dilation_HBUF_DW[ky];
          } else {
            Dilation_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx - 1];
          }

          ky--;
          inIdx--;
        }
      }

      inIdx += 445;
      for (row = 3; row &lt; 435; row++) {
        if ((Dilation_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx++;
      }
    }
  } else {
    numIter = 531 / vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1];
    ku =
      vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation_NUMNONZ_DW
      [0]] / 445;
    gOffset = (vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1] + ku) - 3;
    hOffset = ku - 3;
    inIdx =
      (vipcellcounting_win_DWork.Dilation_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation_NUMNONZ_DW
       [0]] - ku * 445) + 1338;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++)
    {
      Dilation_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++)
    {
      Dilation_HBUF_DW[i] = (rtMinusInfF);
    }

    for (row = 3; row &lt; 435; row++) {
      ky = vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx];
        ky++;
        inIdx += 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
          if ((Dilation_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx]))
          {
            Dilation_GBUF_DW[ky] = Dilation_GBUF_DW[ky - 1];
          } else {
            Dilation_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx += 445;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx - 445];
        ky--;
        inIdx -= 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation_NUMNONZ_DW[1]; i++) {
          if ((Dilation_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx - 445]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx -
                       445])) {
            Dilation_HBUF_DW[ky - 1] = Dilation_HBUF_DW[ky];
          } else {
            Dilation_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation_TWO_PAD_IMG_DW[inIdx - 445];
          }

          ky--;
          inIdx -= 445;
        }
      }

      inIdx++;
      for (col = 0; col &lt; 528; col++) {
        if ((Dilation_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx += 432;
      }

      outIdx += -228095;
    }
  }

  for (i = 0; i &lt; 228096; i++) {
    /* Gain: '&lt;S11&gt;/Gain' */
    vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1[i] =
      vipcellcounting_win_P.Gain_Gain *
      vipcellcounting_win_B.vipcellcounting_win_Video_1[i];

    /* Sum: '&lt;S11&gt;/Subtract' */
    vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1[i] =
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Gain_1[i] -
      vipcellcounting_win_B.vipcellcounting_win_SegmentCell[i];

    /* Saturate: '&lt;S11&gt;/Saturation' */
    if (vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1[i] &gt;=
        vipcellcounting_win_P.Saturation_UpperSat) {
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1[i] =
        vipcellcounting_win_P.Saturation_UpperSat;
    } else if
        (vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1[i] &lt;=
         vipcellcounting_win_P.Saturation_LowerSat) {
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1[i] =
        vipcellcounting_win_P.Saturation_LowerSat;
    } else {
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1[i] =
        vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract_1[i];
    }

    /* End of Saturate: '&lt;S11&gt;/Saturation' */
  }

  /* End of S-Function (svipmorphop): '&lt;S11&gt;/Dilation' */

  /* S-Function (svipmorphop): '&lt;S11&gt;/Dilation1' */
  ky = 0;
  ku = 0;
  for (i = 0; i &lt; 3; i++) {
    for (row = 0; row &lt; 445; row++) {
      vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
      ky++;
    }
  }

  for (i = 0; i &lt; 528; i++) {
    vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
    ky++;
    vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
    ky++;
    vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
    ky++;
    memcpy(&amp;vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[ky],
           &amp;vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1
           [ku], 432U * sizeof(real32_T));
    ky += 432;
    ku += 432;
    for (row = 0; row &lt; 10; row++) {
      vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
      ky++;
    }
  }

  for (i = 0; i &lt; 10; i++) {
    for (row = 0; row &lt; 445; row++) {
      vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[ky] = (rtMinusInfF);
      ky++;
    }
  }

  for (i = 0; i &lt; 240745; i++) {
    vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[i] = (rtMinusInfF);
  }

  inIdx = 0;
  outIdx = 3;
  if (vipcellcounting_win_DWork.Dilation1_STREL_DW[0] == 0) {
    for (col = 0; col &lt; 540; col++) {
      for (row = 0; row &lt; 438; row++) {
        maxVal = vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx +
          vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[0]];
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
        {
          if (vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx +
              vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[i]] &gt; maxVal) {
            maxVal = vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx +
              vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[i]];
          }
        }

        vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[outIdx] = maxVal;
        inIdx++;
        outIdx++;
      }

      inIdx += 7;
      outIdx += 7;
    }
  } else if (vipcellcounting_win_DWork.Dilation1_STREL_DW[0] == 1) {
    numIter = 441 / vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0];
    ky = vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[0] / 445 * 445;
    ku = vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[0] - ky;
    gOffset = (vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0] + ku) - 3;
    hOffset = ku - 3;
    inIdx = 3 + ky;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++) {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
    {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++) {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
    {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (col = 0; col &lt; 540; col++) {
      ky = vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx];
        ky++;
        inIdx++;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
        {
          if ((Dilation1_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx]))
          {
            Dilation1_GBUF_DW[ky] = Dilation1_GBUF_DW[ky - 1];
          } else {
            Dilation1_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx++;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx - 1];
        ky--;
        inIdx--;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
        {
          if ((Dilation1_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx - 1]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx
                       - 1])) {
            Dilation1_HBUF_DW[ky - 1] = Dilation1_HBUF_DW[ky];
          } else {
            Dilation1_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx - 1];
          }

          ky--;
          inIdx--;
        }
      }

      inIdx += 445;
      for (row = 0; row &lt; 438; row++) {
        if ((Dilation1_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation1_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation1_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[outIdx] =
            Dilation1_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[outIdx] =
            Dilation1_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx++;
      }

      outIdx += 7;
    }
  } else {
    numIter = 540 / vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0];
    ku = vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[0] / 445;
    gOffset = vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0] + ku;
    hOffset = ku;
    inIdx = vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[0] - ku * 445;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++) {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
    {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++) {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
    {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (row = 0; row &lt; 438; row++) {
      ky = vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx];
        ky++;
        inIdx += 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
        {
          if ((Dilation1_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx]))
          {
            Dilation1_GBUF_DW[ky] = Dilation1_GBUF_DW[ky - 1];
          } else {
            Dilation1_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx += 445;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx - 445];
        ky--;
        inIdx -= 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]; i++)
        {
          if ((Dilation1_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx - 445]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx
                       - 445])) {
            Dilation1_HBUF_DW[ky - 1] = Dilation1_HBUF_DW[ky];
          } else {
            Dilation1_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation1_ONE_PAD_IMG_DW[inIdx - 445];
          }

          ky--;
          inIdx -= 445;
        }
      }

      inIdx++;
      for (col = 0; col &lt; 540; col++) {
        if ((Dilation1_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation1_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation1_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[outIdx] =
            Dilation1_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[outIdx] =
            Dilation1_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx += 445;
      }

      outIdx += -240299;
    }
  }

  inIdx = 3;
  outIdx = 0;
  if (vipcellcounting_win_DWork.Dilation1_STREL_DW[1] == 0) {
    for (col = 0; col &lt; 528; col++) {
      for (row = 3; row &lt; 435; row++) {
        maxVal = vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx +
          vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW
          [0]]];
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
        {
          if (vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW
              [i + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]] + inIdx] &gt;
              maxVal) {
            maxVal =
              vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW
              [i + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[0]] + inIdx];
          }
        }

        vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] = maxVal;
        inIdx++;
        outIdx++;
      }

      inIdx += 13;
    }
  } else if (vipcellcounting_win_DWork.Dilation1_STREL_DW[1] == 1) {
    numIter = 432 / vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1];
    ky =
      vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW
      [0]] / 445 * 445;
    ku =
      vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW
      [0]] - ky;
    gOffset = vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1] + ku;
    hOffset = ku;
    inIdx = ky + 3;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++) {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
    {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++) {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
    {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (col = 0; col &lt; 528; col++) {
      ky = vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx];
        ky++;
        inIdx++;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
        {
          if ((Dilation1_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx]))
          {
            Dilation1_GBUF_DW[ky] = Dilation1_GBUF_DW[ky - 1];
          } else {
            Dilation1_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx++;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx - 1];
        ky--;
        inIdx--;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
        {
          if ((Dilation1_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx - 1]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx
                       - 1])) {
            Dilation1_HBUF_DW[ky - 1] = Dilation1_HBUF_DW[ky];
          } else {
            Dilation1_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx - 1];
          }

          ky--;
          inIdx--;
        }
      }

      inIdx += 445;
      for (row = 3; row &lt; 435; row++) {
        if ((Dilation1_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation1_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation1_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation1_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation1_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx++;
      }
    }
  } else {
    numIter = 531 / vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1];
    ku =
      vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW
      [0]] / 445;
    gOffset = (vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1] + ku) - 3;
    hOffset = ku - 3;
    inIdx =
      (vipcellcounting_win_DWork.Dilation1_DILATE_OFF_DW[vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW
       [0]] - ku * 445) + 1338;
    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++) {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    ky = (numIter + 1) * vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1];
    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
    {
      Dilation1_GBUF_DW[i] = (rtMinusInfF);
    }

    for (i = 0; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++) {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (i = ky; i &lt; ky + vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
    {
      Dilation1_HBUF_DW[i] = (rtMinusInfF);
    }

    for (row = 3; row &lt; 435; row++) {
      ky = vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1];
      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_GBUF_DW[ky] =
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx];
        ky++;
        inIdx += 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
        {
          if ((Dilation1_GBUF_DW[ky - 1] &gt;=
               vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx]))
          {
            Dilation1_GBUF_DW[ky] = Dilation1_GBUF_DW[ky - 1];
          } else {
            Dilation1_GBUF_DW[ky] =
              vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx];
          }

          ky++;
          inIdx += 445;
        }
      }

      for (ku = 0; ku &lt; numIter; ku++) {
        Dilation1_HBUF_DW[ky - 1] =
          vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx - 445];
        ky--;
        inIdx -= 445;
        for (i = 1; i &lt; vipcellcounting_win_DWork.Dilation1_NUMNONZ_DW[1]; i++)
        {
          if ((Dilation1_HBUF_DW[ky] &gt;=
               vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx - 445]) ||
              rtIsNaNF(vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx
                       - 445])) {
            Dilation1_HBUF_DW[ky - 1] = Dilation1_HBUF_DW[ky];
          } else {
            Dilation1_HBUF_DW[ky - 1] =
              vipcellcounting_win_DWork.Dilation1_TWO_PAD_IMG_DW[inIdx - 445];
          }

          ky--;
          inIdx -= 445;
        }
      }

      inIdx++;
      for (col = 0; col &lt; 528; col++) {
        if ((Dilation1_GBUF_DW[(ky + gOffset) - 1] &gt;= Dilation1_HBUF_DW[ky +
             hOffset]) || rtIsNaNF(Dilation1_HBUF_DW[ky + hOffset])) {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation1_GBUF_DW[(ky + gOffset) - 1];
        } else {
          vipcellcounting_win_B.vipcellcounting_win_SegmentCell[outIdx] =
            Dilation1_HBUF_DW[ky + hOffset];
        }

        ky++;
        outIdx += 432;
      }

      outIdx += -228095;
    }
  }

  /* End of S-Function (svipmorphop): '&lt;S11&gt;/Dilation1' */

  /* Sum: '&lt;S11&gt;/Subtract2' */
  for (i = 0; i &lt; 228096; i++) {
    vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Subtract2_1[i] =
      vipcellcounting_win_B.vipcellcounting_win_SegmentCell[i] -
      vipcellcounting_win_SegmentCells_Subsystem1_IsolateCells_Saturation_1[i];
  }

  /* End of Sum: '&lt;S11&gt;/Subtract2' */
}
</code>
  </function>
  <function name="vipcellcounting_win_Subsystem_c" type="defn">
    <code line="1360" type="func">/* Output and update for atomic system: '&lt;Root&gt;/Subsystem' */
void vipcellcounting_win_Subsystem_c(void)
{
  boolean_T maxNumBlobsReached;
  int32_T loop;
  uint16_T currentLabel;
  int32_T i;
  int32_T idx;
  int32_T n;
  uint32_T stackIdx;
  uint32_T pixIdx;
  uint32_T start_pixIdx;
  uint32_T walkerIdx;
  uint32_T numBlobs;
  int32_T ns;
  int32_T j;

  /* S-Function (svipblob): '&lt;S3&gt;/Count Cells' */
  maxNumBlobsReached = FALSE;
  memset(&amp;vipcellcounting_win_DWork.CountCells_PAD_DW[0], 0, 435U * sizeof
         (uint16_T));
  currentLabel = 1U;
  i = 0;
  idx = 435;
  for (n = 0; n &lt; 528; n++) {
    for (j = 0; j &lt; 432; j++) {
      vipcellcounting_win_DWork.CountCells_PAD_DW[idx] = (uint16_T)
        (vipcellcounting_win_B.vipcellcounting_win_SegmentCe_h[i] ? 65535 : 0);
      i++;
      idx++;
    }

    vipcellcounting_win_DWork.CountCells_PAD_DW[idx] = 0U;
    vipcellcounting_win_DWork.CountCells_PAD_DW[idx + 1] = 0U;
    idx += 2;
  }

  memset(&amp;vipcellcounting_win_DWork.CountCells_PAD_DW[idx], 0, 433U * sizeof
         (uint16_T));
  loop = 0;
  pixIdx = 0U;
  n = 0;
  while (n &lt; 528) {
    idx = 0;
    ns = (loop + 1) * 434;
    j = 0;
    while (j &lt; 432) {
      numBlobs = (uint32_T)((ns + idx) + 1);
      start_pixIdx = pixIdx;
      if (vipcellcounting_win_DWork.CountCells_PAD_DW[numBlobs] == 65535) {
        vipcellcounting_win_DWork.CountCells_PAD_DW[numBlobs] = currentLabel;
        vipcellcounting_win_DWork.CountCells_N_PIXLIST_DW[pixIdx] = (int16_T)
          loop;
        vipcellcounting_win_DWork.CountCells_M_PIXLIST_DW[pixIdx] = (int16_T)idx;
        pixIdx++;
        vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[currentLabel - 1] = 1U;
        vipcellcounting_win_DWork.CountCells_STACK_DW[0U] = numBlobs;
        stackIdx = 1U;
        while (stackIdx != 0U) {
          stackIdx--;
          numBlobs = vipcellcounting_win_DWork.CountCells_STACK_DW[stackIdx];
          for (i = 0; i &lt; 8; i++) {
            walkerIdx = numBlobs + (uint32_T)
              vipcellcounting_win_ConstP.CountCells_WALKER_RTP[i];
            if (vipcellcounting_win_DWork.CountCells_PAD_DW[walkerIdx] == 65535)
            {
              vipcellcounting_win_DWork.CountCells_PAD_DW[walkerIdx] =
                currentLabel;
              vipcellcounting_win_DWork.CountCells_N_PIXLIST_DW[pixIdx] =
                (int16_T)((int16_T)(walkerIdx / 434U) - 1);
              vipcellcounting_win_DWork.CountCells_M_PIXLIST_DW[pixIdx] =
                (int16_T)(walkerIdx % 434U - 1U);
              pixIdx++;
              vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[currentLabel - 1]
                ++;
              vipcellcounting_win_DWork.CountCells_STACK_DW[stackIdx] =
                walkerIdx;
              stackIdx++;
            }
          }
        }

        if ((vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[currentLabel - 1] &lt;
             vipcellcounting_win_P.CountCells_MINAREA_RTP) ||
            (vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[currentLabel - 1] &gt;
             vipcellcounting_win_P.CountCells_MAXAREA_RTP)) {
          currentLabel--;
          pixIdx = start_pixIdx;
        }

        if (currentLabel == 1500) {
          maxNumBlobsReached = TRUE;
          n = 528;
          j = 432;
        }

        if (j &lt; 432) {
          currentLabel++;
        }
      }

      idx++;
      j++;
    }

    loop++;
    n++;
  }

  numBlobs = (uint32_T)(maxNumBlobsReached ? currentLabel : (uint16_T)((uint32_T)
    currentLabel - 1U));
  loop = 0;
  idx = 0;
  for (i = 0; i &lt; (int32_T)numBlobs; i++) {
    ns = 0;
    n = 0;
    for (j = 0; j &lt; (int32_T)vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[i];
         j++) {
      ns += vipcellcounting_win_DWork.CountCells_N_PIXLIST_DW[j + idx];
      n += vipcellcounting_win_DWork.CountCells_M_PIXLIST_DW[j + loop];
    }

    vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[i] = (real32_T)ns /
      (real32_T)vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[i] + 1.0F;
    vipcellcounting_win_B.vipcellcounting_win_Subsystem_C[numBlobs + (uint32_T)i]
      = (real32_T)n / (real32_T)
      vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[i] + 1.0F;
    loop += (int32_T)vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[i];
    idx += (int32_T)vipcellcounting_win_DWork.CountCells_NUM_PIX_DW[i];
  }

  vipcellcounting_win_DWork.CountCells_DIMS1[0] = (int32_T)numBlobs;
  vipcellcounting_win_DWork.CountCells_DIMS1[1] = 2;

  /* End of S-Function (svipblob): '&lt;S3&gt;/Count Cells' */
}
</code>
  </function>
</sm:blocks>
